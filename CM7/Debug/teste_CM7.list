
teste_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a52c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800a7cc  0800a7cc  0001a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa7c  0800aa7c  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa7c  0800aa7c  0001aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa84  0800aa84  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800aa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000078  0800ab04  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d8  0800ab64  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001e928  24000138  0800abc4  00020138  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2401ea60  0800abc4  0002ea60  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c46b  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c95  00000000  00000000  0004c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f80  00000000  00000000  00051268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001da8  00000000  00000000  000531e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003fd97  00000000  00000000  00054f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002679e  00000000  00000000  00094d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019f3ac  00000000  00000000  000bb4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0025a871  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e58  00000000  00000000  0025a8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a7b4 	.word	0x0800a7b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	0800a7b4 	.word	0x0800a7b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e0:	bf00      	nop
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <main+0xc4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <main+0x24>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dcf4      	bgt.n	80007e2 <main+0xe>
  if ( timeout < 0 )
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da01      	bge.n	8000802 <main+0x2e>
  {
  Error_Handler();
 80007fe:	f000 fa27 	bl	8000c50 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fd55 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f855 	bl	80008b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0xc4>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <main+0xc4>)
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <main+0xc4>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000828:	2000      	movs	r0, #0
 800082a:	f001 fc95 	bl	8002158 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f001 fcab 	bl	800218c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800083c:	bf00      	nop
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <main+0xc4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <main+0x80>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dcf4      	bgt.n	800083e <main+0x6a>
if ( timeout < 0 )
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da01      	bge.n	800085e <main+0x8a>
{
Error_Handler();
 800085a:	f000 f9f9 	bl	8000c50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 f977 	bl	8000b50 <MX_GPIO_Init>
  MX_ETH_Init();
 8000862:	f000 f8ab 	bl	80009bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000866:	f000 f8f5 	bl	8000a54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800086a:	f000 f93f 	bl	8000aec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800086e:	f006 f923 	bl	8006ab8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <main+0xc8>)
 8000874:	2100      	movs	r1, #0
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <main+0xcc>)
 8000878:	f006 f968 	bl	8006b4c <osThreadNew>
 800087c:	4603      	mov	r3, r0
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <main+0xd0>)
 8000880:	6013      	str	r3, [r2, #0]

  /* creation of wolfCrypt */
  wolfCryptHandle = osThreadNew(wolfCryptDemo, NULL, &wolfCrypt_attributes);
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <main+0xd4>)
 8000884:	2100      	movs	r1, #0
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <main+0xd8>)
 8000888:	f006 f960 	bl	8006b4c <osThreadNew>
 800088c:	4603      	mov	r3, r0
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <main+0xdc>)
 8000890:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000892:	f006 f935 	bl	8006b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0xc2>
 8000898:	58024400 	.word	0x58024400
 800089c:	0800a974 	.word	0x0800a974
 80008a0:	08000c1d 	.word	0x08000c1d
 80008a4:	240007d8 	.word	0x240007d8
 80008a8:	0800a998 	.word	0x0800a998
 80008ac:	080095ed 	.word	0x080095ed
 80008b0:	240007dc 	.word	0x240007dc

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	; 0x70
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	224c      	movs	r2, #76	; 0x4c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f008 ff6a 	bl	800979c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 ff64 	bl	800979c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f001 fdb5 	bl	8002444 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <SystemClock_Config+0xfc>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <SystemClock_Config+0xfc>)
 80008e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <SystemClock_Config+0xfc>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <SystemClock_Config+0x100>)
 80008f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f8:	4a2e      	ldr	r2, [pc, #184]	; (80009b4 <SystemClock_Config+0x100>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <SystemClock_Config+0x100>)
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090c:	bf00      	nop
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <SystemClock_Config+0xfc>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091a:	d1f8      	bne.n	800090e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <SystemClock_Config+0x104>)
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f023 0303 	bic.w	r3, r3, #3
 8000924:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <SystemClock_Config+0x104>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000930:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	2302      	movs	r3, #2
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000942:	2378      	movs	r3, #120	; 0x78
 8000944:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000952:	230c      	movs	r3, #12
 8000954:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000956:	2300      	movs	r3, #0
 8000958:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fdd8 	bl	8002518 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800096e:	f000 f96f 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	233f      	movs	r3, #63	; 0x3f
 8000974:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2303      	movs	r3, #3
 8000978:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800097e:	2308      	movs	r3, #8
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2104      	movs	r1, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f002 f9eb 	bl	8002d74 <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009a4:	f000 f954 	bl	8000c50 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3770      	adds	r7, #112	; 0x70
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58024800 	.word	0x58024800
 80009b4:	58000400 	.word	0x58000400
 80009b8:	58024400 	.word	0x58024400

080009bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_ETH_Init+0x80>)
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <MX_ETH_Init+0x84>)
 80009c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_ETH_Init+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_ETH_Init+0x88>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_ETH_Init+0x88>)
 80009d4:	22e1      	movs	r2, #225	; 0xe1
 80009d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_ETH_Init+0x88>)
 80009da:	2200      	movs	r2, #0
 80009dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_ETH_Init+0x88>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_ETH_Init+0x88>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_ETH_Init+0x80>)
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_ETH_Init+0x88>)
 80009ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_ETH_Init+0x80>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_ETH_Init+0x80>)
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_ETH_Init+0x8c>)
 80009fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_ETH_Init+0x80>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_ETH_Init+0x90>)
 8000a00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_ETH_Init+0x80>)
 8000a04:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_ETH_Init+0x80>)
 8000a0c:	f000 fdd0 	bl	80015b0 <HAL_ETH_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a16:	f000 f91b 	bl	8000c50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a1a:	2238      	movs	r2, #56	; 0x38
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_ETH_Init+0x94>)
 8000a20:	f008 febc 	bl	800979c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_ETH_Init+0x94>)
 8000a26:	2221      	movs	r2, #33	; 0x21
 8000a28:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_ETH_Init+0x94>)
 8000a2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a30:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_ETH_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2400018c 	.word	0x2400018c
 8000a40:	40028000 	.word	0x40028000
 8000a44:	240007e0 	.word	0x240007e0
 8000a48:	240000d8 	.word	0x240000d8
 8000a4c:	24000078 	.word	0x24000078
 8000a50:	24000154 	.word	0x24000154

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f004 fb79 	bl	8005194 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f8d2 	bl	8000c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f005 fbea 	bl	8006288 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f8c9 	bl	8000c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f005 fc1f 	bl	8006304 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f8c0 	bl	8000c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f005 fba0 	bl	8006216 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f8b8 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2400023c 	.word	0x2400023c
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000af4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2209      	movs	r2, #9
 8000afa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b34:	f001 fb3e 	bl	80021b4 <HAL_PCD_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b3e:	f000 f887 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	240002cc 	.word	0x240002cc
 8000b4c:	40080000 	.word	0x40080000

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	58024400 	.word	0x58024400

08000c1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f006 f823 	bl	8006c70 <osDelay>
 8000c2a:	e7fb      	b.n	8000c24 <StartDefaultTask+0x8>

08000c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3e:	f000 fb73 	bl	8001328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010000 	.word	0x40010000

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x38>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_MspInit+0x38>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_MspInit+0x38>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	210f      	movs	r1, #15
 8000c84:	f06f 0001 	mvn.w	r0, #1
 8000c88:	f000 fc6a 	bl	8001560 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400

08000c98 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a59      	ldr	r2, [pc, #356]	; (8000e1c <HAL_ETH_MspInit+0x184>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	f040 80ab 	bne.w	8000e12 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cbc:	4b58      	ldr	r3, [pc, #352]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc2:	4a57      	ldr	r2, [pc, #348]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ccc:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cda:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce0:	4a4f      	ldr	r2, [pc, #316]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cea:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cf8:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfe:	4a48      	ldr	r2, [pc, #288]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d08:	4b45      	ldr	r3, [pc, #276]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a40      	ldr	r2, [pc, #256]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a2a      	ldr	r2, [pc, #168]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_ETH_MspInit+0x188>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d8e:	2332      	movs	r3, #50	; 0x32
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	481e      	ldr	r0, [pc, #120]	; (8000e24 <HAL_ETH_MspInit+0x18c>)
 8000daa:	f001 f825 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dae:	2386      	movs	r3, #134	; 0x86
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <HAL_ETH_MspInit+0x190>)
 8000dca:	f001 f815 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de0:	230b      	movs	r3, #11
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <HAL_ETH_MspInit+0x194>)
 8000dec:	f001 f804 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000df0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e02:	230b      	movs	r3, #11
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4808      	ldr	r0, [pc, #32]	; (8000e30 <HAL_ETH_MspInit+0x198>)
 8000e0e:	f000 fff3 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40028000 	.word	0x40028000
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020800 	.word	0x58020800
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	58021800 	.word	0x58021800

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b0b8      	sub	sp, #224	; 0xe0
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	22bc      	movs	r2, #188	; 0xbc
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f008 fca1 	bl	800979c <memset>
  if(huart->Instance==USART3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a25      	ldr	r2, [pc, #148]	; (8000ef4 <HAL_UART_MspInit+0xc0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d142      	bne.n	8000eea <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e64:	2302      	movs	r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fb4c 	bl	8003510 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e7e:	f7ff fee7 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_UART_MspInit+0xc4>)
 8000e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_UART_MspInit+0xc4>)
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0xc4>)
 8000e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_UART_MspInit+0xc4>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_UART_MspInit+0xc4>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0xc4>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ede:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0xc8>)
 8000ee6:	f000 ff87 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37e0      	adds	r7, #224	; 0xe0
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020c00 	.word	0x58020c00

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b8      	sub	sp, #224	; 0xe0
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	22bc      	movs	r2, #188	; 0xbc
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f008 fc3b 	bl	800979c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a36      	ldr	r2, [pc, #216]	; (8001004 <HAL_PCD_MspInit+0x104>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d165      	bne.n	8000ffc <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fad5 	bl	8003510 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000f6c:	f7ff fe70 	bl	8000c50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f70:	f001 fac2 	bl	80024f8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <HAL_PCD_MspInit+0x108>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <HAL_PCD_MspInit+0x108>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_PCD_MspInit+0x108>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f92:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fac:	230a      	movs	r3, #10
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <HAL_PCD_MspInit+0x10c>)
 8000fba:	f000 ff1d 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <HAL_PCD_MspInit+0x10c>)
 8000fda:	f000 ff0d 	bl	8001df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_PCD_MspInit+0x108>)
 8000fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_PCD_MspInit+0x108>)
 8000fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_PCD_MspInit+0x108>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	37e0      	adds	r7, #224	; 0xe0
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40080000 	.word	0x40080000
 8001008:	58024400 	.word	0x58024400
 800100c:	58020000 	.word	0x58020000

08001010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	d844      	bhi.n	80010a8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800101e:	2200      	movs	r2, #0
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	2019      	movs	r0, #25
 8001024:	f000 fa9c 	bl	8001560 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001028:	2019      	movs	r0, #25
 800102a:	f000 fab3 	bl	8001594 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800102e:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <HAL_InitTick+0xb0>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_InitTick+0xb4>)
 8001036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800103a:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <HAL_InitTick+0xb4>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HAL_InitTick+0xb4>)
 8001046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fa15 	bl	800348c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001062:	f002 f9fd 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8001066:	4603      	mov	r3, r0
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <HAL_InitTick+0xb8>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	0c9b      	lsrs	r3, r3, #18
 8001076:	3b01      	subs	r3, #1
 8001078:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_InitTick+0xbc>)
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_InitTick+0xc0>)
 800107e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0xbc>)
 8001082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001086:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_InitTick+0xbc>)
 800108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_InitTick+0xbc>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_InitTick+0xbc>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800109a:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_InitTick+0xbc>)
 800109c:	f003 fda0 	bl	8004be0 <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d107      	bne.n	80010b6 <HAL_InitTick+0xa6>
 80010a6:	e001      	b.n	80010ac <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e005      	b.n	80010b8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <HAL_InitTick+0xbc>)
 80010ae:	f003 fdf9 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
 80010b2:	4603      	mov	r3, r0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3738      	adds	r7, #56	; 0x38
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	24000008 	.word	0x24000008
 80010c4:	58024400 	.word	0x58024400
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	240007e8 	.word	0x240007e8
 80010d0:	40010000 	.word	0x40010000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM1_UP_IRQHandler+0x10>)
 8001106:	f003 fe45 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240007e8 	.word	0x240007e8

08001114 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e00a      	b.n	800113c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	4601      	mov	r1, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbf0      	blt.n	8001126 <_read+0x12>
	}

return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e009      	b.n	8001174 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf1      	blt.n	8001160 <_write+0x12>
	}
	return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
	return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_isatty>:

int _isatty(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f008 fa84 	bl	800972c <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	24080000 	.word	0x24080000
 8001250:	00000400 	.word	0x00000400
 8001254:	24000834 	.word	0x24000834
 8001258:	2401ea60 	.word	0x2401ea60

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff fa10 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f008 fa55 	bl	8009738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff faa1 	bl	80007d4 <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800129c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80012a0:	0800aa8c 	.word	0x0800aa8c
  ldr r2, =_sbss
 80012a4:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80012a8:	2401ea60 	.word	0x2401ea60

080012ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC3_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f947 	bl	800154a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012bc:	f001 ff10 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4913      	ldr	r1, [pc, #76]	; (800131c <HAL_Init+0x6c>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_Init+0x6c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_Init+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_Init+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	200f      	movs	r0, #15
 80012fc:	f7ff fe88 	bl	8001010 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e002      	b.n	8001310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fca7 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	0800a964 	.word	0x0800a964
 8001320:	24000004 	.word	0x24000004
 8001324:	24000000 	.word	0x24000000

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2400000c 	.word	0x2400000c
 800134c:	24000838 	.word	0x24000838

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	24000838 	.word	0x24000838

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2400000c 	.word	0x2400000c

080013b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetREVID+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0c1b      	lsrs	r3, r3, #16
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	5c001000 	.word	0x5c001000

080013c8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013d8:	4904      	ldr	r1, [pc, #16]	; (80013ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	58000400 	.word	0x58000400

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <__NVIC_SetPriorityGrouping+0x40>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	4313      	orrs	r3, r2
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x40>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	05fa0000 	.word	0x05fa0000

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <__NVIC_EnableIRQ+0x38>)
 800146e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff4c 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800156e:	f7ff ff63 	bl	8001438 <__NVIC_GetPriorityGrouping>
 8001572:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f7ff ffb3 	bl	80014e4 <NVIC_EncodePriority>
 800157e:	4602      	mov	r2, r0
 8001580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff82 	bl	8001490 <__NVIC_SetPriority>
}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff56 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0cf      	b.n	8001762 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2223      	movs	r2, #35	; 0x23
 80015d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fb5f 	bl	8000c98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <HAL_ETH_Init+0x1bc>)
 80015dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e0:	4a62      	ldr	r2, [pc, #392]	; (800176c <HAL_ETH_Init+0x1bc>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_ETH_Init+0x1bc>)
 80015ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7a1b      	ldrb	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fee1 	bl	80013c8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001606:	e003      	b.n	8001610 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001608:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800160c:	f7ff fedc 	bl	80013c8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001610:	4b57      	ldr	r3, [pc, #348]	; (8001770 <HAL_ETH_Init+0x1c0>)
 8001612:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800162a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7ff fe90 	bl	8001350 <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001632:	e011      	b.n	8001658 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001634:	f7ff fe8c 	bl	8001350 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001642:	d909      	bls.n	8001658 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2204      	movs	r2, #4
 8001648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	22e0      	movs	r2, #224	; 0xe0
 8001650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e084      	b.n	8001762 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e4      	bne.n	8001634 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f886 	bl	800177c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001670:	f001 feb0 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 8001674:	4603      	mov	r3, r0
 8001676:	4a3f      	ldr	r2, [pc, #252]	; (8001774 <HAL_ETH_Init+0x1c4>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9a      	lsrs	r2, r3, #18
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3a01      	subs	r2, #1
 8001684:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fa71 	bl	8001b70 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001696:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800169a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	22e0      	movs	r2, #224	; 0xe0
 80016c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e049      	b.n	8001762 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_ETH_Init+0x1c8>)
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6952      	ldr	r2, [r2, #20]
 80016e2:	0051      	lsls	r1, r2, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fad9 	bl	8001caa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fb1f 	bl	8001d3c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	3305      	adds	r3, #5
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021a      	lsls	r2, r3, #8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	061a      	lsls	r2, r3, #24
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	3302      	adds	r3, #2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800173c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800174a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800174c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2210      	movs	r2, #16
 800175c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	58024400 	.word	0x58024400
 8001770:	58000400 	.word	0x58000400
 8001774:	431bde83 	.word	0x431bde83
 8001778:	ffff8001 	.word	0xffff8001

0800177c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001794:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001796:	f001 fe1d 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 800179a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d908      	bls.n	80017b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d804      	bhi.n	80017b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e027      	b.n	8001806 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d908      	bls.n	80017d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d204      	bcs.n	80017d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e01a      	b.n	8001806 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d303      	bcc.n	80017e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d911      	bls.n	8001804 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d908      	bls.n	80017fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_ETH_SetMDIOClockRange+0xac>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d804      	bhi.n	80017fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e005      	b.n	8001806 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e000      	b.n	8001806 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001804:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	01312cff 	.word	0x01312cff
 800181c:	02160ebf 	.word	0x02160ebf
 8001820:	03938700 	.word	0x03938700
 8001824:	05f5e0ff 	.word	0x05f5e0ff
 8001828:	08f0d17f 	.word	0x08f0d17f

0800182c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800183e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	7b1b      	ldrb	r3, [r3, #12]
 800184c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b5b      	ldrb	r3, [r3, #13]
 8001854:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b9b      	ldrb	r3, [r3, #14]
 800185c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800185e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	7bdb      	ldrb	r3, [r3, #15]
 8001864:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001866:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	7c12      	ldrb	r2, [r2, #16]
 800186c:	2a00      	cmp	r2, #0
 800186e:	d102      	bne.n	8001876 <ETH_SetMACConfig+0x4a>
 8001870:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001874:	e000      	b.n	8001878 <ETH_SetMACConfig+0x4c>
 8001876:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001878:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	7c52      	ldrb	r2, [r2, #17]
 800187e:	2a00      	cmp	r2, #0
 8001880:	d102      	bne.n	8001888 <ETH_SetMACConfig+0x5c>
 8001882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001886:	e000      	b.n	800188a <ETH_SetMACConfig+0x5e>
 8001888:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800188a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	7c9b      	ldrb	r3, [r3, #18]
 8001890:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001892:	431a      	orrs	r2, r3
               macconf->Speed |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001898:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	7f1b      	ldrb	r3, [r3, #28]
 80018a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7f5b      	ldrb	r3, [r3, #29]
 80018ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	7f92      	ldrb	r2, [r2, #30]
 80018b4:	2a00      	cmp	r2, #0
 80018b6:	d102      	bne.n	80018be <ETH_SetMACConfig+0x92>
 80018b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018bc:	e000      	b.n	80018c0 <ETH_SetMACConfig+0x94>
 80018be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	7fdb      	ldrb	r3, [r3, #31]
 80018c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018d0:	2a00      	cmp	r2, #0
 80018d2:	d102      	bne.n	80018da <ETH_SetMACConfig+0xae>
 80018d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d8:	e000      	b.n	80018dc <ETH_SetMACConfig+0xb0>
 80018da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <ETH_SetMACConfig+0x22c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	430b      	orrs	r3, r1
 8001908:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001916:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001918:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001920:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001922:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800192a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800192c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001934:	2a00      	cmp	r2, #0
 8001936:	d102      	bne.n	800193e <ETH_SetMACConfig+0x112>
 8001938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800193c:	e000      	b.n	8001940 <ETH_SetMACConfig+0x114>
 800193e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001940:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <ETH_SetMACConfig+0x230>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	430b      	orrs	r3, r1
 800195c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001964:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <ETH_SetMACConfig+0x234>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	430b      	orrs	r3, r1
 8001980:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001988:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001996:	2a00      	cmp	r2, #0
 8001998:	d101      	bne.n	800199e <ETH_SetMACConfig+0x172>
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	e000      	b.n	80019a0 <ETH_SetMACConfig+0x174>
 800199e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	430b      	orrs	r3, r1
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f023 0103 	bic.w	r1, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d101      	bne.n	8001a1a <ETH_SetMACConfig+0x1ee>
 8001a16:	2240      	movs	r2, #64	; 0x40
 8001a18:	e000      	b.n	8001a1c <ETH_SetMACConfig+0x1f0>
 8001a1a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a24:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a2e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a3c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	00048083 	.word	0x00048083
 8001a5c:	c0f88000 	.word	0xc0f88000
 8001a60:	fffffef0 	.word	0xfffffef0

08001a64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <ETH_SetDMAConfig+0xf8>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	6811      	ldr	r1, [r2, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a8a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	7b1b      	ldrb	r3, [r3, #12]
 8001a9c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <ETH_SetDMAConfig+0xfc>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001abc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7b5b      	ldrb	r3, [r3, #13]
 8001ac2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <ETH_SetDMAConfig+0x100>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7f5b      	ldrb	r3, [r3, #29]
 8001afc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <ETH_SetDMAConfig+0x104>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b1e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7f1b      	ldrb	r3, [r3, #28]
 8001b26:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <ETH_SetDMAConfig+0x108>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	430b      	orrs	r3, r1
 8001b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b4c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	ffff87fd 	.word	0xffff87fd
 8001b60:	ffff2ffe 	.word	0xffff2ffe
 8001b64:	fffec000 	.word	0xfffec000
 8001b68:	ffc0efef 	.word	0xffc0efef
 8001b6c:	7fc0ffff 	.word	0x7fc0ffff

08001b70 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0a4      	sub	sp, #144	; 0x90
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bc8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bea:	2300      	movs	r3, #0
 8001bec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c1a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c24:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fde6 	bl	800182c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c60:	2301      	movs	r3, #1
 8001c62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c88:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c90:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fee1 	bl	8001a64 <ETH_SetDMAConfig>
}
 8001ca2:	bf00      	nop
 8001ca4:	3790      	adds	r7, #144	; 0x90
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	e01d      	b.n	8001cf4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	3206      	adds	r2, #6
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d9de      	bls.n	8001cb8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e023      	b.n	8001d92 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6919      	ldr	r1, [r3, #16]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	3212      	adds	r2, #18
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d9d8      	bls.n	8001d4a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e06:	4b89      	ldr	r3, [pc, #548]	; (800202c <HAL_GPIO_Init+0x234>)
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e0a:	e194      	b.n	8002136 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8186 	beq.w	8002130 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x44>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	69b9      	ldr	r1, [r7, #24]
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80e0 	beq.w	8002130 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f70:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <HAL_GPIO_Init+0x238>)
 8001f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f76:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <HAL_GPIO_Init+0x238>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_GPIO_Init+0x238>)
 8001f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8e:	4a29      	ldr	r2, [pc, #164]	; (8002034 <HAL_GPIO_Init+0x23c>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_GPIO_Init+0x240>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d052      	beq.n	8002060 <HAL_GPIO_Init+0x268>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_GPIO_Init+0x244>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_GPIO_Init+0x22e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_GPIO_Init+0x248>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02b      	beq.n	8002022 <HAL_GPIO_Init+0x22a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_GPIO_Init+0x24c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d025      	beq.n	800201e <HAL_GPIO_Init+0x226>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_GPIO_Init+0x250>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01f      	beq.n	800201a <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_GPIO_Init+0x254>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x258>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_GPIO_Init+0x25c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_GPIO_Init+0x260>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_GPIO_Init+0x264>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x20e>
 8002002:	2309      	movs	r3, #9
 8002004:	e02d      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 8002006:	230a      	movs	r3, #10
 8002008:	e02b      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 800200a:	2308      	movs	r3, #8
 800200c:	e029      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 800200e:	2307      	movs	r3, #7
 8002010:	e027      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 8002012:	2306      	movs	r3, #6
 8002014:	e025      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 8002016:	2305      	movs	r3, #5
 8002018:	e023      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 800201a:	2304      	movs	r3, #4
 800201c:	e021      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 800201e:	2303      	movs	r3, #3
 8002020:	e01f      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 8002022:	2302      	movs	r3, #2
 8002024:	e01d      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 8002026:	2301      	movs	r3, #1
 8002028:	e01b      	b.n	8002062 <HAL_GPIO_Init+0x26a>
 800202a:	bf00      	nop
 800202c:	58000080 	.word	0x58000080
 8002030:	58024400 	.word	0x58024400
 8002034:	58000400 	.word	0x58000400
 8002038:	58020000 	.word	0x58020000
 800203c:	58020400 	.word	0x58020400
 8002040:	58020800 	.word	0x58020800
 8002044:	58020c00 	.word	0x58020c00
 8002048:	58021000 	.word	0x58021000
 800204c:	58021400 	.word	0x58021400
 8002050:	58021800 	.word	0x58021800
 8002054:	58021c00 	.word	0x58021c00
 8002058:	58022000 	.word	0x58022000
 800205c:	58022400 	.word	0x58022400
 8002060:	2300      	movs	r3, #0
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f002 0203 	and.w	r2, r2, #3
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	4093      	lsls	r3, r2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002072:	4938      	ldr	r1, [pc, #224]	; (8002154 <HAL_GPIO_Init+0x35c>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f ae63 	bne.w	8001e0c <HAL_GPIO_Init+0x14>
  }
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	3724      	adds	r7, #36	; 0x24
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	58000400 	.word	0x58000400

08002158 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002160:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_HSEM_FastTake+0x2c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3320      	adds	r3, #32
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_HSEM_FastTake+0x30>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	58026400 	.word	0x58026400
 8002188:	80000300 	.word	0x80000300

0800218c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002196:	4906      	ldr	r1, [pc, #24]	; (80021b0 <HAL_HSEM_Release+0x24>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	58026400 	.word	0x58026400

080021b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b08f      	sub	sp, #60	; 0x3c
 80021b8:	af0a      	add	r7, sp, #40	; 0x28
 80021ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e116      	b.n	80023f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7fe fe8d 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f004 f977 	bl	80064f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	687e      	ldr	r6, [r7, #4]
 8002212:	466d      	mov	r5, sp
 8002214:	f106 0410 	add.w	r4, r6, #16
 8002218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002224:	e885 0003 	stmia.w	r5, {r0, r1}
 8002228:	1d33      	adds	r3, r6, #4
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f004 f8f5 	bl	800641c <USB_CoreInit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d7      	b.n	80023f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f004 f965 	bl	800651a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e04a      	b.n	80022ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	333d      	adds	r3, #61	; 0x3d
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	; 0x3c
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	b298      	uxth	r0, r3
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	3344      	adds	r3, #68	; 0x44
 8002292:	4602      	mov	r2, r0
 8002294:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3340      	adds	r3, #64	; 0x40
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3348      	adds	r3, #72	; 0x48
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	334c      	adds	r3, #76	; 0x4c
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3354      	adds	r3, #84	; 0x54
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3af      	bcc.n	8002256 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e044      	b.n	8002386 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3301      	adds	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d3b5      	bcc.n	80022fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	687e      	ldr	r6, [r7, #4]
 8002398:	466d      	mov	r5, sp
 800239a:	f106 0410 	add.w	r4, r6, #16
 800239e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ae:	1d33      	adds	r3, r6, #4
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f004 f8fe 	bl	80065b4 <USB_DevInit>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e014      	b.n	80023f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f80a 	bl	80023fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 fabc 	bl	800696a <USB_DevDisconnect>

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_PCDEx_ActivateLPM+0x44>)
 800242c:	4313      	orrs	r3, r2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	10000003 	.word	0x10000003

08002444 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	2b06      	cmp	r3, #6
 8002456:	d00a      	beq.n	800246e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e040      	b.n	80024ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e03e      	b.n	80024ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002476:	491f      	ldr	r1, [pc, #124]	; (80024f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4313      	orrs	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800247e:	f7fe ff67 	bl	8001350 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002484:	e009      	b.n	800249a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002486:	f7fe ff63 	bl	8001350 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002494:	d901      	bls.n	800249a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e028      	b.n	80024ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a6:	d1ee      	bne.n	8002486 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b1e      	cmp	r3, #30
 80024ac:	d008      	beq.n	80024c0 <HAL_PWREx_ConfigSupply+0x7c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b2e      	cmp	r3, #46	; 0x2e
 80024b2:	d005      	beq.n	80024c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b1d      	cmp	r3, #29
 80024b8:	d002      	beq.n	80024c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b2d      	cmp	r3, #45	; 0x2d
 80024be:	d114      	bne.n	80024ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024c0:	f7fe ff46 	bl	8001350 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024c6:	e009      	b.n	80024dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024c8:	f7fe ff42 	bl	8001350 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d6:	d901      	bls.n	80024dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d1ee      	bne.n	80024c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	58024800 	.word	0x58024800

080024f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	58024800 	.word	0x58024800

08002518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f000 bc1d 	b.w	8002d66 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8087 	beq.w	8002648 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	4b99      	ldr	r3, [pc, #612]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002544:	4b96      	ldr	r3, [pc, #600]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	2b10      	cmp	r3, #16
 800254e:	d007      	beq.n	8002560 <HAL_RCC_OscConfig+0x48>
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	2b18      	cmp	r3, #24
 8002554:	d110      	bne.n	8002578 <HAL_RCC_OscConfig+0x60>
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d10b      	bne.n	8002578 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b8f      	ldr	r3, [pc, #572]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d06c      	beq.n	8002646 <HAL_RCC_OscConfig+0x12e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d168      	bne.n	8002646 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e3f6      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x78>
 8002582:	4b87      	ldr	r3, [pc, #540]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a86      	ldr	r2, [pc, #536]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e02e      	b.n	80025ee <HAL_RCC_OscConfig+0xd6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10c      	bne.n	80025b2 <HAL_RCC_OscConfig+0x9a>
 8002598:	4b81      	ldr	r3, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a80      	ldr	r2, [pc, #512]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a7d      	ldr	r2, [pc, #500]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e01d      	b.n	80025ee <HAL_RCC_OscConfig+0xd6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0xbe>
 80025bc:	4b78      	ldr	r3, [pc, #480]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a77      	ldr	r2, [pc, #476]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b75      	ldr	r3, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a74      	ldr	r2, [pc, #464]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0xd6>
 80025d6:	4b72      	ldr	r3, [pc, #456]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a71      	ldr	r2, [pc, #452]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6f      	ldr	r3, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6e      	ldr	r2, [pc, #440]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d013      	beq.n	800261e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe feab 	bl	8001350 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fe:	f7fe fea7 	bl	8001350 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e3aa      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002610:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0xe6>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fe97 	bl	8001350 <HAL_GetTick>
 8002622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002626:	f7fe fe93 	bl	8001350 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e396      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002638:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x10e>
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002646:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80cb 	beq.w	80027ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002656:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800265e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002660:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_RCC_OscConfig+0x164>
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2b18      	cmp	r3, #24
 8002670:	d156      	bne.n	8002720 <HAL_RCC_OscConfig+0x208>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d151      	bne.n	8002720 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	4b48      	ldr	r3, [pc, #288]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x17c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e368      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002694:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0219 	bic.w	r2, r3, #25
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	493f      	ldr	r1, [pc, #252]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a6:	f7fe fe53 	bl	8001350 <HAL_GetTick>
 80026aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ae:	f7fe fe4f 	bl	8001350 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e352      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c0:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	f7fe fe70 	bl	80013b0 <HAL_GetREVID>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d817      	bhi.n	800270a <HAL_RCC_OscConfig+0x1f2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d108      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1dc>
 80026e2:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026ea:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f2:	e07b      	b.n	80027ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	4927      	ldr	r1, [pc, #156]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	e070      	b.n	80027ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	4921      	ldr	r1, [pc, #132]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271e:	e065      	b.n	80027ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d048      	beq.n	80027ba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 0219 	bic.w	r2, r3, #25
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	491a      	ldr	r1, [pc, #104]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fe09 	bl	8001350 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fe05 	bl	8001350 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e308      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	f7fe fe26 	bl	80013b0 <HAL_GetREVID>
 8002764:	4603      	mov	r3, r0
 8002766:	f241 0203 	movw	r2, #4099	; 0x1003
 800276a:	4293      	cmp	r3, r2
 800276c:	d81a      	bhi.n	80027a4 <HAL_RCC_OscConfig+0x28c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d108      	bne.n	8002788 <HAL_RCC_OscConfig+0x270>
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	6053      	str	r3, [r2, #4]
 8002786:	e031      	b.n	80027ec <HAL_RCC_OscConfig+0x2d4>
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	031b      	lsls	r3, r3, #12
 8002796:	4902      	ldr	r1, [pc, #8]	; (80027a0 <HAL_RCC_OscConfig+0x288>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
 800279c:	e026      	b.n	80027ec <HAL_RCC_OscConfig+0x2d4>
 800279e:	bf00      	nop
 80027a0:	58024400 	.word	0x58024400
 80027a4:	4b9a      	ldr	r3, [pc, #616]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4997      	ldr	r1, [pc, #604]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	e018      	b.n	80027ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b95      	ldr	r3, [pc, #596]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a94      	ldr	r2, [pc, #592]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fdc3 	bl	8001350 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fdbf 	bl	8001350 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e2c2      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e0:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a9 	beq.w	800294c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002802:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002804:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x308>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b18      	cmp	r3, #24
 8002814:	d13a      	bne.n	800288c <HAL_RCC_OscConfig+0x374>
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d135      	bne.n	800288c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002820:	4b7b      	ldr	r3, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x320>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e296      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002838:	f7fe fdba 	bl	80013b0 <HAL_GetREVID>
 800283c:	4603      	mov	r3, r0
 800283e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002842:	4293      	cmp	r3, r2
 8002844:	d817      	bhi.n	8002876 <HAL_RCC_OscConfig+0x35e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	2b20      	cmp	r3, #32
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x348>
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002856:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800285c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800285e:	e075      	b.n	800294c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	069b      	lsls	r3, r3, #26
 800286e:	4968      	ldr	r1, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002874:	e06a      	b.n	800294c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002876:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	4962      	ldr	r1, [pc, #392]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800288a:	e05f      	b.n	800294c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d042      	beq.n	800291a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002894:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fd56 	bl	8001350 <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028a8:	f7fe fd52 	bl	8001350 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e255      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ba:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c6:	f7fe fd73 	bl	80013b0 <HAL_GetREVID>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d817      	bhi.n	8002904 <HAL_RCC_OscConfig+0x3ec>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d108      	bne.n	80028ee <HAL_RCC_OscConfig+0x3d6>
 80028dc:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028e4:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ea:	6053      	str	r3, [r2, #4]
 80028ec:	e02e      	b.n	800294c <HAL_RCC_OscConfig+0x434>
 80028ee:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	069b      	lsls	r3, r3, #26
 80028fc:	4944      	ldr	r1, [pc, #272]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
 8002902:	e023      	b.n	800294c <HAL_RCC_OscConfig+0x434>
 8002904:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	493f      	ldr	r1, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	60cb      	str	r3, [r1, #12]
 8002918:	e018      	b.n	800294c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3c      	ldr	r2, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002926:	f7fe fd13 	bl	8001350 <HAL_GetTick>
 800292a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800292e:	f7fe fd0f 	bl	8001350 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e212      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d036      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d019      	beq.n	8002994 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fcf0 	bl	8001350 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fcec 	bl	8001350 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1ef      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x45c>
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe fcd6 	bl	8001350 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fcd2 	bl	8001350 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1d5      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d039      	beq.n	8002a46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fcb3 	bl	8001350 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029ee:	f7fe fcaf 	bl	8001350 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1b2      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x4d6>
 8002a0c:	e01b      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
 8002a0e:	bf00      	nop
 8002a10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a14:	4b9b      	ldr	r3, [pc, #620]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a9a      	ldr	r2, [pc, #616]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a20:	f7fe fc96 	bl	8001350 <HAL_GetTick>
 8002a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a28:	f7fe fc92 	bl	8001350 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e195      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a3a:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8081 	beq.w	8002b56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a54:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <HAL_RCC_OscConfig+0x770>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a8b      	ldr	r2, [pc, #556]	; (8002c88 <HAL_RCC_OscConfig+0x770>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fc76 	bl	8001350 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe fc72 	bl	8001350 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e175      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7a:	4b83      	ldr	r3, [pc, #524]	; (8002c88 <HAL_RCC_OscConfig+0x770>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x584>
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a7c      	ldr	r2, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	e02d      	b.n	8002af8 <HAL_RCC_OscConfig+0x5e0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x5a6>
 8002aa4:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a76      	ldr	r2, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	4b74      	ldr	r3, [pc, #464]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a73      	ldr	r2, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0x5e0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c8>
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0x5e0>
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a64      	ldr	r2, [pc, #400]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fc26 	bl	8001350 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fc22 	bl	8001350 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e123      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1e:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ee      	beq.n	8002b08 <HAL_RCC_OscConfig+0x5f0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fc10 	bl	8001350 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe fc0c 	bl	8001350 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e10d      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8102 	beq.w	8002d64 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b60:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b68:	2b18      	cmp	r3, #24
 8002b6a:	f000 80bd 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 809e 	bne.w	8002cb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a41      	ldr	r2, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fbe4 	bl	8001350 <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe fbe0 	bl	8001350 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0e3      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_OscConfig+0x774>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	4931      	ldr	r1, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	628b      	str	r3, [r1, #40]	; 0x28
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	025b      	lsls	r3, r3, #9
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	3b01      	subs	r3, #1
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	3b01      	subs	r3, #1
 8002bee:	061b      	lsls	r3, r3, #24
 8002bf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bf4:	4923      	ldr	r1, [pc, #140]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c06:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_OscConfig+0x778>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c12:	00d2      	lsls	r2, r2, #3
 8002c14:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f023 020c 	bic.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4917      	ldr	r1, [pc, #92]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f023 0202 	bic.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	4912      	ldr	r1, [pc, #72]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fb69 	bl	8001350 <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c80:	e011      	b.n	8002ca6 <HAL_RCC_OscConfig+0x78e>
 8002c82:	bf00      	nop
 8002c84:	58024400 	.word	0x58024400
 8002c88:	58024800 	.word	0x58024800
 8002c8c:	fffffc0c 	.word	0xfffffc0c
 8002c90:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fb5c 	bl	8001350 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e05f      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCC_OscConfig+0x858>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x77c>
 8002cb2:	e057      	b.n	8002d64 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_RCC_OscConfig+0x858>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2d      	ldr	r2, [pc, #180]	; (8002d70 <HAL_RCC_OscConfig+0x858>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fb46 	bl	8001350 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fb42 	bl	8001350 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e045      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cda:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_OscConfig+0x858>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x7b0>
 8002ce6:	e03d      	b.n	8002d64 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_RCC_OscConfig+0x858>)
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_OscConfig+0x858>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d031      	beq.n	8002d60 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d12a      	bne.n	8002d60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d122      	bne.n	8002d60 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d11a      	bne.n	8002d60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0a5b      	lsrs	r3, r3, #9
 8002d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d111      	bne.n	8002d60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	0e1b      	lsrs	r3, r3, #24
 8002d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3730      	adds	r7, #48	; 0x30
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	58024400 	.word	0x58024400

08002d74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e19c      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b8a      	ldr	r3, [pc, #552]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b87      	ldr	r3, [pc, #540]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 020f 	bic.w	r2, r3, #15
 8002d9e:	4985      	ldr	r1, [pc, #532]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b83      	ldr	r3, [pc, #524]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e184      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d908      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dd4:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4975      	ldr	r1, [pc, #468]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e02:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	496a      	ldr	r1, [pc, #424]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d908      	bls.n	8002e42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	495e      	ldr	r1, [pc, #376]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d908      	bls.n	8002e70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e5e:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4953      	ldr	r1, [pc, #332]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d908      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f023 020f 	bic.w	r2, r3, #15
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4947      	ldr	r1, [pc, #284]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d055      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4940      	ldr	r1, [pc, #256]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d121      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0f6      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0ea      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0de      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f04:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0d6      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe fa13 	bl	8001350 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2e:	f7fe fa0f 	bl	8001350 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0be      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d1eb      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d208      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d214      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e086      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
 8002fb4:	52002000 	.word	0x52002000
 8002fb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d208      	bcs.n	8002fea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d010      	beq.n	8003018 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003002:	429a      	cmp	r2, r3
 8003004:	d208      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	492e      	ldr	r1, [pc, #184]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003030:	429a      	cmp	r2, r3
 8003032:	d208      	bcs.n	8003046 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003042:	4313      	orrs	r3, r2
 8003044:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305e:	429a      	cmp	r2, r3
 8003060:	d208      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4917      	ldr	r1, [pc, #92]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003070:	4313      	orrs	r3, r2
 8003072:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003074:	f000 f834 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	4912      	ldr	r1, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x35c>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_RCC_ClockConfig+0x35c>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x360>)
 80030aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x364>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x368>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd ffaa 	bl	8001010 <HAL_InitTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	58024400 	.word	0x58024400
 80030d0:	0800a964 	.word	0x0800a964
 80030d4:	24000004 	.word	0x24000004
 80030d8:	24000000 	.word	0x24000000
 80030dc:	24000008 	.word	0x24000008

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e6:	4bb3      	ldr	r3, [pc, #716]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ee:	2b18      	cmp	r3, #24
 80030f0:	f200 8155 	bhi.w	800339e <HAL_RCC_GetSysClockFreq+0x2be>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	08003161 	.word	0x08003161
 8003100:	0800339f 	.word	0x0800339f
 8003104:	0800339f 	.word	0x0800339f
 8003108:	0800339f 	.word	0x0800339f
 800310c:	0800339f 	.word	0x0800339f
 8003110:	0800339f 	.word	0x0800339f
 8003114:	0800339f 	.word	0x0800339f
 8003118:	0800339f 	.word	0x0800339f
 800311c:	08003187 	.word	0x08003187
 8003120:	0800339f 	.word	0x0800339f
 8003124:	0800339f 	.word	0x0800339f
 8003128:	0800339f 	.word	0x0800339f
 800312c:	0800339f 	.word	0x0800339f
 8003130:	0800339f 	.word	0x0800339f
 8003134:	0800339f 	.word	0x0800339f
 8003138:	0800339f 	.word	0x0800339f
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800339f 	.word	0x0800339f
 8003144:	0800339f 	.word	0x0800339f
 8003148:	0800339f 	.word	0x0800339f
 800314c:	0800339f 	.word	0x0800339f
 8003150:	0800339f 	.word	0x0800339f
 8003154:	0800339f 	.word	0x0800339f
 8003158:	0800339f 	.word	0x0800339f
 800315c:	08003193 	.word	0x08003193
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003160:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800316c:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800317e:	e111      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003180:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003182:	61bb      	str	r3, [r7, #24]
    break;
 8003184:	e10e      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003188:	61bb      	str	r3, [r7, #24]
    break;
 800318a:	e10b      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800318c:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800318e:	61bb      	str	r3, [r7, #24]
    break;
 8003190:	e108      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800319c:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031a8:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031b2:	4b80      	ldr	r3, [pc, #512]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80e1 	beq.w	8003398 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	f000 8083 	beq.w	80032e4 <HAL_RCC_GetSysClockFreq+0x204>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	f200 80a1 	bhi.w	8003328 <HAL_RCC_GetSysClockFreq+0x248>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x114>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d056      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031f2:	e099      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02d      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	4a6b      	ldr	r2, [pc, #428]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800325a:	e087      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003282:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800329e:	e065      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032e2:	e043      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003326:	e021      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800336a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	0a5b      	lsrs	r3, r3, #9
 8003372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003376:	3301      	adds	r3, #1
 8003378:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	ee07 3a90 	vmov	s15, r3
 8003380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003384:	edd7 6a07 	vldr	s13, [r7, #28]
 8003388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800338c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003390:	ee17 3a90 	vmov	r3, s15
 8003394:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003396:	e005      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
    break;
 800339c:	e002      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033a0:	61bb      	str	r3, [r7, #24]
    break;
 80033a2:	bf00      	nop
  }

  return sysclockfreq;
 80033a4:	69bb      	ldr	r3, [r7, #24]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	58024400 	.word	0x58024400
 80033b8:	03d09000 	.word	0x03d09000
 80033bc:	003d0900 	.word	0x003d0900
 80033c0:	007a1200 	.word	0x007a1200
 80033c4:	46000000 	.word	0x46000000
 80033c8:	4c742400 	.word	0x4c742400
 80033cc:	4a742400 	.word	0x4a742400
 80033d0:	4af42400 	.word	0x4af42400

080033d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033da:	f7ff fe81 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_GetHCLKFreq+0x50>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490f      	ldr	r1, [pc, #60]	; (8003428 <HAL_RCC_GetHCLKFreq+0x54>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_GetHCLKFreq+0x50>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_GetHCLKFreq+0x54>)
 8003402:	5cd3      	ldrb	r3, [r2, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a07      	ldr	r2, [pc, #28]	; (800342c <HAL_RCC_GetHCLKFreq+0x58>)
 8003410:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003412:	4a07      	ldr	r2, [pc, #28]	; (8003430 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_GetHCLKFreq+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	58024400 	.word	0x58024400
 8003428:	0800a964 	.word	0x0800a964
 800342c:	24000004 	.word	0x24000004
 8003430:	24000000 	.word	0x24000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003438:	f7ff ffcc 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCC_GetPCLK1Freq+0x28>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	0800a964 	.word	0x0800a964

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003464:	f7ff ffb6 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	58024400 	.word	0x58024400
 8003488:	0800a964 	.word	0x0800a964

0800348c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0207 	and.w	r2, r3, #7
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_RCC_GetClockConfig+0x7c>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_GetClockConfig+0x80>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	58024400 	.word	0x58024400
 800350c:	52002000 	.word	0x52002000

08003510 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003518:	2300      	movs	r3, #0
 800351a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800351c:	2300      	movs	r3, #0
 800351e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003534:	d02a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800353a:	d824      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800353c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003540:	d018      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003546:	d81e      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800354c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003550:	d007      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003552:	e018      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003554:	4ba3      	ldr	r3, [pc, #652]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4aa2      	ldr	r2, [pc, #648]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003560:	e015      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	2102      	movs	r1, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f9d5 	bl	8004918 <RCCEx_PLL2_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003572:	e00c      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3324      	adds	r3, #36	; 0x24
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fa7e 	bl	8004a7c <RCCEx_PLL3_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
      break;
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800358c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003594:	4b93      	ldr	r3, [pc, #588]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a0:	4990      	ldr	r1, [pc, #576]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	650b      	str	r3, [r1, #80]	; 0x50
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d826      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035dd 	.word	0x080035dd
 80035cc:	080035eb 	.word	0x080035eb
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003615 	.word	0x08003615
 80035d8:	08003615 	.word	0x08003615
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	4a80      	ldr	r2, [pc, #512]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e8:	e015      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 f991 	bl	8004918 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fa3a 	bl	8004a7c <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
      break;
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800361c:	4b71      	ldr	r3, [pc, #452]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	f023 0207 	bic.w	r2, r3, #7
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	496e      	ldr	r1, [pc, #440]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	650b      	str	r3, [r1, #80]	; 0x50
 800362e:	e001      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363c:	2b00      	cmp	r3, #0
 800363e:	d042      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003648:	d02b      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	d825      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003650:	2bc0      	cmp	r3, #192	; 0xc0
 8003652:	d028      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003654:	2bc0      	cmp	r3, #192	; 0xc0
 8003656:	d821      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d016      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d81d      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d007      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003668:	e018      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366a:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4a5d      	ldr	r2, [pc, #372]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003676:	e017      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 f94a 	bl	8004918 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003688:	e00e      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f9f3 	bl	8004a7c <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800369a:	e005      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
      break;
 80036a0:	e002      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80036a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036ae:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	494a      	ldr	r1, [pc, #296]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	650b      	str	r3, [r1, #80]	; 0x50
 80036c0:	e001      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d049      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036dc:	d030      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e2:	d82a      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036e8:	d02c      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ee:	d824      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f4:	d018      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036fa:	d81e      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003704:	d007      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003706:	e018      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a35      	ldr	r2, [pc, #212]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003714:	e017      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f8fb 	bl	8004918 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003726:	e00e      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f001 f9a4 	bl	8004a7c <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003738:	e005      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800375a:	4922      	ldr	r1, [pc, #136]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	658b      	str	r3, [r1, #88]	; 0x58
 8003760:	e001      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04b      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800377c:	d030      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800377e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003782:	d82a      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003784:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003788:	d02e      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800378a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800378e:	d824      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003794:	d018      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379a:	d81e      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a4:	d007      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80037a6:	e018      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b4:	e019      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 f8ab 	bl	8004918 <RCCEx_PLL2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037c6:	e010      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3324      	adds	r3, #36	; 0x24
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 f954 	bl	8004a7c <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d8:	e007      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
      break;
 80037de:	e004      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037e0:	bf00      	nop
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037e4:	58024400 	.word	0x58024400
      break;
 80037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037f0:	4b99      	ldr	r3, [pc, #612]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037fe:	4996      	ldr	r1, [pc, #600]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003800:	4313      	orrs	r3, r2
 8003802:	658b      	str	r3, [r1, #88]	; 0x58
 8003804:	e001      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d032      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	2b30      	cmp	r3, #48	; 0x30
 800381c:	d01c      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800381e:	2b30      	cmp	r3, #48	; 0x30
 8003820:	d817      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003822:	2b20      	cmp	r3, #32
 8003824:	d00c      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003826:	2b20      	cmp	r3, #32
 8003828:	d813      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800382e:	2b10      	cmp	r3, #16
 8003830:	d10f      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4a88      	ldr	r2, [pc, #544]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800383e:	e00e      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f001 f866 	bl	8004918 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003850:	e005      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
      break;
 8003856:	e002      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800385c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003864:	4b7c      	ldr	r3, [pc, #496]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	4979      	ldr	r1, [pc, #484]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003872:	4313      	orrs	r3, r2
 8003874:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003876:	e001      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d047      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003890:	d030      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003896:	d82a      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003898:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389c:	d02c      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800389e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038a2:	d824      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a8:	d018      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	d81e      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d007      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80038ba:	e018      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c8:	e017      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 f821 	bl	8004918 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038da:	e00e      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3324      	adds	r3, #36	; 0x24
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f8ca 	bl	8004a7c <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
      break;
 80038f2:	e002      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003900:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	4952      	ldr	r1, [pc, #328]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800390e:	4313      	orrs	r3, r2
 8003910:	650b      	str	r3, [r1, #80]	; 0x50
 8003912:	e001      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d049      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d02e      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800392e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003932:	d828      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003938:	d02a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800393a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800393e:	d822      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003940:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003944:	d026      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003946:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800394a:	d81c      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800394c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003950:	d010      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003956:	d816      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01d      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d111      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 ffd5 	bl	8004918 <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003972:	e012      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3324      	adds	r3, #36	; 0x24
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f001 f87e 	bl	8004a7c <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003984:	e009      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	e006      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800398c:	bf00      	nop
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003990:	bf00      	nop
 8003992:	e002      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ac:	492a      	ldr	r1, [pc, #168]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	650b      	str	r3, [r1, #80]	; 0x50
 80039b2:	e001      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d04d      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ce:	d02e      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80039d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d4:	d828      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d02a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d822      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e6:	d026      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ec:	d81c      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f2:	d010      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f8:	d816      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01d      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a02:	d111      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 ff84 	bl	8004918 <RCCEx_PLL2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a14:	e012      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3324      	adds	r3, #36	; 0x24
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 f82d 	bl	8004a7c <RCCEx_PLL3_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a26:	e009      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2c:	e006      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a50:	4901      	ldr	r1, [pc, #4]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	658b      	str	r3, [r1, #88]	; 0x58
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a74:	d00e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7a:	d814      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a84:	d10f      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a86:	4baf      	ldr	r3, [pc, #700]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	4aae      	ldr	r2, [pc, #696]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a92:	e00c      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff3c 	bl	8004918 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab4:	4ba3      	ldr	r3, [pc, #652]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac0:	49a0      	ldr	r1, [pc, #640]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d032      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d81b      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b1f 	.word	0x08003b1f
 8003aec:	08003af9 	.word	0x08003af9
 8003af0:	08003b07 	.word	0x08003b07
 8003af4:	08003b1f 	.word	0x08003b1f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4a91      	ldr	r2, [pc, #580]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b04:	e00c      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 ff03 	bl	8004918 <RCCEx_PLL2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b26:	4b87      	ldr	r3, [pc, #540]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4984      	ldr	r1, [pc, #528]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b38:	e001      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8086 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4c:	4b7e      	ldr	r3, [pc, #504]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7d      	ldr	r2, [pc, #500]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b58:	f7fd fbfa 	bl	8001350 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5e:	e009      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fd fbf6 	bl	8001350 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d902      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	75fb      	strb	r3, [r7, #23]
        break;
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b74:	4b74      	ldr	r3, [pc, #464]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ef      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d166      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b86:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b90:	4053      	eors	r3, r2
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d013      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba4:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a66      	ldr	r2, [pc, #408]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb0:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a63      	ldr	r2, [pc, #396]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bbc:	4a61      	ldr	r2, [pc, #388]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bcc:	d115      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd fbbf 	bl	8001350 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd4:	e00b      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd fbbb 	bl	8001350 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d902      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	75fb      	strb	r3, [r7, #23]
            break;
 8003bec:	e005      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bee:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ed      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d126      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c10:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1e:	0919      	lsrs	r1, r3, #4
 8003c20:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003c22:	400b      	ands	r3, r1
 8003c24:	4947      	ldr	r1, [pc, #284]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	610b      	str	r3, [r1, #16]
 8003c2a:	e005      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c2c:	4b45      	ldr	r3, [pc, #276]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	4a44      	ldr	r2, [pc, #272]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c36:	6113      	str	r3, [r2, #16]
 8003c38:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	493f      	ldr	r1, [pc, #252]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	670b      	str	r3, [r1, #112]	; 0x70
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	75bb      	strb	r3, [r7, #22]
 8003c52:	e001      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8085 	beq.w	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c6a:	2b28      	cmp	r3, #40	; 0x28
 8003c6c:	d866      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003d51 	.word	0x08003d51
 8003c78:	08003d3d 	.word	0x08003d3d
 8003c7c:	08003d3d 	.word	0x08003d3d
 8003c80:	08003d3d 	.word	0x08003d3d
 8003c84:	08003d3d 	.word	0x08003d3d
 8003c88:	08003d3d 	.word	0x08003d3d
 8003c8c:	08003d3d 	.word	0x08003d3d
 8003c90:	08003d3d 	.word	0x08003d3d
 8003c94:	08003d19 	.word	0x08003d19
 8003c98:	08003d3d 	.word	0x08003d3d
 8003c9c:	08003d3d 	.word	0x08003d3d
 8003ca0:	08003d3d 	.word	0x08003d3d
 8003ca4:	08003d3d 	.word	0x08003d3d
 8003ca8:	08003d3d 	.word	0x08003d3d
 8003cac:	08003d3d 	.word	0x08003d3d
 8003cb0:	08003d3d 	.word	0x08003d3d
 8003cb4:	08003d2b 	.word	0x08003d2b
 8003cb8:	08003d3d 	.word	0x08003d3d
 8003cbc:	08003d3d 	.word	0x08003d3d
 8003cc0:	08003d3d 	.word	0x08003d3d
 8003cc4:	08003d3d 	.word	0x08003d3d
 8003cc8:	08003d3d 	.word	0x08003d3d
 8003ccc:	08003d3d 	.word	0x08003d3d
 8003cd0:	08003d3d 	.word	0x08003d3d
 8003cd4:	08003d51 	.word	0x08003d51
 8003cd8:	08003d3d 	.word	0x08003d3d
 8003cdc:	08003d3d 	.word	0x08003d3d
 8003ce0:	08003d3d 	.word	0x08003d3d
 8003ce4:	08003d3d 	.word	0x08003d3d
 8003ce8:	08003d3d 	.word	0x08003d3d
 8003cec:	08003d3d 	.word	0x08003d3d
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d51 	.word	0x08003d51
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d3d 	.word	0x08003d3d
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d51 	.word	0x08003d51
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fdfa 	bl	8004918 <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d28:	e013      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3324      	adds	r3, #36	; 0x24
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fea3 	bl	8004a7c <RCCEx_PLL3_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e007      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
 8003d48:	58024800 	.word	0x58024800
 8003d4c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d58:	4b96      	ldr	r3, [pc, #600]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d64:	4993      	ldr	r1, [pc, #588]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	654b      	str	r3, [r1, #84]	; 0x54
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d038      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d821      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dcf 	.word	0x08003dcf
 8003d90:	08003da5 	.word	0x08003da5
 8003d94:	08003db7 	.word	0x08003db7
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fdb4 	bl	8004918 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fe5d 	bl	8004a7c <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4974      	ldr	r1, [pc, #464]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	654b      	str	r3, [r1, #84]	; 0x54
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d821      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e4f 	.word	0x08003e4f
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e37 	.word	0x08003e37
 8003e18:	08003e4f 	.word	0x08003e4f
 8003e1c:	08003e4f 	.word	0x08003e4f
 8003e20:	08003e4f 	.word	0x08003e4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fd74 	bl	8004918 <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fe1d 	bl	8004a7c <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e56:	4b57      	ldr	r3, [pc, #348]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f023 0207 	bic.w	r2, r3, #7
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4953      	ldr	r1, [pc, #332]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d04b      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e86:	d02e      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e8c:	d828      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d02a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d822      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e9e:	d026      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003ea0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ea4:	d81c      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eaa:	d010      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb0:	d816      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eba:	d111      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fd28 	bl	8004918 <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ecc:	e012      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fdd1 	bl	8004a7c <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f08:	492a      	ldr	r1, [pc, #168]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	654b      	str	r3, [r1, #84]	; 0x54
 8003f0e:	e001      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04d      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f2a:	d02e      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f30:	d828      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d02a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d822      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f42:	d026      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f48:	d81c      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d816      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01d      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d111      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fcd6 	bl	8004918 <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f70:	e012      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fd7f 	bl	8004a7c <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f82:	e009      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fac:	4901      	ldr	r1, [pc, #4]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04b      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fd2:	d02e      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fd8:	d828      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fde:	d02a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe4:	d822      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fe6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fea:	d026      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff0:	d81c      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff6:	d010      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ffc:	d816      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004006:	d111      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fc82 	bl	8004918 <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004018:	e012      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3324      	adds	r3, #36	; 0x24
 800401e:	2102      	movs	r1, #2
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fd2b 	bl	8004a7c <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800402a:	e009      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	e006      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004032:	bf00      	nop
 8004034:	e004      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004036:	bf00      	nop
 8004038:	e002      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800403a:	bf00      	nop
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800403e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004046:	4b9d      	ldr	r3, [pc, #628]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004054:	4999      	ldr	r1, [pc, #612]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004056:	4313      	orrs	r3, r2
 8004058:	658b      	str	r3, [r1, #88]	; 0x58
 800405a:	e001      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d10a      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3324      	adds	r3, #36	; 0x24
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fcfc 	bl	8004a7c <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800408e:	4b8b      	ldr	r3, [pc, #556]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409c:	4987      	ldr	r1, [pc, #540]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b8:	d10a      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3324      	adds	r3, #36	; 0x24
 80040be:	2102      	movs	r1, #2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fcdb 	bl	8004a7c <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d0:	4b7a      	ldr	r3, [pc, #488]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	4977      	ldr	r1, [pc, #476]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d034      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040fa:	d01d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004100:	d817      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d009      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800410c:	e011      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fbff 	bl	8004918 <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800411e:	e00c      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3324      	adds	r3, #36	; 0x24
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fca8 	bl	8004a7c <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
      break;
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004140:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800414e:	495b      	ldr	r1, [pc, #364]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004150:	4313      	orrs	r3, r2
 8004152:	658b      	str	r3, [r1, #88]	; 0x58
 8004154:	e001      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d033      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004170:	d01c      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004172:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004176:	d816      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800417c:	d003      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004182:	d007      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	4a4c      	ldr	r2, [pc, #304]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800418c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004192:	e00c      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3324      	adds	r3, #36	; 0x24
 8004198:	2101      	movs	r1, #1
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc6e 	bl	8004a7c <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
      break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80041ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b4:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c2:	493e      	ldr	r1, [pc, #248]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	654b      	str	r3, [r1, #84]	; 0x54
 80041c8:	e001      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d029      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e6:	d007      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041e8:	e00f      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a33      	ldr	r2, [pc, #204]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041f6:	e00b      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fb8a 	bl	8004918 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
      break;
 800420e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	4926      	ldr	r1, [pc, #152]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004224:	4313      	orrs	r3, r2
 8004226:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2102      	movs	r1, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fc1b 	bl	8004a7c <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d033      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004264:	d017      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426a:	d811      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d013      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004276:	d80b      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800427c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004280:	d106      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800428e:	e007      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	75fb      	strb	r3, [r7, #23]
      break;
 8004294:	e004      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b2:	4902      	ldr	r1, [pc, #8]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	654b      	str	r3, [r1, #84]	; 0x54
 80042b8:	e004      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80042ba:	bf00      	nop
 80042bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	492e      	ldr	r1, [pc, #184]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042fc:	4926      	ldr	r1, [pc, #152]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431a:	491f      	ldr	r1, [pc, #124]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800431c:	4313      	orrs	r3, r2
 800431e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004336:	6113      	str	r3, [r2, #16]
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004342:	4915      	ldr	r1, [pc, #84]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004344:	4313      	orrs	r3, r2
 8004346:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da08      	bge.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	490e      	ldr	r1, [pc, #56]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800435e:	4313      	orrs	r3, r2
 8004360:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	4906      	ldr	r1, [pc, #24]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800437e:	4313      	orrs	r3, r2
 8004380:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004382:	7dbb      	ldrb	r3, [r7, #22]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400

0800439c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80043a0:	f7ff f818 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	58024400 	.word	0x58024400
 80043c4:	0800a964 	.word	0x0800a964

080043c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043d0:	4ba1      	ldr	r3, [pc, #644]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80043da:	4b9f      	ldr	r3, [pc, #636]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	0b1b      	lsrs	r3, r3, #12
 80043e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043e6:	4b9c      	ldr	r3, [pc, #624]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043f2:	4b99      	ldr	r3, [pc, #612]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	08db      	lsrs	r3, r3, #3
 80043f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8111 	beq.w	8004638 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b02      	cmp	r3, #2
 800441a:	f000 8083 	beq.w	8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b02      	cmp	r3, #2
 8004422:	f200 80a1 	bhi.w	8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d056      	beq.n	80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004432:	e099      	b.n	8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004434:	4b88      	ldr	r3, [pc, #544]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02d      	beq.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004440:	4b85      	ldr	r3, [pc, #532]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	08db      	lsrs	r3, r3, #3
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	4a84      	ldr	r2, [pc, #528]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446a:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447a:	ed97 6a03 	vldr	s12, [r7, #12]
 800447e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800449a:	e087      	b.n	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80044aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ae:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	ed97 6a03 	vldr	s12, [r7, #12]
 80044c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044de:	e065      	b.n	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f2:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004502:	ed97 6a03 	vldr	s12, [r7, #12]
 8004506:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800450a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004522:	e043      	b.n	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004536:	4b48      	ldr	r3, [pc, #288]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004546:	ed97 6a03 	vldr	s12, [r7, #12]
 800454a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800454e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004566:	e021      	b.n	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b37      	ldr	r3, [pc, #220]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458a:	ed97 6a03 	vldr	s12, [r7, #12]
 800458e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80045ac:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	0a5b      	lsrs	r3, r3, #9
 80045b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d2:	ee17 2a90 	vmov	r2, s15
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80045da:	4b1f      	ldr	r3, [pc, #124]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004600:	ee17 2a90 	vmov	r2, s15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	0e1b      	lsrs	r3, r3, #24
 800460e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800461e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004622:	edd7 6a07 	vldr	s13, [r7, #28]
 8004626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800462a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462e:	ee17 2a90 	vmov	r2, s15
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004636:	e008      	b.n	800464a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
}
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400
 800465c:	03d09000 	.word	0x03d09000
 8004660:	46000000 	.word	0x46000000
 8004664:	4c742400 	.word	0x4c742400
 8004668:	4a742400 	.word	0x4a742400
 800466c:	4af42400 	.word	0x4af42400

08004670 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004678:	4ba1      	ldr	r3, [pc, #644]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004682:	4b9f      	ldr	r3, [pc, #636]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	0d1b      	lsrs	r3, r3, #20
 8004688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800468c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800468e:	4b9c      	ldr	r3, [pc, #624]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800469a:	4b99      	ldr	r3, [pc, #612]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	08db      	lsrs	r3, r3, #3
 80046a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8111 	beq.w	80048e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f000 8083 	beq.w	80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f200 80a1 	bhi.w	8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d056      	beq.n	8004788 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046da:	e099      	b.n	8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046dc:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02d      	beq.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046e8:	4b85      	ldr	r3, [pc, #532]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	4a84      	ldr	r2, [pc, #528]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
 80046f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b7b      	ldr	r3, [pc, #492]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a03 	vldr	s12, [r7, #12]
 8004726:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004742:	e087      	b.n	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800490c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004766:	ed97 6a03 	vldr	s12, [r7, #12]
 800476a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004786:	e065      	b.n	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479a:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ca:	e043      	b.n	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047de:	4b48      	ldr	r3, [pc, #288]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800480e:	e021      	b.n	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800481e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004822:	4b37      	ldr	r3, [pc, #220]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004832:	ed97 6a03 	vldr	s12, [r7, #12]
 8004836:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800483a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004852:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004854:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	0a5b      	lsrs	r3, r3, #9
 800485a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800486a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487a:	ee17 2a90 	vmov	r2, s15
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800489c:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a8:	ee17 2a90 	vmov	r2, s15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d6:	ee17 2a90 	vmov	r2, s15
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048de:	e008      	b.n	80048f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
}
 80048f2:	bf00      	nop
 80048f4:	3724      	adds	r7, #36	; 0x24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
 8004904:	03d09000 	.word	0x03d09000
 8004908:	46000000 	.word	0x46000000
 800490c:	4c742400 	.word	0x4c742400
 8004910:	4a742400 	.word	0x4a742400
 8004914:	4af42400 	.word	0x4af42400

08004918 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004926:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d101      	bne.n	8004936 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e099      	b.n	8004a6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004936:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4e      	ldr	r2, [pc, #312]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 800493c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004942:	f7fc fd05 	bl	8001350 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004948:	e008      	b.n	800495c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800494a:	f7fc fd01 	bl	8001350 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e086      	b.n	8004a6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800495c:	4b45      	ldr	r3, [pc, #276]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004968:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	031b      	lsls	r3, r3, #12
 8004976:	493f      	ldr	r1, [pc, #252]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	628b      	str	r3, [r1, #40]	; 0x28
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	3b01      	subs	r3, #1
 800498c:	025b      	lsls	r3, r3, #9
 800498e:	b29b      	uxth	r3, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049ac:	4931      	ldr	r1, [pc, #196]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049b2:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	492d      	ldr	r1, [pc, #180]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049c4:	4b2b      	ldr	r3, [pc, #172]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	f023 0220 	bic.w	r2, r3, #32
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	4928      	ldr	r1, [pc, #160]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	f023 0310 	bic.w	r3, r3, #16
 80049e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <RCCEx_PLL2_Config+0x160>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	69d2      	ldr	r2, [r2, #28]
 80049ee:	00d2      	lsls	r2, r2, #3
 80049f0:	4920      	ldr	r1, [pc, #128]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	f043 0310 	orr.w	r3, r3, #16
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a14:	e00f      	b.n	8004a36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d106      	bne.n	8004a2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a28:	e005      	b.n	8004a36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fc fc85 	bl	8001350 <HAL_GetTick>
 8004a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a48:	e008      	b.n	8004a5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a4a:	f7fc fc81 	bl	8001350 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e006      	b.n	8004a6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400
 8004a78:	ffff0007 	.word	0xffff0007

08004a7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a8a:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d101      	bne.n	8004a9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e099      	b.n	8004bce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a9a:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a4e      	ldr	r2, [pc, #312]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa6:	f7fc fc53 	bl	8001350 <HAL_GetTick>
 8004aaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004aae:	f7fc fc4f 	bl	8001350 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e086      	b.n	8004bce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ac0:	4b45      	ldr	r3, [pc, #276]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004acc:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	051b      	lsls	r3, r3, #20
 8004ada:	493f      	ldr	r1, [pc, #252]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	628b      	str	r3, [r1, #40]	; 0x28
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	025b      	lsls	r3, r3, #9
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b10:	4931      	ldr	r1, [pc, #196]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b16:	4b30      	ldr	r3, [pc, #192]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	492d      	ldr	r1, [pc, #180]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4928      	ldr	r1, [pc, #160]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b3a:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4a:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <RCCEx_PLL3_Config+0x160>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	69d2      	ldr	r2, [r2, #28]
 8004b52:	00d2      	lsls	r2, r2, #3
 8004b54:	4920      	ldr	r1, [pc, #128]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b5a:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b78:	e00f      	b.n	8004b9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d106      	bne.n	8004b8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b8c:	e005      	b.n	8004b9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba6:	f7fc fbd3 	bl	8001350 <HAL_GetTick>
 8004baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bac:	e008      	b.n	8004bc0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bae:	f7fc fbcf 	bl	8001350 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e006      	b.n	8004bce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	ffff0007 	.word	0xffff0007

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e049      	b.n	8004c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f841 	bl	8004c8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fa00 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e054      	b.n	8004d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a26      	ldr	r2, [pc, #152]	; (8004d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d01d      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d115      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_TIM_Base_Start_IT+0xec>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d015      	beq.n	8004d62 <HAL_TIM_Base_Start_IT+0xbe>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d011      	beq.n	8004d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e008      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e000      	b.n	8004d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40001800 	.word	0x40001800
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	00010007 	.word	0x00010007

08004d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0202 	mvn.w	r2, #2
 8004dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f905 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8f7 	bl	8004fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f908 	bl	8004ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0204 	mvn.w	r2, #4
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f8db 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8cd 	bl	8004fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f8de 	bl	8004ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0208 	mvn.w	r2, #8
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8b1 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8a3 	bl	8004fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8b4 	bl	8004ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f887 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f879 	bl	8004fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f88a 	bl	8004ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0201 	mvn.w	r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fb fe8a 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f914 	bl	800516c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d10e      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f907 	bl	8005180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d10e      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f838 	bl	800500e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d10e      	bne.n	8004fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0220 	mvn.w	r2, #32
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f8c7 	bl	8005158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a40      	ldr	r2, [pc, #256]	; (8005138 <TIM_Base_SetConfig+0x114>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3d      	ldr	r2, [pc, #244]	; (800513c <TIM_Base_SetConfig+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3c      	ldr	r2, [pc, #240]	; (8005140 <TIM_Base_SetConfig+0x11c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <TIM_Base_SetConfig+0x120>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <TIM_Base_SetConfig+0x124>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <TIM_Base_SetConfig+0x114>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01f      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <TIM_Base_SetConfig+0x118>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <TIM_Base_SetConfig+0x11c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <TIM_Base_SetConfig+0x120>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a29      	ldr	r2, [pc, #164]	; (8005148 <TIM_Base_SetConfig+0x124>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <TIM_Base_SetConfig+0x128>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a27      	ldr	r2, [pc, #156]	; (8005150 <TIM_Base_SetConfig+0x12c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a26      	ldr	r2, [pc, #152]	; (8005154 <TIM_Base_SetConfig+0x130>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <TIM_Base_SetConfig+0x114>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a12      	ldr	r2, [pc, #72]	; (8005148 <TIM_Base_SetConfig+0x124>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a11      	ldr	r2, [pc, #68]	; (800514c <TIM_Base_SetConfig+0x128>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a10      	ldr	r2, [pc, #64]	; (8005150 <TIM_Base_SetConfig+0x12c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0f      	ldr	r2, [pc, #60]	; (8005154 <TIM_Base_SetConfig+0x130>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800

08005158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e042      	b.n	800522c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fb fe3b 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2224      	movs	r2, #36	; 0x24
 80051c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f900 	bl	80053dc <UART_SetConfig>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e022      	b.n	800522c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fe5c 	bl	8005eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fee3 	bl	8005ff0 <UART_CheckIdleState>
 800522a:	4603      	mov	r3, r0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	2b20      	cmp	r3, #32
 800524c:	f040 80c0 	bne.w	80053d0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Receive+0x28>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0b8      	b.n	80053d2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_UART_Receive+0x3a>
 800526a:	2302      	movs	r3, #2
 800526c:	e0b1      	b.n	80053d2 <HAL_UART_Receive+0x19e>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2222      	movs	r2, #34	; 0x22
 8005282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800528c:	f7fc f860 	bl	8001350 <HAL_GetTick>
 8005290:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d10e      	bne.n	80052ca <HAL_UART_Receive+0x96>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_UART_Receive+0x8c>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052be:	e02d      	b.n	800531c <HAL_UART_Receive+0xe8>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052c8:	e028      	b.n	800531c <HAL_UART_Receive+0xe8>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_UART_Receive+0xba>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Receive+0xb0>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052e2:	e01b      	b.n	800531c <HAL_UART_Receive+0xe8>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	227f      	movs	r2, #127	; 0x7f
 80052e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052ec:	e016      	b.n	800531c <HAL_UART_Receive+0xe8>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f6:	d10d      	bne.n	8005314 <HAL_UART_Receive+0xe0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_UART_Receive+0xd6>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	227f      	movs	r2, #127	; 0x7f
 8005304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005308:	e008      	b.n	800531c <HAL_UART_Receive+0xe8>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	223f      	movs	r2, #63	; 0x3f
 800530e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005312:	e003      	b.n	800531c <HAL_UART_Receive+0xe8>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005322:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d108      	bne.n	8005340 <HAL_UART_Receive+0x10c>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e003      	b.n	8005348 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005350:	e032      	b.n	80053b8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2120      	movs	r1, #32
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fe92 	bl	8006086 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e032      	b.n	80053d2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10c      	bne.n	800538c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	b29a      	uxth	r2, r3
 800537a:	8a7b      	ldrh	r3, [r7, #18]
 800537c:	4013      	ands	r3, r2
 800537e:	b29a      	uxth	r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3302      	adds	r3, #2
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e00c      	b.n	80053a6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	b2da      	uxtb	r2, r3
 8005394:	8a7b      	ldrh	r3, [r7, #18]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	4013      	ands	r3, r2
 800539a:	b2da      	uxtb	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1c6      	bne.n	8005352 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b092      	sub	sp, #72	; 0x48
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4bbe      	ldr	r3, [pc, #760]	; (8005704 <UART_SetConfig+0x328>)
 800540c:	4013      	ands	r3, r2
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4ab3      	ldr	r2, [pc, #716]	; (8005708 <UART_SetConfig+0x32c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005444:	4313      	orrs	r3, r2
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	4baf      	ldr	r3, [pc, #700]	; (800570c <UART_SetConfig+0x330>)
 8005450:	4013      	ands	r3, r2
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005458:	430b      	orrs	r3, r1
 800545a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	f023 010f 	bic.w	r1, r3, #15
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4aa6      	ldr	r2, [pc, #664]	; (8005710 <UART_SetConfig+0x334>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d177      	bne.n	800556c <UART_SetConfig+0x190>
 800547c:	4ba5      	ldr	r3, [pc, #660]	; (8005714 <UART_SetConfig+0x338>)
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005484:	2b28      	cmp	r3, #40	; 0x28
 8005486:	d86d      	bhi.n	8005564 <UART_SetConfig+0x188>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0xb4>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	08005535 	.word	0x08005535
 8005494:	08005565 	.word	0x08005565
 8005498:	08005565 	.word	0x08005565
 800549c:	08005565 	.word	0x08005565
 80054a0:	08005565 	.word	0x08005565
 80054a4:	08005565 	.word	0x08005565
 80054a8:	08005565 	.word	0x08005565
 80054ac:	08005565 	.word	0x08005565
 80054b0:	0800553d 	.word	0x0800553d
 80054b4:	08005565 	.word	0x08005565
 80054b8:	08005565 	.word	0x08005565
 80054bc:	08005565 	.word	0x08005565
 80054c0:	08005565 	.word	0x08005565
 80054c4:	08005565 	.word	0x08005565
 80054c8:	08005565 	.word	0x08005565
 80054cc:	08005565 	.word	0x08005565
 80054d0:	08005545 	.word	0x08005545
 80054d4:	08005565 	.word	0x08005565
 80054d8:	08005565 	.word	0x08005565
 80054dc:	08005565 	.word	0x08005565
 80054e0:	08005565 	.word	0x08005565
 80054e4:	08005565 	.word	0x08005565
 80054e8:	08005565 	.word	0x08005565
 80054ec:	08005565 	.word	0x08005565
 80054f0:	0800554d 	.word	0x0800554d
 80054f4:	08005565 	.word	0x08005565
 80054f8:	08005565 	.word	0x08005565
 80054fc:	08005565 	.word	0x08005565
 8005500:	08005565 	.word	0x08005565
 8005504:	08005565 	.word	0x08005565
 8005508:	08005565 	.word	0x08005565
 800550c:	08005565 	.word	0x08005565
 8005510:	08005555 	.word	0x08005555
 8005514:	08005565 	.word	0x08005565
 8005518:	08005565 	.word	0x08005565
 800551c:	08005565 	.word	0x08005565
 8005520:	08005565 	.word	0x08005565
 8005524:	08005565 	.word	0x08005565
 8005528:	08005565 	.word	0x08005565
 800552c:	08005565 	.word	0x08005565
 8005530:	0800555d 	.word	0x0800555d
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e222      	b.n	8005982 <UART_SetConfig+0x5a6>
 800553c:	2304      	movs	r3, #4
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e21e      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005544:	2308      	movs	r3, #8
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e21a      	b.n	8005982 <UART_SetConfig+0x5a6>
 800554c:	2310      	movs	r3, #16
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e216      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005554:	2320      	movs	r3, #32
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e212      	b.n	8005982 <UART_SetConfig+0x5a6>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e20e      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e20a      	b.n	8005982 <UART_SetConfig+0x5a6>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a69      	ldr	r2, [pc, #420]	; (8005718 <UART_SetConfig+0x33c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d130      	bne.n	80055d8 <UART_SetConfig+0x1fc>
 8005576:	4b67      	ldr	r3, [pc, #412]	; (8005714 <UART_SetConfig+0x338>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b05      	cmp	r3, #5
 8005580:	d826      	bhi.n	80055d0 <UART_SetConfig+0x1f4>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x1ac>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055a1 	.word	0x080055a1
 800558c:	080055a9 	.word	0x080055a9
 8005590:	080055b1 	.word	0x080055b1
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055c1 	.word	0x080055c1
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e1ec      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e1e8      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e1e4      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e1e0      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055c0:	2320      	movs	r3, #32
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e1dc      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e1d8      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e1d4      	b.n	8005982 <UART_SetConfig+0x5a6>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a4f      	ldr	r2, [pc, #316]	; (800571c <UART_SetConfig+0x340>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d130      	bne.n	8005644 <UART_SetConfig+0x268>
 80055e2:	4b4c      	ldr	r3, [pc, #304]	; (8005714 <UART_SetConfig+0x338>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d826      	bhi.n	800563c <UART_SetConfig+0x260>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x218>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	0800560d 	.word	0x0800560d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e1b6      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e1b2      	b.n	8005982 <UART_SetConfig+0x5a6>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e1ae      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e1aa      	b.n	8005982 <UART_SetConfig+0x5a6>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e1a6      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e1a2      	b.n	8005982 <UART_SetConfig+0x5a6>
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e19e      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a35      	ldr	r2, [pc, #212]	; (8005720 <UART_SetConfig+0x344>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d130      	bne.n	80056b0 <UART_SetConfig+0x2d4>
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <UART_SetConfig+0x338>)
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	2b05      	cmp	r3, #5
 8005658:	d826      	bhi.n	80056a8 <UART_SetConfig+0x2cc>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <UART_SetConfig+0x284>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005679 	.word	0x08005679
 8005664:	08005681 	.word	0x08005681
 8005668:	08005689 	.word	0x08005689
 800566c:	08005691 	.word	0x08005691
 8005670:	08005699 	.word	0x08005699
 8005674:	080056a1 	.word	0x080056a1
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e180      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e17c      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e178      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e174      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005698:	2320      	movs	r3, #32
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e170      	b.n	8005982 <UART_SetConfig+0x5a6>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e16c      	b.n	8005982 <UART_SetConfig+0x5a6>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e168      	b.n	8005982 <UART_SetConfig+0x5a6>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <UART_SetConfig+0x348>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d142      	bne.n	8005740 <UART_SetConfig+0x364>
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <UART_SetConfig+0x338>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d838      	bhi.n	8005738 <UART_SetConfig+0x35c>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x2f0>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056e5 	.word	0x080056e5
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	080056f5 	.word	0x080056f5
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005729 	.word	0x08005729
 80056e0:	08005731 	.word	0x08005731
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e14a      	b.n	8005982 <UART_SetConfig+0x5a6>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e146      	b.n	8005982 <UART_SetConfig+0x5a6>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e142      	b.n	8005982 <UART_SetConfig+0x5a6>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e13e      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005704:	cfff69f3 	.word	0xcfff69f3
 8005708:	58000c00 	.word	0x58000c00
 800570c:	11fff4ff 	.word	0x11fff4ff
 8005710:	40011000 	.word	0x40011000
 8005714:	58024400 	.word	0x58024400
 8005718:	40004400 	.word	0x40004400
 800571c:	40004800 	.word	0x40004800
 8005720:	40004c00 	.word	0x40004c00
 8005724:	40005000 	.word	0x40005000
 8005728:	2320      	movs	r3, #32
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e128      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e124      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e120      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4acb      	ldr	r2, [pc, #812]	; (8005a74 <UART_SetConfig+0x698>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d176      	bne.n	8005838 <UART_SetConfig+0x45c>
 800574a:	4bcb      	ldr	r3, [pc, #812]	; (8005a78 <UART_SetConfig+0x69c>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005752:	2b28      	cmp	r3, #40	; 0x28
 8005754:	d86c      	bhi.n	8005830 <UART_SetConfig+0x454>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x380>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005801 	.word	0x08005801
 8005760:	08005831 	.word	0x08005831
 8005764:	08005831 	.word	0x08005831
 8005768:	08005831 	.word	0x08005831
 800576c:	08005831 	.word	0x08005831
 8005770:	08005831 	.word	0x08005831
 8005774:	08005831 	.word	0x08005831
 8005778:	08005831 	.word	0x08005831
 800577c:	08005809 	.word	0x08005809
 8005780:	08005831 	.word	0x08005831
 8005784:	08005831 	.word	0x08005831
 8005788:	08005831 	.word	0x08005831
 800578c:	08005831 	.word	0x08005831
 8005790:	08005831 	.word	0x08005831
 8005794:	08005831 	.word	0x08005831
 8005798:	08005831 	.word	0x08005831
 800579c:	08005811 	.word	0x08005811
 80057a0:	08005831 	.word	0x08005831
 80057a4:	08005831 	.word	0x08005831
 80057a8:	08005831 	.word	0x08005831
 80057ac:	08005831 	.word	0x08005831
 80057b0:	08005831 	.word	0x08005831
 80057b4:	08005831 	.word	0x08005831
 80057b8:	08005831 	.word	0x08005831
 80057bc:	08005819 	.word	0x08005819
 80057c0:	08005831 	.word	0x08005831
 80057c4:	08005831 	.word	0x08005831
 80057c8:	08005831 	.word	0x08005831
 80057cc:	08005831 	.word	0x08005831
 80057d0:	08005831 	.word	0x08005831
 80057d4:	08005831 	.word	0x08005831
 80057d8:	08005831 	.word	0x08005831
 80057dc:	08005821 	.word	0x08005821
 80057e0:	08005831 	.word	0x08005831
 80057e4:	08005831 	.word	0x08005831
 80057e8:	08005831 	.word	0x08005831
 80057ec:	08005831 	.word	0x08005831
 80057f0:	08005831 	.word	0x08005831
 80057f4:	08005831 	.word	0x08005831
 80057f8:	08005831 	.word	0x08005831
 80057fc:	08005829 	.word	0x08005829
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e0bc      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e0b8      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e0b4      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e0b0      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005820:	2320      	movs	r3, #32
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e0ac      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e0a8      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e0a4      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a8f      	ldr	r2, [pc, #572]	; (8005a7c <UART_SetConfig+0x6a0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d130      	bne.n	80058a4 <UART_SetConfig+0x4c8>
 8005842:	4b8d      	ldr	r3, [pc, #564]	; (8005a78 <UART_SetConfig+0x69c>)
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	2b05      	cmp	r3, #5
 800584c:	d826      	bhi.n	800589c <UART_SetConfig+0x4c0>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x478>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	0800586d 	.word	0x0800586d
 8005858:	08005875 	.word	0x08005875
 800585c:	0800587d 	.word	0x0800587d
 8005860:	08005885 	.word	0x08005885
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005895 	.word	0x08005895
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e086      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e082      	b.n	8005982 <UART_SetConfig+0x5a6>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e07e      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e07a      	b.n	8005982 <UART_SetConfig+0x5a6>
 800588c:	2320      	movs	r3, #32
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e076      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e072      	b.n	8005982 <UART_SetConfig+0x5a6>
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e06e      	b.n	8005982 <UART_SetConfig+0x5a6>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a75      	ldr	r2, [pc, #468]	; (8005a80 <UART_SetConfig+0x6a4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d130      	bne.n	8005910 <UART_SetConfig+0x534>
 80058ae:	4b72      	ldr	r3, [pc, #456]	; (8005a78 <UART_SetConfig+0x69c>)
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d826      	bhi.n	8005908 <UART_SetConfig+0x52c>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x4e4>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058d9 	.word	0x080058d9
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	080058e9 	.word	0x080058e9
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e050      	b.n	8005982 <UART_SetConfig+0x5a6>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e04c      	b.n	8005982 <UART_SetConfig+0x5a6>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e048      	b.n	8005982 <UART_SetConfig+0x5a6>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e044      	b.n	8005982 <UART_SetConfig+0x5a6>
 80058f8:	2320      	movs	r3, #32
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e040      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005900:	2340      	movs	r3, #64	; 0x40
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005906:	e03c      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590e:	e038      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a5b      	ldr	r2, [pc, #364]	; (8005a84 <UART_SetConfig+0x6a8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d130      	bne.n	800597c <UART_SetConfig+0x5a0>
 800591a:	4b57      	ldr	r3, [pc, #348]	; (8005a78 <UART_SetConfig+0x69c>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	2b05      	cmp	r3, #5
 8005924:	d826      	bhi.n	8005974 <UART_SetConfig+0x598>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0x550>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005945 	.word	0x08005945
 8005930:	0800594d 	.word	0x0800594d
 8005934:	08005955 	.word	0x08005955
 8005938:	0800595d 	.word	0x0800595d
 800593c:	08005965 	.word	0x08005965
 8005940:	0800596d 	.word	0x0800596d
 8005944:	2302      	movs	r3, #2
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e01a      	b.n	8005982 <UART_SetConfig+0x5a6>
 800594c:	2304      	movs	r3, #4
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e016      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005954:	2308      	movs	r3, #8
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e012      	b.n	8005982 <UART_SetConfig+0x5a6>
 800595c:	2310      	movs	r3, #16
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e00e      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005964:	2320      	movs	r3, #32
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e00a      	b.n	8005982 <UART_SetConfig+0x5a6>
 800596c:	2340      	movs	r3, #64	; 0x40
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e006      	b.n	8005982 <UART_SetConfig+0x5a6>
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e002      	b.n	8005982 <UART_SetConfig+0x5a6>
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a3f      	ldr	r2, [pc, #252]	; (8005a84 <UART_SetConfig+0x6a8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	f040 80f8 	bne.w	8005b7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800598e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005992:	2b20      	cmp	r3, #32
 8005994:	dc46      	bgt.n	8005a24 <UART_SetConfig+0x648>
 8005996:	2b02      	cmp	r3, #2
 8005998:	f2c0 8082 	blt.w	8005aa0 <UART_SetConfig+0x6c4>
 800599c:	3b02      	subs	r3, #2
 800599e:	2b1e      	cmp	r3, #30
 80059a0:	d87e      	bhi.n	8005aa0 <UART_SetConfig+0x6c4>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x5cc>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	08005a2b 	.word	0x08005a2b
 80059ac:	08005aa1 	.word	0x08005aa1
 80059b0:	08005a33 	.word	0x08005a33
 80059b4:	08005aa1 	.word	0x08005aa1
 80059b8:	08005aa1 	.word	0x08005aa1
 80059bc:	08005aa1 	.word	0x08005aa1
 80059c0:	08005a43 	.word	0x08005a43
 80059c4:	08005aa1 	.word	0x08005aa1
 80059c8:	08005aa1 	.word	0x08005aa1
 80059cc:	08005aa1 	.word	0x08005aa1
 80059d0:	08005aa1 	.word	0x08005aa1
 80059d4:	08005aa1 	.word	0x08005aa1
 80059d8:	08005aa1 	.word	0x08005aa1
 80059dc:	08005aa1 	.word	0x08005aa1
 80059e0:	08005a53 	.word	0x08005a53
 80059e4:	08005aa1 	.word	0x08005aa1
 80059e8:	08005aa1 	.word	0x08005aa1
 80059ec:	08005aa1 	.word	0x08005aa1
 80059f0:	08005aa1 	.word	0x08005aa1
 80059f4:	08005aa1 	.word	0x08005aa1
 80059f8:	08005aa1 	.word	0x08005aa1
 80059fc:	08005aa1 	.word	0x08005aa1
 8005a00:	08005aa1 	.word	0x08005aa1
 8005a04:	08005aa1 	.word	0x08005aa1
 8005a08:	08005aa1 	.word	0x08005aa1
 8005a0c:	08005aa1 	.word	0x08005aa1
 8005a10:	08005aa1 	.word	0x08005aa1
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005aa1 	.word	0x08005aa1
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005a93 	.word	0x08005a93
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d037      	beq.n	8005a98 <UART_SetConfig+0x6bc>
 8005a28:	e03a      	b.n	8005aa0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a2a:	f7fe fcb7 	bl	800439c <HAL_RCCEx_GetD3PCLK1Freq>
 8005a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a30:	e03c      	b.n	8005aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fcc6 	bl	80043c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a40:	e034      	b.n	8005aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a42:	f107 0318 	add.w	r3, r7, #24
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fe12 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a50:	e02c      	b.n	8005aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <UART_SetConfig+0x69c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <UART_SetConfig+0x69c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	4a07      	ldr	r2, [pc, #28]	; (8005a88 <UART_SetConfig+0x6ac>)
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a70:	e01c      	b.n	8005aac <UART_SetConfig+0x6d0>
 8005a72:	bf00      	nop
 8005a74:	40011400 	.word	0x40011400
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	40007800 	.word	0x40007800
 8005a80:	40007c00 	.word	0x40007c00
 8005a84:	58000c00 	.word	0x58000c00
 8005a88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a8c:	4b9d      	ldr	r3, [pc, #628]	; (8005d04 <UART_SetConfig+0x928>)
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a90:	e00c      	b.n	8005aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a92:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <UART_SetConfig+0x92c>)
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a96:	e009      	b.n	8005aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a9e:	e005      	b.n	8005aac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005aaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 81de 	beq.w	8005e70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	4a94      	ldr	r2, [pc, #592]	; (8005d0c <UART_SetConfig+0x930>)
 8005aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d305      	bcc.n	8005ae4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005aea:	e1c1      	b.n	8005e70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	2200      	movs	r2, #0
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	60fa      	str	r2, [r7, #12]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	4a84      	ldr	r2, [pc, #528]	; (8005d0c <UART_SetConfig+0x930>)
 8005afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2200      	movs	r2, #0
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b0e:	f7fa fc37 	bl	8000380 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4610      	mov	r0, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	020b      	lsls	r3, r1, #8
 8005b24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b28:	0202      	lsls	r2, r0, #8
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	6849      	ldr	r1, [r1, #4]
 8005b2e:	0849      	lsrs	r1, r1, #1
 8005b30:	2000      	movs	r0, #0
 8005b32:	460c      	mov	r4, r1
 8005b34:	4605      	mov	r5, r0
 8005b36:	eb12 0804 	adds.w	r8, r2, r4
 8005b3a:	eb43 0905 	adc.w	r9, r3, r5
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	469a      	mov	sl, r3
 8005b46:	4693      	mov	fp, r2
 8005b48:	4652      	mov	r2, sl
 8005b4a:	465b      	mov	r3, fp
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	4649      	mov	r1, r9
 8005b50:	f7fa fc16 	bl	8000380 <__aeabi_uldivmod>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4613      	mov	r3, r2
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b62:	d308      	bcc.n	8005b76 <UART_SetConfig+0x79a>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6a:	d204      	bcs.n	8005b76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b72:	60da      	str	r2, [r3, #12]
 8005b74:	e17c      	b.n	8005e70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b7c:	e178      	b.n	8005e70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b86:	f040 80c5 	bne.w	8005d14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005b8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	dc48      	bgt.n	8005c24 <UART_SetConfig+0x848>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	db7b      	blt.n	8005c8e <UART_SetConfig+0x8b2>
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d879      	bhi.n	8005c8e <UART_SetConfig+0x8b2>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x7c4>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005c2b 	.word	0x08005c2b
 8005ba4:	08005c33 	.word	0x08005c33
 8005ba8:	08005c8f 	.word	0x08005c8f
 8005bac:	08005c8f 	.word	0x08005c8f
 8005bb0:	08005c3b 	.word	0x08005c3b
 8005bb4:	08005c8f 	.word	0x08005c8f
 8005bb8:	08005c8f 	.word	0x08005c8f
 8005bbc:	08005c8f 	.word	0x08005c8f
 8005bc0:	08005c4b 	.word	0x08005c4b
 8005bc4:	08005c8f 	.word	0x08005c8f
 8005bc8:	08005c8f 	.word	0x08005c8f
 8005bcc:	08005c8f 	.word	0x08005c8f
 8005bd0:	08005c8f 	.word	0x08005c8f
 8005bd4:	08005c8f 	.word	0x08005c8f
 8005bd8:	08005c8f 	.word	0x08005c8f
 8005bdc:	08005c8f 	.word	0x08005c8f
 8005be0:	08005c5b 	.word	0x08005c5b
 8005be4:	08005c8f 	.word	0x08005c8f
 8005be8:	08005c8f 	.word	0x08005c8f
 8005bec:	08005c8f 	.word	0x08005c8f
 8005bf0:	08005c8f 	.word	0x08005c8f
 8005bf4:	08005c8f 	.word	0x08005c8f
 8005bf8:	08005c8f 	.word	0x08005c8f
 8005bfc:	08005c8f 	.word	0x08005c8f
 8005c00:	08005c8f 	.word	0x08005c8f
 8005c04:	08005c8f 	.word	0x08005c8f
 8005c08:	08005c8f 	.word	0x08005c8f
 8005c0c:	08005c8f 	.word	0x08005c8f
 8005c10:	08005c8f 	.word	0x08005c8f
 8005c14:	08005c8f 	.word	0x08005c8f
 8005c18:	08005c8f 	.word	0x08005c8f
 8005c1c:	08005c8f 	.word	0x08005c8f
 8005c20:	08005c81 	.word	0x08005c81
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d02e      	beq.n	8005c86 <UART_SetConfig+0x8aa>
 8005c28:	e031      	b.n	8005c8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2a:	f7fd fc03 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8005c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c30:	e033      	b.n	8005c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c32:	f7fd fc15 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8005c36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c38:	e02f      	b.n	8005c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fbc2 	bl	80043c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c48:	e027      	b.n	8005c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe fd0e 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c58:	e01f      	b.n	8005c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c5a:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <UART_SetConfig+0x934>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c66:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <UART_SetConfig+0x934>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	08db      	lsrs	r3, r3, #3
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	4a24      	ldr	r2, [pc, #144]	; (8005d04 <UART_SetConfig+0x928>)
 8005c72:	fa22 f303 	lsr.w	r3, r2, r3
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c78:	e00f      	b.n	8005c9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005c7a:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <UART_SetConfig+0x928>)
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c7e:	e00c      	b.n	8005c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c80:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <UART_SetConfig+0x92c>)
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c84:	e009      	b.n	8005c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c8c:	e005      	b.n	8005c9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80e7 	beq.w	8005e70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <UART_SetConfig+0x930>)
 8005ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb4:	005a      	lsls	r2, r3, #1
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b0f      	cmp	r3, #15
 8005ccc:	d916      	bls.n	8005cfc <UART_SetConfig+0x920>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd4:	d212      	bcs.n	8005cfc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f023 030f 	bic.w	r3, r3, #15
 8005cde:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e0b9      	b.n	8005e70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d02:	e0b5      	b.n	8005e70 <UART_SetConfig+0xa94>
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	003d0900 	.word	0x003d0900
 8005d0c:	0800a9bc 	.word	0x0800a9bc
 8005d10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	dc49      	bgt.n	8005db0 <UART_SetConfig+0x9d4>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	db7c      	blt.n	8005e1a <UART_SetConfig+0xa3e>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d87a      	bhi.n	8005e1a <UART_SetConfig+0xa3e>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0x950>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005db7 	.word	0x08005db7
 8005d30:	08005dbf 	.word	0x08005dbf
 8005d34:	08005e1b 	.word	0x08005e1b
 8005d38:	08005e1b 	.word	0x08005e1b
 8005d3c:	08005dc7 	.word	0x08005dc7
 8005d40:	08005e1b 	.word	0x08005e1b
 8005d44:	08005e1b 	.word	0x08005e1b
 8005d48:	08005e1b 	.word	0x08005e1b
 8005d4c:	08005dd7 	.word	0x08005dd7
 8005d50:	08005e1b 	.word	0x08005e1b
 8005d54:	08005e1b 	.word	0x08005e1b
 8005d58:	08005e1b 	.word	0x08005e1b
 8005d5c:	08005e1b 	.word	0x08005e1b
 8005d60:	08005e1b 	.word	0x08005e1b
 8005d64:	08005e1b 	.word	0x08005e1b
 8005d68:	08005e1b 	.word	0x08005e1b
 8005d6c:	08005de7 	.word	0x08005de7
 8005d70:	08005e1b 	.word	0x08005e1b
 8005d74:	08005e1b 	.word	0x08005e1b
 8005d78:	08005e1b 	.word	0x08005e1b
 8005d7c:	08005e1b 	.word	0x08005e1b
 8005d80:	08005e1b 	.word	0x08005e1b
 8005d84:	08005e1b 	.word	0x08005e1b
 8005d88:	08005e1b 	.word	0x08005e1b
 8005d8c:	08005e1b 	.word	0x08005e1b
 8005d90:	08005e1b 	.word	0x08005e1b
 8005d94:	08005e1b 	.word	0x08005e1b
 8005d98:	08005e1b 	.word	0x08005e1b
 8005d9c:	08005e1b 	.word	0x08005e1b
 8005da0:	08005e1b 	.word	0x08005e1b
 8005da4:	08005e1b 	.word	0x08005e1b
 8005da8:	08005e1b 	.word	0x08005e1b
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d02e      	beq.n	8005e12 <UART_SetConfig+0xa36>
 8005db4:	e031      	b.n	8005e1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7fd fb3d 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8005dba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dbc:	e033      	b.n	8005e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dbe:	f7fd fb4f 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8005dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dc4:	e02f      	b.n	8005e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fafc 	bl	80043c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dd4:	e027      	b.n	8005e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dd6:	f107 0318 	add.w	r3, r7, #24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fc48 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005de4:	e01f      	b.n	8005e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005de6:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <UART_SetConfig+0xac0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005df2:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <UART_SetConfig+0xac0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	08db      	lsrs	r3, r3, #3
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <UART_SetConfig+0xac4>)
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e04:	e00f      	b.n	8005e26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005e06:	4b26      	ldr	r3, [pc, #152]	; (8005ea0 <UART_SetConfig+0xac4>)
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e0a:	e00c      	b.n	8005e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <UART_SetConfig+0xac8>)
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e10:	e009      	b.n	8005e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e18:	e005      	b.n	8005e26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e24:	bf00      	nop
    }

    if (pclk != 0U)
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d021      	beq.n	8005e70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <UART_SetConfig+0xacc>)
 8005e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	441a      	add	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d909      	bls.n	8005e6a <UART_SetConfig+0xa8e>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d205      	bcs.n	8005e6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60da      	str	r2, [r3, #12]
 8005e68:	e002      	b.n	8005e70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2200      	movs	r2, #0
 8005e84:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3748      	adds	r7, #72	; 0x48
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e9a:	bf00      	nop
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	03d09000 	.word	0x03d09000
 8005ea4:	003d0900 	.word	0x003d0900
 8005ea8:	0800a9bc 	.word	0x0800a9bc

08005eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005faa:	d10a      	bne.n	8005fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006000:	f7fb f9a6 	bl	8001350 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b08      	cmp	r3, #8
 8006012:	d10e      	bne.n	8006032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f82f 	bl	8006086 <UART_WaitOnFlagUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e025      	b.n	800607e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b04      	cmp	r3, #4
 800603e:	d10e      	bne.n	800605e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f819 	bl	8006086 <UART_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00f      	b.n	800607e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b09c      	sub	sp, #112	; 0x70
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	603b      	str	r3, [r7, #0]
 8006092:	4613      	mov	r3, r2
 8006094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006096:	e0a9      	b.n	80061ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	f000 80a5 	beq.w	80061ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fb f955 	bl	8001350 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80060b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d140      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060cc:	667b      	str	r3, [r7, #100]	; 0x64
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e6      	bne.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	663b      	str	r3, [r7, #96]	; 0x60
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800610a:	64ba      	str	r2, [r7, #72]	; 0x48
 800610c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e5      	bne.n	80060ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e069      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d051      	beq.n	80061ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006156:	d149      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006160:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
 8006182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3308      	adds	r3, #8
 800619a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061b4:	623a      	str	r2, [r7, #32]
 80061b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e5      	bne.n	8006194 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e010      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4013      	ands	r3, r2
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	bf0c      	ite	eq
 80061fc:	2301      	moveq	r3, #1
 80061fe:	2300      	movne	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	429a      	cmp	r2, r3
 8006208:	f43f af46 	beq.w	8006098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3770      	adds	r7, #112	; 0x70
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_UARTEx_DisableFifoMode+0x16>
 8006228:	2302      	movs	r3, #2
 800622a:	e027      	b.n	800627c <HAL_UARTEx_DisableFifoMode+0x66>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800625a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800629c:	2302      	movs	r3, #2
 800629e:	e02d      	b.n	80062fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2224      	movs	r2, #36	; 0x24
 80062ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f84f 	bl	8006380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e02d      	b.n	8006378 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2224      	movs	r2, #36	; 0x24
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f811 	bl	8006380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a0:	e031      	b.n	8006406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063a2:	2310      	movs	r3, #16
 80063a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063a6:	2310      	movs	r3, #16
 80063a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	0e5b      	lsrs	r3, r3, #25
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0f5b      	lsrs	r3, r3, #29
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	7b3a      	ldrb	r2, [r7, #12]
 80063ce:	4911      	ldr	r1, [pc, #68]	; (8006414 <UARTEx_SetNbDataToProcess+0x94>)
 80063d0:	5c8a      	ldrb	r2, [r1, r2]
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063d6:	7b3a      	ldrb	r2, [r7, #12]
 80063d8:	490f      	ldr	r1, [pc, #60]	; (8006418 <UARTEx_SetNbDataToProcess+0x98>)
 80063da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	7b7a      	ldrb	r2, [r7, #13]
 80063ec:	4909      	ldr	r1, [pc, #36]	; (8006414 <UARTEx_SetNbDataToProcess+0x94>)
 80063ee:	5c8a      	ldrb	r2, [r1, r2]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	4908      	ldr	r1, [pc, #32]	; (8006418 <UARTEx_SetNbDataToProcess+0x98>)
 80063f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	0800a9d4 	.word	0x0800a9d4
 8006418:	0800a9dc 	.word	0x0800a9dc

0800641c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800641c:	b084      	sub	sp, #16
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	f107 001c 	add.w	r0, r7, #28
 800642a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	2b01      	cmp	r3, #1
 8006432:	d120      	bne.n	8006476 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <USB_CoreInit+0xd4>)
 8006446:	4013      	ands	r3, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 faac 	bl	80069c8 <USB_CoreReset>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e01a      	b.n	80064ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 faa0 	bl	80069c8 <USB_CoreReset>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800648c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
 800649e:	e005      	b.n	80064ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d116      	bne.n	80064e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <USB_CoreInit+0xd8>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f043 0206 	orr.w	r2, r3, #6
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ec:	b004      	add	sp, #16
 80064ee:	4770      	bx	lr
 80064f0:	ffbdffbf 	.word	0xffbdffbf
 80064f4:	03ee0000 	.word	0x03ee0000

080064f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 0201 	bic.w	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d115      	bne.n	8006568 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006548:	2001      	movs	r0, #1
 800654a:	f7fa ff0d 	bl	8001368 <HAL_Delay>
      ms++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa29 	bl	80069ac <USB_GetMode>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d01e      	beq.n	800659e <USB_SetCurrentMode+0x84>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b31      	cmp	r3, #49	; 0x31
 8006564:	d9f0      	bls.n	8006548 <USB_SetCurrentMode+0x2e>
 8006566:	e01a      	b.n	800659e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d115      	bne.n	800659a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800657a:	2001      	movs	r0, #1
 800657c:	f7fa fef4 	bl	8001368 <HAL_Delay>
      ms++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa10 	bl	80069ac <USB_GetMode>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <USB_SetCurrentMode+0x84>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b31      	cmp	r3, #49	; 0x31
 8006596:	d9f0      	bls.n	800657a <USB_SetCurrentMode+0x60>
 8006598:	e001      	b.n	800659e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e005      	b.n	80065aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b32      	cmp	r3, #50	; 0x32
 80065a2:	d101      	bne.n	80065a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b4:	b084      	sub	sp, #16
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	e009      	b.n	80065e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3340      	adds	r3, #64	; 0x40
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3301      	adds	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b0e      	cmp	r3, #14
 80065ec:	d9f2      	bls.n	80065d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11c      	bne.n	800662e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e005      	b.n	800663a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006640:	461a      	mov	r2, r3
 8006642:	2300      	movs	r3, #0
 8006644:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664c:	4619      	mov	r1, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	461a      	mov	r2, r3
 8006656:	680b      	ldr	r3, [r1, #0]
 8006658:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10c      	bne.n	800667a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006666:	2100      	movs	r1, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f965 	bl	8006938 <USB_SetDevSpeed>
 800666e:	e008      	b.n	8006682 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f960 	bl	8006938 <USB_SetDevSpeed>
 8006678:	e003      	b.n	8006682 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800667a:	2103      	movs	r1, #3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f95b 	bl	8006938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006682:	2110      	movs	r1, #16
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f8f3 	bl	8006870 <USB_FlushTxFifo>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f91f 	bl	80068d8 <USB_FlushRxFifo>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	461a      	mov	r2, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	461a      	mov	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	461a      	mov	r2, r3
 80066c4:	2300      	movs	r3, #0
 80066c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	e043      	b.n	8006756 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e4:	d118      	bne.n	8006718 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e013      	b.n	800672a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	461a      	mov	r2, r3
 8006710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e008      	b.n	800672a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	461a      	mov	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006748:	461a      	mov	r2, r3
 800674a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800674e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	3301      	adds	r3, #1
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3b7      	bcc.n	80066ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	e043      	b.n	80067ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677a:	d118      	bne.n	80067ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e013      	b.n	80067c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e008      	b.n	80067c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	461a      	mov	r2, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	461a      	mov	r2, r3
 80067ce:	2300      	movs	r3, #0
 80067d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3301      	adds	r3, #1
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d3b7      	bcc.n	8006764 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006806:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006814:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f043 0210 	orr.w	r2, r3, #16
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <USB_DevInit+0x2b4>)
 800682e:	4313      	orrs	r3, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f043 0208 	orr.w	r2, r3, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d105      	bne.n	8006858 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699a      	ldr	r2, [r3, #24]
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <USB_DevInit+0x2b8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006858:	7dfb      	ldrb	r3, [r7, #23]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006864:	b004      	add	sp, #16
 8006866:	4770      	bx	lr
 8006868:	803c3800 	.word	0x803c3800
 800686c:	40000004 	.word	0x40000004

08006870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <USB_FlushTxFifo+0x64>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e01b      	b.n	80068c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	daf2      	bge.n	800687e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	019b      	lsls	r3, r3, #6
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <USB_FlushTxFifo+0x64>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e006      	b.n	80068c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d0f0      	beq.n	80068a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a11      	ldr	r2, [pc, #68]	; (8006934 <USB_FlushRxFifo+0x5c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e018      	b.n	8006928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	daf2      	bge.n	80068e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2210      	movs	r2, #16
 8006906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a08      	ldr	r2, [pc, #32]	; (8006934 <USB_FlushRxFifo+0x5c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e006      	b.n	8006928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b10      	cmp	r3, #16
 8006924:	d0f0      	beq.n	8006908 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	00030d40 	.word	0x00030d40

08006938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006984:	f023 0303 	bic.w	r3, r3, #3
 8006988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0301 	and.w	r3, r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <USB_CoreReset+0x64>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e01b      	b.n	8006a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	daf2      	bge.n	80069d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <USB_CoreReset+0x64>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d901      	bls.n	8006a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e006      	b.n	8006a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d0f0      	beq.n	80069fe <USB_CoreReset+0x36>

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	00030d40 	.word	0x00030d40

08006a30 <__NVIC_SetPriority>:
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	6039      	str	r1, [r7, #0]
 8006a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db0a      	blt.n	8006a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	490c      	ldr	r1, [pc, #48]	; (8006a7c <__NVIC_SetPriority+0x4c>)
 8006a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a4e:	0112      	lsls	r2, r2, #4
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	440b      	add	r3, r1
 8006a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a58:	e00a      	b.n	8006a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4908      	ldr	r1, [pc, #32]	; (8006a80 <__NVIC_SetPriority+0x50>)
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	3b04      	subs	r3, #4
 8006a68:	0112      	lsls	r2, r2, #4
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	761a      	strb	r2, [r3, #24]
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	e000e100 	.word	0xe000e100
 8006a80:	e000ed00 	.word	0xe000ed00

08006a84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <SysTick_Handler+0x1c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a8c:	f002 f962 	bl	8008d54 <xTaskGetSchedulerState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d001      	beq.n	8006a9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a96:	f000 fd9f 	bl	80075d8 <xPortSysTickHandler>
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010

08006aa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	f06f 0004 	mvn.w	r0, #4
 8006aae:	f7ff ffbf 	bl	8006a30 <__NVIC_SetPriority>
#endif
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006aca:	f06f 0305 	mvn.w	r3, #5
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	e00c      	b.n	8006aec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <osKernelInitialize+0x44>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <osKernelInitialize+0x44>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	e002      	b.n	8006aec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aec:	687b      	ldr	r3, [r7, #4]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	2400083c 	.word	0x2400083c

08006b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b06:	f3ef 8305 	mrs	r3, IPSR
 8006b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b12:	f06f 0305 	mvn.w	r3, #5
 8006b16:	607b      	str	r3, [r7, #4]
 8006b18:	e010      	b.n	8006b3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <osKernelStart+0x48>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d109      	bne.n	8006b36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b22:	f7ff ffbf 	bl	8006aa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <osKernelStart+0x48>)
 8006b28:	2202      	movs	r2, #2
 8006b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b2c:	f001 fca6 	bl	800847c <vTaskStartScheduler>
      stat = osOK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	e002      	b.n	8006b3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b3c:	687b      	ldr	r3, [r7, #4]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	2400083c 	.word	0x2400083c

08006b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08e      	sub	sp, #56	; 0x38
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5c:	f3ef 8305 	mrs	r3, IPSR
 8006b60:	617b      	str	r3, [r7, #20]
  return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d17e      	bne.n	8006c66 <osThreadNew+0x11a>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d07b      	beq.n	8006c66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b72:	2318      	movs	r3, #24
 8006b74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d045      	beq.n	8006c12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <osThreadNew+0x48>
        name = attr->name;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <osThreadNew+0x6e>
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b38      	cmp	r3, #56	; 0x38
 8006bac:	d805      	bhi.n	8006bba <osThreadNew+0x6e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <osThreadNew+0x72>
        return (NULL);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e054      	b.n	8006c68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <osThreadNew+0xa8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b5b      	cmp	r3, #91	; 0x5b
 8006bdc:	d90a      	bls.n	8006bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <osThreadNew+0xa8>
        mem = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e010      	b.n	8006c16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <osThreadNew+0xca>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d108      	bne.n	8006c16 <osThreadNew+0xca>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <osThreadNew+0xca>
          mem = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e001      	b.n	8006c16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d110      	bne.n	8006c3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c24:	9202      	str	r2, [sp, #8]
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 fa4c 	bl	80080d0 <xTaskCreateStatic>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	e013      	b.n	8006c66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d110      	bne.n	8006c66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f107 0310 	add.w	r3, r7, #16
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f001 fa97 	bl	800818a <xTaskCreate>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d001      	beq.n	8006c66 <osThreadNew+0x11a>
            hTask = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c66:	693b      	ldr	r3, [r7, #16]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3728      	adds	r7, #40	; 0x28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c78:	f3ef 8305 	mrs	r3, IPSR
 8006c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <osDelay+0x1c>
    stat = osErrorISR;
 8006c84:	f06f 0305 	mvn.w	r3, #5
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e007      	b.n	8006c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fbbc 	bl	8008414 <vTaskDelay>
    }
  }

  return (stat);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a06      	ldr	r2, [pc, #24]	; (8006cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8006cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2280      	movs	r2, #128	; 0x80
 8006cc4:	601a      	str	r2, [r3, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	24000840 	.word	0x24000840
 8006cd8:	2400089c 	.word	0x2400089c

08006cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4a06      	ldr	r2, [pc, #24]	; (8006d0c <vApplicationGetTimerTaskMemory+0x30>)
 8006cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cfa:	601a      	str	r2, [r3, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	24000a9c 	.word	0x24000a9c
 8006d0c:	24000af8 	.word	0x24000af8

08006d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d1c:	f001 fc14 	bl	8008548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d20:	4b5d      	ldr	r3, [pc, #372]	; (8006e98 <pvPortMalloc+0x188>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d28:	f000 f924 	bl	8006f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d2c:	4b5b      	ldr	r3, [pc, #364]	; (8006e9c <pvPortMalloc+0x18c>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 8093 	bne.w	8006e60 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01d      	beq.n	8006d7c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d40:	2208      	movs	r2, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	3308      	adds	r3, #8
 8006d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d06e      	beq.n	8006e60 <pvPortMalloc+0x150>
 8006d82:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <pvPortMalloc+0x190>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d869      	bhi.n	8006e60 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d8c:	4b45      	ldr	r3, [pc, #276]	; (8006ea4 <pvPortMalloc+0x194>)
 8006d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d90:	4b44      	ldr	r3, [pc, #272]	; (8006ea4 <pvPortMalloc+0x194>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d96:	e004      	b.n	8006da2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <pvPortMalloc+0xa4>
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1f1      	bne.n	8006d98 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006db4:	4b38      	ldr	r3, [pc, #224]	; (8006e98 <pvPortMalloc+0x188>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d050      	beq.n	8006e60 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	4413      	add	r3, r2
 8006dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	2308      	movs	r3, #8
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d91f      	bls.n	8006e20 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <pvPortMalloc+0xf8>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	613b      	str	r3, [r7, #16]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e1a:	69b8      	ldr	r0, [r7, #24]
 8006e1c:	f000 f90e 	bl	800703c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e20:	4b1f      	ldr	r3, [pc, #124]	; (8006ea0 <pvPortMalloc+0x190>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <pvPortMalloc+0x190>)
 8006e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <pvPortMalloc+0x190>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <pvPortMalloc+0x198>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d203      	bcs.n	8006e42 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <pvPortMalloc+0x190>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <pvPortMalloc+0x198>)
 8006e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <pvPortMalloc+0x18c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <pvPortMalloc+0x19c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <pvPortMalloc+0x19c>)
 8006e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e60:	f001 fb80 	bl	8008564 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006e6a:	f7f9 fcac 	bl	80007c6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <pvPortMalloc+0x17e>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <pvPortMalloc+0x17c>
	return pvReturn;
 8006e8e:	69fb      	ldr	r3, [r7, #28]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	2401e3c0 	.word	0x2401e3c0
 8006e9c:	2401e3d4 	.word	0x2401e3d4
 8006ea0:	2401e3c4 	.word	0x2401e3c4
 8006ea4:	2401e3b8 	.word	0x2401e3b8
 8006ea8:	2401e3c8 	.word	0x2401e3c8
 8006eac:	2401e3cc 	.word	0x2401e3cc

08006eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04d      	beq.n	8006f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	425b      	negs	r3, r3
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4413      	add	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <vPortFree+0xb8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <vPortFree+0x44>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	60fb      	str	r3, [r7, #12]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <vPortFree+0x62>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60bb      	str	r3, [r7, #8]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <vPortFree+0xb8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01e      	beq.n	8006f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d11a      	bne.n	8006f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <vPortFree+0xb8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f38:	f001 fb06 	bl	8008548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <vPortFree+0xbc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <vPortFree+0xbc>)
 8006f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f000 f876 	bl	800703c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <vPortFree+0xc0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <vPortFree+0xc0>)
 8006f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f5a:	f001 fb03 	bl	8008564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	2401e3d4 	.word	0x2401e3d4
 8006f6c:	2401e3c4 	.word	0x2401e3c4
 8006f70:	2401e3d0 	.word	0x2401e3d0

08006f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f7a:	4b29      	ldr	r3, [pc, #164]	; (8007020 <prvHeapInit+0xac>)
 8006f7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f7e:	4b29      	ldr	r3, [pc, #164]	; (8007024 <prvHeapInit+0xb0>)
 8006f80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3307      	adds	r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 0307 	bic.w	r3, r3, #7
 8006f98:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	4a20      	ldr	r2, [pc, #128]	; (8007024 <prvHeapInit+0xb0>)
 8006fa2:	4413      	add	r3, r2
 8006fa4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006faa:	4a1f      	ldr	r2, [pc, #124]	; (8007028 <prvHeapInit+0xb4>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <prvHeapInit+0xb4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4413      	add	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f023 0307 	bic.w	r3, r3, #7
 8006fcc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	; (800702c <prvHeapInit+0xb8>)
 8006fd2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <prvHeapInit+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fdc:	4b13      	ldr	r3, [pc, #76]	; (800702c <prvHeapInit+0xb8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	1ad2      	subs	r2, r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff2:	4b0e      	ldr	r3, [pc, #56]	; (800702c <prvHeapInit+0xb8>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	; (8007030 <prvHeapInit+0xbc>)
 8007000:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4a0b      	ldr	r2, [pc, #44]	; (8007034 <prvHeapInit+0xc0>)
 8007008:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <prvHeapInit+0xc4>)
 800700c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007010:	601a      	str	r2, [r3, #0]
}
 8007012:	bf00      	nop
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	0001d4c0 	.word	0x0001d4c0
 8007024:	24000ef8 	.word	0x24000ef8
 8007028:	2401e3b8 	.word	0x2401e3b8
 800702c:	2401e3c0 	.word	0x2401e3c0
 8007030:	2401e3c8 	.word	0x2401e3c8
 8007034:	2401e3c4 	.word	0x2401e3c4
 8007038:	2401e3d4 	.word	0x2401e3d4

0800703c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007044:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <prvInsertBlockIntoFreeList+0xac>)
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e002      	b.n	8007050 <prvInsertBlockIntoFreeList+0x14>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d8f7      	bhi.n	800704a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d108      	bne.n	800707e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	441a      	add	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	441a      	add	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d118      	bne.n	80070c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <prvInsertBlockIntoFreeList+0xb0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d00d      	beq.n	80070ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	441a      	add	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e008      	b.n	80070cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <prvInsertBlockIntoFreeList+0xb0>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e003      	b.n	80070cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d002      	beq.n	80070da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	2401e3b8 	.word	0x2401e3b8
 80070ec:	2401e3c0 	.word	0x2401e3c0

080070f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0208 	add.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f04f 32ff 	mov.w	r2, #4294967295
 8007108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f103 0208 	add.w	r2, r3, #8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f103 0208 	add.w	r2, r3, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d103      	bne.n	80071b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e00c      	b.n	80071cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3308      	adds	r3, #8
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e002      	b.n	80071c0 <vListInsert+0x2e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d2f6      	bcs.n	80071ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6892      	ldr	r2, [r2, #8]
 800721a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6852      	ldr	r2, [r2, #4]
 8007224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d103      	bne.n	8007238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3b04      	subs	r3, #4
 8007268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b04      	subs	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3b04      	subs	r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007288:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <pxPortInitialiseStack+0x64>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3b14      	subs	r3, #20
 8007292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b04      	subs	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f06f 0202 	mvn.w	r2, #2
 80072a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3b20      	subs	r3, #32
 80072ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	080072c1 	.word	0x080072c1

080072c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <prvTaskExitError+0x54>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d00a      	beq.n	80072ea <prvTaskExitError+0x2a>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <prvTaskExitError+0x28>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	60bb      	str	r3, [r7, #8]
}
 80072fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072fe:	bf00      	nop
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0fc      	beq.n	8007300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	24000010 	.word	0x24000010
	...

08007320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <pxCurrentTCBConst2>)
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	6808      	ldr	r0, [r1, #0]
 8007326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f380 8809 	msr	PSP, r0
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f380 8811 	msr	BASEPRI, r0
 800733a:	4770      	bx	lr
 800733c:	f3af 8000 	nop.w

08007340 <pxCurrentTCBConst2>:
 8007340:	2401e420 	.word	0x2401e420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007348:	4808      	ldr	r0, [pc, #32]	; (800736c <prvPortStartFirstTask+0x24>)
 800734a:	6800      	ldr	r0, [r0, #0]
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	f380 8808 	msr	MSP, r0
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f380 8814 	msr	CONTROL, r0
 800735a:	b662      	cpsie	i
 800735c:	b661      	cpsie	f
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	df00      	svc	0
 8007368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800736a:	bf00      	nop
 800736c:	e000ed08 	.word	0xe000ed08

08007370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007376:	4b46      	ldr	r3, [pc, #280]	; (8007490 <xPortStartScheduler+0x120>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a46      	ldr	r2, [pc, #280]	; (8007494 <xPortStartScheduler+0x124>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10a      	bne.n	8007396 <xPortStartScheduler+0x26>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	613b      	str	r3, [r7, #16]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007396:	4b3e      	ldr	r3, [pc, #248]	; (8007490 <xPortStartScheduler+0x120>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a3f      	ldr	r2, [pc, #252]	; (8007498 <xPortStartScheduler+0x128>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d10a      	bne.n	80073b6 <xPortStartScheduler+0x46>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073b6:	4b39      	ldr	r3, [pc, #228]	; (800749c <xPortStartScheduler+0x12c>)
 80073b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	22ff      	movs	r2, #255	; 0xff
 80073c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	4b31      	ldr	r3, [pc, #196]	; (80074a0 <xPortStartScheduler+0x130>)
 80073dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <xPortStartScheduler+0x134>)
 80073e0:	2207      	movs	r2, #7
 80073e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073e4:	e009      	b.n	80073fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073e6:	4b2f      	ldr	r3, [pc, #188]	; (80074a4 <xPortStartScheduler+0x134>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	4a2d      	ldr	r2, [pc, #180]	; (80074a4 <xPortStartScheduler+0x134>)
 80073ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d0ef      	beq.n	80073e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007406:	4b27      	ldr	r3, [pc, #156]	; (80074a4 <xPortStartScheduler+0x134>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1c3 0307 	rsb	r3, r3, #7
 800740e:	2b04      	cmp	r3, #4
 8007410:	d00a      	beq.n	8007428 <xPortStartScheduler+0xb8>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60bb      	str	r3, [r7, #8]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007428:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <xPortStartScheduler+0x134>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <xPortStartScheduler+0x134>)
 8007430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <xPortStartScheduler+0x134>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800743a:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <xPortStartScheduler+0x134>)
 800743c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007446:	4b18      	ldr	r3, [pc, #96]	; (80074a8 <xPortStartScheduler+0x138>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <xPortStartScheduler+0x138>)
 800744c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <xPortStartScheduler+0x138>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a14      	ldr	r2, [pc, #80]	; (80074a8 <xPortStartScheduler+0x138>)
 8007458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800745c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800745e:	f000 f8dd 	bl	800761c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007462:	4b12      	ldr	r3, [pc, #72]	; (80074ac <xPortStartScheduler+0x13c>)
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007468:	f000 f8fc 	bl	8007664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800746c:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <xPortStartScheduler+0x140>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <xPortStartScheduler+0x140>)
 8007472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007478:	f7ff ff66 	bl	8007348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800747c:	f001 f9da 	bl	8008834 <vTaskSwitchContext>
	prvTaskExitError();
 8007480:	f7ff ff1e 	bl	80072c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	e000ed00 	.word	0xe000ed00
 8007494:	410fc271 	.word	0x410fc271
 8007498:	410fc270 	.word	0x410fc270
 800749c:	e000e400 	.word	0xe000e400
 80074a0:	2401e3d8 	.word	0x2401e3d8
 80074a4:	2401e3dc 	.word	0x2401e3dc
 80074a8:	e000ed20 	.word	0xe000ed20
 80074ac:	24000010 	.word	0x24000010
 80074b0:	e000ef34 	.word	0xe000ef34

080074b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
}
 80074cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074ce:	4b0f      	ldr	r3, [pc, #60]	; (800750c <vPortEnterCritical+0x58>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a0d      	ldr	r2, [pc, #52]	; (800750c <vPortEnterCritical+0x58>)
 80074d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074d8:	4b0c      	ldr	r3, [pc, #48]	; (800750c <vPortEnterCritical+0x58>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10f      	bne.n	8007500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <vPortEnterCritical+0x5c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <vPortEnterCritical+0x4c>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	603b      	str	r3, [r7, #0]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vPortEnterCritical+0x4a>
	}
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	24000010 	.word	0x24000010
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <vPortExitCritical+0x50>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <vPortExitCritical+0x24>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	607b      	str	r3, [r7, #4]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <vPortExitCritical+0x50>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <vPortExitCritical+0x50>)
 8007540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007542:	4b08      	ldr	r3, [pc, #32]	; (8007564 <vPortExitCritical+0x50>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d105      	bne.n	8007556 <vPortExitCritical+0x42>
 800754a:	2300      	movs	r3, #0
 800754c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	24000010 	.word	0x24000010
	...

08007570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007570:	f3ef 8009 	mrs	r0, PSP
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <pxCurrentTCBConst>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f01e 0f10 	tst.w	lr, #16
 8007580:	bf08      	it	eq
 8007582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	6010      	str	r0, [r2, #0]
 800758c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007594:	f380 8811 	msr	BASEPRI, r0
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f001 f948 	bl	8008834 <vTaskSwitchContext>
 80075a4:	f04f 0000 	mov.w	r0, #0
 80075a8:	f380 8811 	msr	BASEPRI, r0
 80075ac:	bc09      	pop	{r0, r3}
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	6808      	ldr	r0, [r1, #0]
 80075b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b6:	f01e 0f10 	tst.w	lr, #16
 80075ba:	bf08      	it	eq
 80075bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075c0:	f380 8809 	msr	PSP, r0
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst>:
 80075d0:	2401e420 	.word	0x2401e420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	607b      	str	r3, [r7, #4]
}
 80075f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075f2:	f001 f865 	bl	80086c0 <xTaskIncrementTick>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <xPortSysTickHandler+0x40>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f383 8811 	msr	BASEPRI, r3
}
 800760e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <vPortSetupTimerInterrupt+0x38>)
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <vPortSetupTimerInterrupt+0x3c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <vPortSetupTimerInterrupt+0x40>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	099b      	lsrs	r3, r3, #6
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <vPortSetupTimerInterrupt+0x44>)
 800763a:	3b01      	subs	r3, #1
 800763c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800763e:	4b04      	ldr	r3, [pc, #16]	; (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007640:	2207      	movs	r2, #7
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	e000e010 	.word	0xe000e010
 8007654:	e000e018 	.word	0xe000e018
 8007658:	24000000 	.word	0x24000000
 800765c:	10624dd3 	.word	0x10624dd3
 8007660:	e000e014 	.word	0xe000e014

08007664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007674 <vPortEnableVFP+0x10>
 8007668:	6801      	ldr	r1, [r0, #0]
 800766a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800766e:	6001      	str	r1, [r0, #0]
 8007670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007672:	bf00      	nop
 8007674:	e000ed88 	.word	0xe000ed88

08007678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800767e:	f3ef 8305 	mrs	r3, IPSR
 8007682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d914      	bls.n	80076b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <vPortValidateInterruptPriority+0x70>)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007694:	4b15      	ldr	r3, [pc, #84]	; (80076ec <vPortValidateInterruptPriority+0x74>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	7afa      	ldrb	r2, [r7, #11]
 800769a:	429a      	cmp	r2, r3
 800769c:	d20a      	bcs.n	80076b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <vPortValidateInterruptPriority+0x78>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <vPortValidateInterruptPriority+0x7c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d90a      	bls.n	80076da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	603b      	str	r3, [r7, #0]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <vPortValidateInterruptPriority+0x60>
	}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	e000e3f0 	.word	0xe000e3f0
 80076ec:	2401e3d8 	.word	0x2401e3d8
 80076f0:	e000ed0c 	.word	0xe000ed0c
 80076f4:	2401e3dc 	.word	0x2401e3dc

080076f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xQueueGenericReset+0x2a>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	60bb      	str	r3, [r7, #8]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007722:	f7ff fec7 	bl	80074b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007732:	fb01 f303 	mul.w	r3, r1, r3
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007752:	3b01      	subs	r3, #1
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	441a      	add	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	22ff      	movs	r2, #255	; 0xff
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d114      	bne.n	80077a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01a      	beq.n	80077b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3310      	adds	r3, #16
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f927 	bl	80089d8 <xTaskRemoveFromEventList>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d012      	beq.n	80077b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <xQueueGenericReset+0xcc>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	e009      	b.n	80077b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3310      	adds	r3, #16
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fca2 	bl	80070f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3324      	adds	r3, #36	; 0x24
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fc9d 	bl	80070f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077b6:	f7ff fead 	bl	8007514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077ba:	2301      	movs	r3, #1
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08e      	sub	sp, #56	; 0x38
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <xQueueGenericCreateStatic+0x52>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <xQueueGenericCreateStatic+0x56>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <xQueueGenericCreateStatic+0x58>
 800781e:	2300      	movs	r3, #0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	623b      	str	r3, [r7, #32]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <xQueueGenericCreateStatic+0x7e>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <xQueueGenericCreateStatic+0x82>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <xQueueGenericCreateStatic+0x84>
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	61fb      	str	r3, [r7, #28]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007866:	2350      	movs	r3, #80	; 0x50
 8007868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b50      	cmp	r3, #80	; 0x50
 800786e:	d00a      	beq.n	8007886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	61bb      	str	r3, [r7, #24]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00d      	beq.n	80078ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800789a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	4613      	mov	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f805 	bl	80078b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3730      	adds	r7, #48	; 0x30
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e002      	b.n	80078da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078e6:	2101      	movs	r1, #1
 80078e8:	69b8      	ldr	r0, [r7, #24]
 80078ea:	f7ff ff05 	bl	80076f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800790e:	2300      	movs	r3, #0
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xQueueGenericSend+0x32>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <xQueueGenericSend+0x40>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <xQueueGenericSend+0x44>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <xQueueGenericSend+0x46>
 8007944:	2300      	movs	r3, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <xQueueGenericSend+0x60>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d103      	bne.n	800796e <xQueueGenericSend+0x6e>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <xQueueGenericSend+0x72>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericSend+0x74>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xQueueGenericSend+0x8e>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	623b      	str	r3, [r7, #32]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800798e:	f001 f9e1 	bl	8008d54 <xTaskGetSchedulerState>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <xQueueGenericSend+0x9e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSend+0xa2>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSend+0xa4>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueGenericSend+0xbe>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	61fb      	str	r3, [r7, #28]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079be:	f7ff fd79 	bl	80074b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <xQueueGenericSend+0xd4>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d129      	bne.n	8007a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079da:	f000 fa0b 	bl	8007df4 <prvCopyDataToQueue>
 80079de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d010      	beq.n	8007a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fff3 	bl	80089d8 <xTaskRemoveFromEventList>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d013      	beq.n	8007a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079f8:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <xQueueGenericSend+0x1f8>)
 80079fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	e00a      	b.n	8007a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a10:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <xQueueGenericSend+0x1f8>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a20:	f7ff fd78 	bl	8007514 <vPortExitCritical>
				return pdPASS;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e063      	b.n	8007af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a2e:	f7ff fd71 	bl	8007514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	e05c      	b.n	8007af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a3c:	f107 0314 	add.w	r3, r7, #20
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 f82d 	bl	8008aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a46:	2301      	movs	r3, #1
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a4a:	f7ff fd63 	bl	8007514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a4e:	f000 fd7b 	bl	8008548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a52:	f7ff fd2f 	bl	80074b4 <vPortEnterCritical>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a5c:	b25b      	sxtb	r3, r3
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d103      	bne.n	8007a6c <xQueueGenericSend+0x16c>
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a72:	b25b      	sxtb	r3, r3
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d103      	bne.n	8007a82 <xQueueGenericSend+0x182>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a82:	f7ff fd47 	bl	8007514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a86:	1d3a      	adds	r2, r7, #4
 8007a88:	f107 0314 	add.w	r3, r7, #20
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 f81c 	bl	8008acc <xTaskCheckForTimeOut>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d124      	bne.n	8007ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a9c:	f000 faa2 	bl	8007fe4 <prvIsQueueFull>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d018      	beq.n	8007ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	3310      	adds	r3, #16
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 ff42 	bl	8008938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab6:	f000 fa2d 	bl	8007f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007aba:	f000 fd53 	bl	8008564 <xTaskResumeAll>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f47f af7c 	bne.w	80079be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <xQueueGenericSend+0x1f8>)
 8007ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	e772      	b.n	80079be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ada:	f000 fa1b 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ade:	f000 fd41 	bl	8008564 <xTaskResumeAll>
 8007ae2:	e76c      	b.n	80079be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae6:	f000 fa15 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aea:	f000 fd3b 	bl	8008564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3738      	adds	r7, #56	; 0x38
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b090      	sub	sp, #64	; 0x40
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d103      	bne.n	8007b38 <xQueueGenericSendFromISR+0x3c>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <xQueueGenericSendFromISR+0x40>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <xQueueGenericSendFromISR+0x42>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d103      	bne.n	8007b66 <xQueueGenericSendFromISR+0x6a>
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <xQueueGenericSendFromISR+0x6e>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueGenericSendFromISR+0x70>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	623b      	str	r3, [r7, #32]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b86:	f7ff fd77 	bl	8007678 <vPortValidateInterruptPriority>
	__asm volatile
 8007b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	61fa      	str	r2, [r7, #28]
 8007ba0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <xQueueGenericSendFromISR+0xbc>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d12f      	bne.n	8007c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bce:	f000 f911 	bl	8007df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d112      	bne.n	8007c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d016      	beq.n	8007c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fef5 	bl	80089d8 <xTaskRemoveFromEventList>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00b      	beq.n	8007c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e007      	b.n	8007c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c06:	3301      	adds	r3, #1
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	b25a      	sxtb	r2, r3
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c12:	2301      	movs	r3, #1
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c16:	e001      	b.n	8007c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f383 8811 	msr	BASEPRI, r3
}
 8007c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3740      	adds	r7, #64	; 0x40
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08c      	sub	sp, #48	; 0x30
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <xQueueReceive+0x30>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	623b      	str	r3, [r7, #32]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <xQueueReceive+0x3e>
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <xQueueReceive+0x42>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueReceive+0x44>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueReceive+0x5e>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	61fb      	str	r3, [r7, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c92:	f001 f85f 	bl	8008d54 <xTaskGetSchedulerState>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <xQueueReceive+0x6e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueReceive+0x72>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueReceive+0x74>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueReceive+0x8e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61bb      	str	r3, [r7, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc2:	f7ff fbf7 	bl	80074b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01f      	beq.n	8007d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f000 f8f7 	bl	8007ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00f      	beq.n	8007d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	3310      	adds	r3, #16
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fe72 	bl	80089d8 <xTaskRemoveFromEventList>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cfa:	4b3d      	ldr	r3, [pc, #244]	; (8007df0 <xQueueReceive+0x1bc>)
 8007cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d0a:	f7ff fc03 	bl	8007514 <vPortExitCritical>
				return pdPASS;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e069      	b.n	8007de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d18:	f7ff fbfc 	bl	8007514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e062      	b.n	8007de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d26:	f107 0310 	add.w	r3, r7, #16
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 feb8 	bl	8008aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d34:	f7ff fbee 	bl	8007514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d38:	f000 fc06 	bl	8008548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d3c:	f7ff fbba 	bl	80074b4 <vPortEnterCritical>
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d103      	bne.n	8007d56 <xQueueReceive+0x122>
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d5c:	b25b      	sxtb	r3, r3
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d103      	bne.n	8007d6c <xQueueReceive+0x138>
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d6c:	f7ff fbd2 	bl	8007514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d70:	1d3a      	adds	r2, r7, #4
 8007d72:	f107 0310 	add.w	r3, r7, #16
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fea7 	bl	8008acc <xTaskCheckForTimeOut>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d123      	bne.n	8007dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d86:	f000 f917 	bl	8007fb8 <prvIsQueueEmpty>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d017      	beq.n	8007dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	3324      	adds	r3, #36	; 0x24
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fdcd 	bl	8008938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da0:	f000 f8b8 	bl	8007f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007da4:	f000 fbde 	bl	8008564 <xTaskResumeAll>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d189      	bne.n	8007cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xQueueReceive+0x1bc>)
 8007db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	e780      	b.n	8007cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc2:	f000 f8a7 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dc6:	f000 fbcd 	bl	8008564 <xTaskResumeAll>
 8007dca:	e77a      	b.n	8007cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dce:	f000 f8a1 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dd2:	f000 fbc7 	bl	8008564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd8:	f000 f8ee 	bl	8007fb8 <prvIsQueueEmpty>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f43f af6f 	beq.w	8007cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d14d      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 ffb6 	bl	8008d90 <xTaskPriorityDisinherit>
 8007e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	e043      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d119      	bne.n	8007e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6858      	ldr	r0, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	f001 fc9e 	bl	8009780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d32b      	bcc.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	e026      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68d8      	ldr	r0, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	461a      	mov	r2, r3
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	f001 fc84 	bl	8009780 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	425b      	negs	r3, r3
 8007e82:	441a      	add	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d207      	bcs.n	8007ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	425b      	negs	r3, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d105      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	441a      	add	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d303      	bcc.n	8007efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68d9      	ldr	r1, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	6838      	ldr	r0, [r7, #0]
 8007f08:	f001 fc3a 	bl	8009780 <memcpy>
	}
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f1c:	f7ff faca 	bl	80074b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f28:	e011      	b.n	8007f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d012      	beq.n	8007f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3324      	adds	r3, #36	; 0x24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fd4e 	bl	80089d8 <xTaskRemoveFromEventList>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f42:	f000 fe25 	bl	8008b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dce9      	bgt.n	8007f2a <prvUnlockQueue+0x16>
 8007f56:	e000      	b.n	8007f5a <prvUnlockQueue+0x46>
					break;
 8007f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	22ff      	movs	r2, #255	; 0xff
 8007f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f62:	f7ff fad7 	bl	8007514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f66:	f7ff faa5 	bl	80074b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f72:	e011      	b.n	8007f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3310      	adds	r3, #16
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fd29 	bl	80089d8 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f8c:	f000 fe00 	bl	8008b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dce9      	bgt.n	8007f74 <prvUnlockQueue+0x60>
 8007fa0:	e000      	b.n	8007fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22ff      	movs	r2, #255	; 0xff
 8007fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007fac:	f7ff fab2 	bl	8007514 <vPortExitCritical>
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc0:	f7ff fa78 	bl	80074b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e001      	b.n	8007fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd6:	f7ff fa9d 	bl	8007514 <vPortExitCritical>

	return xReturn;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fec:	f7ff fa62 	bl	80074b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d102      	bne.n	8008002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e001      	b.n	8008006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008006:	f7ff fa85 	bl	8007514 <vPortExitCritical>

	return xReturn;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e014      	b.n	800804e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008024:	4a0f      	ldr	r2, [pc, #60]	; (8008064 <vQueueAddToRegistry+0x50>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008030:	490c      	ldr	r1, [pc, #48]	; (8008064 <vQueueAddToRegistry+0x50>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <vQueueAddToRegistry+0x50>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008046:	e006      	b.n	8008056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b07      	cmp	r3, #7
 8008052:	d9e7      	bls.n	8008024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	2401e3e0 	.word	0x2401e3e0

08008068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008078:	f7ff fa1c 	bl	80074b4 <vPortEnterCritical>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008082:	b25b      	sxtb	r3, r3
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d103      	bne.n	8008092 <vQueueWaitForMessageRestricted+0x2a>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008098:	b25b      	sxtb	r3, r3
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d103      	bne.n	80080a8 <vQueueWaitForMessageRestricted+0x40>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a8:	f7ff fa34 	bl	8007514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	3324      	adds	r3, #36	; 0x24
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fc5f 	bl	8008980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080c2:	6978      	ldr	r0, [r7, #20]
 80080c4:	f7ff ff26 	bl	8007f14 <prvUnlockQueue>
	}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xTaskCreateStatic+0x46>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	61fb      	str	r3, [r7, #28]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008116:	235c      	movs	r3, #92	; 0x5c
 8008118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b5c      	cmp	r3, #92	; 0x5c
 800811e:	d00a      	beq.n	8008136 <xTaskCreateStatic+0x66>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61bb      	str	r3, [r7, #24]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01e      	beq.n	800817c <xTaskCreateStatic+0xac>
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01b      	beq.n	800817c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008156:	2300      	movs	r3, #0
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f850 	bl	8008214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008176:	f000 f8dd 	bl	8008334 <prvAddNewTaskToReadyList>
 800817a:	e001      	b.n	8008180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008180:	697b      	ldr	r3, [r7, #20]
	}
 8008182:	4618      	mov	r0, r3
 8008184:	3728      	adds	r7, #40	; 0x28
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08c      	sub	sp, #48	; 0x30
 800818e:	af04      	add	r7, sp, #16
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fdb6 	bl	8006d10 <pvPortMalloc>
 80081a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081ac:	205c      	movs	r0, #92	; 0x5c
 80081ae:	f7fe fdaf 	bl	8006d10 <pvPortMalloc>
 80081b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
 80081c0:	e005      	b.n	80081ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f7fe fe74 	bl	8006eb0 <vPortFree>
 80081c8:	e001      	b.n	80081ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	2300      	movs	r3, #0
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	9302      	str	r3, [sp, #8]
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f80e 	bl	8008214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081f8:	69f8      	ldr	r0, [r7, #28]
 80081fa:	f000 f89b 	bl	8008334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081fe:	2301      	movs	r3, #1
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	e002      	b.n	800820a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800820a:	69bb      	ldr	r3, [r7, #24]
	}
 800820c:	4618      	mov	r0, r3
 800820e:	3720      	adds	r7, #32
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	461a      	mov	r2, r3
 800822c:	21a5      	movs	r1, #165	; 0xa5
 800822e:	f001 fab5 	bl	800979c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800823c:	440b      	add	r3, r1
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	617b      	str	r3, [r7, #20]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01f      	beq.n	80082b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e012      	b.n	800829e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	7819      	ldrb	r1, [r3, #0]
 8008280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	3334      	adds	r3, #52	; 0x34
 8008288:	460a      	mov	r2, r1
 800828a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	3301      	adds	r3, #1
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b0f      	cmp	r3, #15
 80082a2:	d9e9      	bls.n	8008278 <prvInitialiseNewTask+0x64>
 80082a4:	e000      	b.n	80082a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80082a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082b0:	e003      	b.n	80082ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	2b37      	cmp	r3, #55	; 0x37
 80082be:	d901      	bls.n	80082c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082c0:	2337      	movs	r3, #55	; 0x37
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	2200      	movs	r2, #0
 80082d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	3304      	adds	r3, #4
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe ff28 	bl	8007130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	3318      	adds	r3, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe ff23 	bl	8007130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	2200      	movs	r2, #0
 8008304:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	68f9      	ldr	r1, [r7, #12]
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f7fe ffa0 	bl	8007258 <pxPortInitialiseStack>
 8008318:	4602      	mov	r2, r0
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800832a:	bf00      	nop
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800833c:	f7ff f8ba 	bl	80074b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <prvAddNewTaskToReadyList+0xc4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a2c      	ldr	r2, [pc, #176]	; (80083f8 <prvAddNewTaskToReadyList+0xc4>)
 8008348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800834a:	4b2c      	ldr	r3, [pc, #176]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008352:	4a2a      	ldr	r2, [pc, #168]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008358:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <prvAddNewTaskToReadyList+0xc4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d110      	bne.n	8008382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008360:	f000 fc3a 	bl	8008bd8 <prvInitialiseTaskLists>
 8008364:	e00d      	b.n	8008382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008366:	4b26      	ldr	r3, [pc, #152]	; (8008400 <prvAddNewTaskToReadyList+0xcc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800836e:	4b23      	ldr	r3, [pc, #140]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	429a      	cmp	r2, r3
 800837a:	d802      	bhi.n	8008382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800837c:	4a1f      	ldr	r2, [pc, #124]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008382:	4b20      	ldr	r3, [pc, #128]	; (8008404 <prvAddNewTaskToReadyList+0xd0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <prvAddNewTaskToReadyList+0xd0>)
 800838a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800838c:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <prvAddNewTaskToReadyList+0xd0>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <prvAddNewTaskToReadyList+0xd4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d903      	bls.n	80083a8 <prvAddNewTaskToReadyList+0x74>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	4a18      	ldr	r2, [pc, #96]	; (8008408 <prvAddNewTaskToReadyList+0xd4>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <prvAddNewTaskToReadyList+0xd8>)
 80083b6:	441a      	add	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f7fe fec3 	bl	800714a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083c4:	f7ff f8a6 	bl	8007514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <prvAddNewTaskToReadyList+0xcc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00e      	beq.n	80083ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	429a      	cmp	r2, r3
 80083dc:	d207      	bcs.n	80083ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <prvAddNewTaskToReadyList+0xdc>)
 80083e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	2401e8f4 	.word	0x2401e8f4
 80083fc:	2401e420 	.word	0x2401e420
 8008400:	2401e900 	.word	0x2401e900
 8008404:	2401e910 	.word	0x2401e910
 8008408:	2401e8fc 	.word	0x2401e8fc
 800840c:	2401e424 	.word	0x2401e424
 8008410:	e000ed04 	.word	0xe000ed04

08008414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d017      	beq.n	8008456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <vTaskDelay+0x60>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <vTaskDelay+0x30>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60bb      	str	r3, [r7, #8]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008444:	f000 f880 	bl	8008548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fd0e 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008450:	f000 f888 	bl	8008564 <xTaskResumeAll>
 8008454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d107      	bne.n	800846c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <vTaskDelay+0x64>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	2401e91c 	.word	0x2401e91c
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	; 0x28
 8008480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800848a:	463a      	mov	r2, r7
 800848c:	1d39      	adds	r1, r7, #4
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fc08 	bl	8006ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	9202      	str	r2, [sp, #8]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	460a      	mov	r2, r1
 80084aa:	4921      	ldr	r1, [pc, #132]	; (8008530 <vTaskStartScheduler+0xb4>)
 80084ac:	4821      	ldr	r0, [pc, #132]	; (8008534 <vTaskStartScheduler+0xb8>)
 80084ae:	f7ff fe0f 	bl	80080d0 <xTaskCreateStatic>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4a20      	ldr	r2, [pc, #128]	; (8008538 <vTaskStartScheduler+0xbc>)
 80084b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <vTaskStartScheduler+0xbc>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e001      	b.n	80084ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084d0:	f000 fd20 	bl	8008f14 <xTimerCreateTimerTask>
 80084d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d116      	bne.n	800850a <vTaskStartScheduler+0x8e>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	613b      	str	r3, [r7, #16]
}
 80084ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084f0:	4b12      	ldr	r3, [pc, #72]	; (800853c <vTaskStartScheduler+0xc0>)
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <vTaskStartScheduler+0xc4>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084fe:	4b11      	ldr	r3, [pc, #68]	; (8008544 <vTaskStartScheduler+0xc8>)
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008504:	f7fe ff34 	bl	8007370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008508:	e00e      	b.n	8008528 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d10a      	bne.n	8008528 <vTaskStartScheduler+0xac>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60fb      	str	r3, [r7, #12]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <vTaskStartScheduler+0xaa>
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	0800a7e4 	.word	0x0800a7e4
 8008534:	08008ba9 	.word	0x08008ba9
 8008538:	2401e918 	.word	0x2401e918
 800853c:	2401e914 	.word	0x2401e914
 8008540:	2401e900 	.word	0x2401e900
 8008544:	2401e8f8 	.word	0x2401e8f8

08008548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <vTaskSuspendAll+0x18>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a03      	ldr	r2, [pc, #12]	; (8008560 <vTaskSuspendAll+0x18>)
 8008554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008556:	bf00      	nop
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	2401e91c 	.word	0x2401e91c

08008564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008572:	4b42      	ldr	r3, [pc, #264]	; (800867c <xTaskResumeAll+0x118>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <xTaskResumeAll+0x2c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	603b      	str	r3, [r7, #0]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008590:	f7fe ff90 	bl	80074b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008594:	4b39      	ldr	r3, [pc, #228]	; (800867c <xTaskResumeAll+0x118>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3b01      	subs	r3, #1
 800859a:	4a38      	ldr	r2, [pc, #224]	; (800867c <xTaskResumeAll+0x118>)
 800859c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <xTaskResumeAll+0x118>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d162      	bne.n	800866c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <xTaskResumeAll+0x11c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d05e      	beq.n	800866c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ae:	e02f      	b.n	8008610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b0:	4b34      	ldr	r3, [pc, #208]	; (8008684 <xTaskResumeAll+0x120>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3318      	adds	r3, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fe21 	bl	8007204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fe1c 	bl	8007204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <xTaskResumeAll+0x124>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d903      	bls.n	80085e0 <xTaskResumeAll+0x7c>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	4a2a      	ldr	r2, [pc, #168]	; (8008688 <xTaskResumeAll+0x124>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a27      	ldr	r2, [pc, #156]	; (800868c <xTaskResumeAll+0x128>)
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7fe fda7 	bl	800714a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4b23      	ldr	r3, [pc, #140]	; (8008690 <xTaskResumeAll+0x12c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800860a:	4b22      	ldr	r3, [pc, #136]	; (8008694 <xTaskResumeAll+0x130>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008610:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <xTaskResumeAll+0x120>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1cb      	bne.n	80085b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800861e:	f000 fb79 	bl	8008d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <xTaskResumeAll+0x134>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800862e:	f000 f847 	bl	80086c0 <xTaskIncrementTick>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008638:	4b16      	ldr	r3, [pc, #88]	; (8008694 <xTaskResumeAll+0x130>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3b01      	subs	r3, #1
 8008642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f1      	bne.n	800862e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <xTaskResumeAll+0x134>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008650:	4b10      	ldr	r3, [pc, #64]	; (8008694 <xTaskResumeAll+0x130>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <xTaskResumeAll+0x138>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800866c:	f7fe ff52 	bl	8007514 <vPortExitCritical>

	return xAlreadyYielded;
 8008670:	68bb      	ldr	r3, [r7, #8]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	2401e91c 	.word	0x2401e91c
 8008680:	2401e8f4 	.word	0x2401e8f4
 8008684:	2401e8b4 	.word	0x2401e8b4
 8008688:	2401e8fc 	.word	0x2401e8fc
 800868c:	2401e424 	.word	0x2401e424
 8008690:	2401e420 	.word	0x2401e420
 8008694:	2401e908 	.word	0x2401e908
 8008698:	2401e904 	.word	0x2401e904
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <xTaskGetTickCount+0x1c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086ac:	687b      	ldr	r3, [r7, #4]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	2401e8f8 	.word	0x2401e8f8

080086c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ca:	4b4f      	ldr	r3, [pc, #316]	; (8008808 <xTaskIncrementTick+0x148>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f040 808f 	bne.w	80087f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086d4:	4b4d      	ldr	r3, [pc, #308]	; (800880c <xTaskIncrementTick+0x14c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086dc:	4a4b      	ldr	r2, [pc, #300]	; (800880c <xTaskIncrementTick+0x14c>)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d120      	bne.n	800872a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80086e8:	4b49      	ldr	r3, [pc, #292]	; (8008810 <xTaskIncrementTick+0x150>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <xTaskIncrementTick+0x48>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	603b      	str	r3, [r7, #0]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xTaskIncrementTick+0x46>
 8008708:	4b41      	ldr	r3, [pc, #260]	; (8008810 <xTaskIncrementTick+0x150>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	4b41      	ldr	r3, [pc, #260]	; (8008814 <xTaskIncrementTick+0x154>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a3f      	ldr	r2, [pc, #252]	; (8008810 <xTaskIncrementTick+0x150>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4a3f      	ldr	r2, [pc, #252]	; (8008814 <xTaskIncrementTick+0x154>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	4b3e      	ldr	r3, [pc, #248]	; (8008818 <xTaskIncrementTick+0x158>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a3d      	ldr	r2, [pc, #244]	; (8008818 <xTaskIncrementTick+0x158>)
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	f000 faf5 	bl	8008d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800872a:	4b3c      	ldr	r3, [pc, #240]	; (800881c <xTaskIncrementTick+0x15c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	d349      	bcc.n	80087c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008734:	4b36      	ldr	r3, [pc, #216]	; (8008810 <xTaskIncrementTick+0x150>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873e:	4b37      	ldr	r3, [pc, #220]	; (800881c <xTaskIncrementTick+0x15c>)
 8008740:	f04f 32ff 	mov.w	r2, #4294967295
 8008744:	601a      	str	r2, [r3, #0]
					break;
 8008746:	e03f      	b.n	80087c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	4b31      	ldr	r3, [pc, #196]	; (8008810 <xTaskIncrementTick+0x150>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d203      	bcs.n	8008768 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008760:	4a2e      	ldr	r2, [pc, #184]	; (800881c <xTaskIncrementTick+0x15c>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008766:	e02f      	b.n	80087c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe fd49 	bl	8007204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3318      	adds	r3, #24
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fd40 	bl	8007204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <xTaskIncrementTick+0x160>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d903      	bls.n	8008798 <xTaskIncrementTick+0xd8>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	4a22      	ldr	r2, [pc, #136]	; (8008820 <xTaskIncrementTick+0x160>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <xTaskIncrementTick+0x164>)
 80087a6:	441a      	add	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe fccb 	bl	800714a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <xTaskIncrementTick+0x168>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	429a      	cmp	r2, r3
 80087c0:	d3b8      	bcc.n	8008734 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c6:	e7b5      	b.n	8008734 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <xTaskIncrementTick+0x168>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	4915      	ldr	r1, [pc, #84]	; (8008824 <xTaskIncrementTick+0x164>)
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d901      	bls.n	80087e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <xTaskIncrementTick+0x16c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e004      	b.n	80087fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <xTaskIncrementTick+0x170>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	4a0d      	ldr	r2, [pc, #52]	; (8008830 <xTaskIncrementTick+0x170>)
 80087fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087fc:	697b      	ldr	r3, [r7, #20]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	2401e91c 	.word	0x2401e91c
 800880c:	2401e8f8 	.word	0x2401e8f8
 8008810:	2401e8ac 	.word	0x2401e8ac
 8008814:	2401e8b0 	.word	0x2401e8b0
 8008818:	2401e90c 	.word	0x2401e90c
 800881c:	2401e914 	.word	0x2401e914
 8008820:	2401e8fc 	.word	0x2401e8fc
 8008824:	2401e424 	.word	0x2401e424
 8008828:	2401e420 	.word	0x2401e420
 800882c:	2401e908 	.word	0x2401e908
 8008830:	2401e904 	.word	0x2401e904

08008834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800883a:	4b3a      	ldr	r3, [pc, #232]	; (8008924 <vTaskSwitchContext+0xf0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008842:	4b39      	ldr	r3, [pc, #228]	; (8008928 <vTaskSwitchContext+0xf4>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008848:	e068      	b.n	800891c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800884a:	4b37      	ldr	r3, [pc, #220]	; (8008928 <vTaskSwitchContext+0xf4>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008850:	4b36      	ldr	r3, [pc, #216]	; (800892c <vTaskSwitchContext+0xf8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d111      	bne.n	800888c <vTaskSwitchContext+0x58>
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3304      	adds	r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	429a      	cmp	r2, r3
 8008872:	d10b      	bne.n	800888c <vTaskSwitchContext+0x58>
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	3308      	adds	r3, #8
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	429a      	cmp	r2, r3
 800887e:	d105      	bne.n	800888c <vTaskSwitchContext+0x58>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	330c      	adds	r3, #12
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	429a      	cmp	r2, r3
 800888a:	d008      	beq.n	800889e <vTaskSwitchContext+0x6a>
 800888c:	4b27      	ldr	r3, [pc, #156]	; (800892c <vTaskSwitchContext+0xf8>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b26      	ldr	r3, [pc, #152]	; (800892c <vTaskSwitchContext+0xf8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3334      	adds	r3, #52	; 0x34
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7f7 ff89 	bl	80007b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889e:	4b24      	ldr	r3, [pc, #144]	; (8008930 <vTaskSwitchContext+0xfc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e010      	b.n	80088c8 <vTaskSwitchContext+0x94>
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <vTaskSwitchContext+0x8e>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	607b      	str	r3, [r7, #4]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <vTaskSwitchContext+0x8c>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	491a      	ldr	r1, [pc, #104]	; (8008934 <vTaskSwitchContext+0x100>)
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0e4      	beq.n	80088a6 <vTaskSwitchContext+0x72>
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4a13      	ldr	r2, [pc, #76]	; (8008934 <vTaskSwitchContext+0x100>)
 80088e8:	4413      	add	r3, r2
 80088ea:	60bb      	str	r3, [r7, #8]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3308      	adds	r3, #8
 80088fe:	429a      	cmp	r2, r3
 8008900:	d104      	bne.n	800890c <vTaskSwitchContext+0xd8>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	4a06      	ldr	r2, [pc, #24]	; (800892c <vTaskSwitchContext+0xf8>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	4a06      	ldr	r2, [pc, #24]	; (8008930 <vTaskSwitchContext+0xfc>)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	6013      	str	r3, [r2, #0]
}
 800891c:	bf00      	nop
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	2401e91c 	.word	0x2401e91c
 8008928:	2401e908 	.word	0x2401e908
 800892c:	2401e420 	.word	0x2401e420
 8008930:	2401e8fc 	.word	0x2401e8fc
 8008934:	2401e424 	.word	0x2401e424

08008938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	60fb      	str	r3, [r7, #12]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <vTaskPlaceOnEventList+0x44>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3318      	adds	r3, #24
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe fc13 	bl	8007192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800896c:	2101      	movs	r1, #1
 800896e:	6838      	ldr	r0, [r7, #0]
 8008970:	f000 fa7c 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	2401e420 	.word	0x2401e420

08008980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	617b      	str	r3, [r7, #20]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4619      	mov	r1, r3
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7fe fbca 	bl	800714a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	68b8      	ldr	r0, [r7, #8]
 80089c6:	f000 fa51 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
	}
 80089ca:	bf00      	nop
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	2401e420 	.word	0x2401e420

080089d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10a      	bne.n	8008a04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60fb      	str	r3, [r7, #12]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	3318      	adds	r3, #24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fbfb 	bl	8007204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0e:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <xTaskRemoveFromEventList+0xb0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d11d      	bne.n	8008a52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fbf2 	bl	8007204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <xTaskRemoveFromEventList+0xb4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d903      	bls.n	8008a34 <xTaskRemoveFromEventList+0x5c>
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <xTaskRemoveFromEventList+0xb4>)
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4a13      	ldr	r2, [pc, #76]	; (8008a90 <xTaskRemoveFromEventList+0xb8>)
 8008a42:	441a      	add	r2, r3
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f7fe fb7d 	bl	800714a <vListInsertEnd>
 8008a50:	e005      	b.n	8008a5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	3318      	adds	r3, #24
 8008a56:	4619      	mov	r1, r3
 8008a58:	480e      	ldr	r0, [pc, #56]	; (8008a94 <xTaskRemoveFromEventList+0xbc>)
 8008a5a:	f7fe fb76 	bl	800714a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <xTaskRemoveFromEventList+0xc0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d905      	bls.n	8008a78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <xTaskRemoveFromEventList+0xc4>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e001      	b.n	8008a7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a7c:	697b      	ldr	r3, [r7, #20]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	2401e91c 	.word	0x2401e91c
 8008a8c:	2401e8fc 	.word	0x2401e8fc
 8008a90:	2401e424 	.word	0x2401e424
 8008a94:	2401e8b4 	.word	0x2401e8b4
 8008a98:	2401e420 	.word	0x2401e420
 8008a9c:	2401e908 	.word	0x2401e908

08008aa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aa8:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <vTaskInternalSetTimeOutState+0x24>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <vTaskInternalSetTimeOutState+0x28>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	605a      	str	r2, [r3, #4]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	2401e90c 	.word	0x2401e90c
 8008ac8:	2401e8f8 	.word	0x2401e8f8

08008acc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	613b      	str	r3, [r7, #16]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	60fb      	str	r3, [r7, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b0e:	f7fe fcd1 	bl	80074b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <xTaskCheckForTimeOut+0xbc>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d102      	bne.n	8008b32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e023      	b.n	8008b7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <xTaskCheckForTimeOut+0xc0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d007      	beq.n	8008b4e <xTaskCheckForTimeOut+0x82>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	e015      	b.n	8008b7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d20b      	bcs.n	8008b70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff9b 	bl	8008aa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	e004      	b.n	8008b7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f7fe fccb 	bl	8007514 <vPortExitCritical>

	return xReturn;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	2401e8f8 	.word	0x2401e8f8
 8008b8c:	2401e90c 	.word	0x2401e90c

08008b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b94:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <vTaskMissedYield+0x14>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	2401e908 	.word	0x2401e908

08008ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bb0:	f000 f852 	bl	8008c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <prvIdleTask+0x28>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d9f9      	bls.n	8008bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <prvIdleTask+0x2c>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bcc:	e7f0      	b.n	8008bb0 <prvIdleTask+0x8>
 8008bce:	bf00      	nop
 8008bd0:	2401e424 	.word	0x2401e424
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	e00c      	b.n	8008bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a12      	ldr	r2, [pc, #72]	; (8008c38 <prvInitialiseTaskLists+0x60>)
 8008bf0:	4413      	add	r3, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fa7c 	bl	80070f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b37      	cmp	r3, #55	; 0x37
 8008c02:	d9ef      	bls.n	8008be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c04:	480d      	ldr	r0, [pc, #52]	; (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c06:	f7fe fa73 	bl	80070f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c0a:	480d      	ldr	r0, [pc, #52]	; (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c0c:	f7fe fa70 	bl	80070f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c10:	480c      	ldr	r0, [pc, #48]	; (8008c44 <prvInitialiseTaskLists+0x6c>)
 8008c12:	f7fe fa6d 	bl	80070f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c16:	480c      	ldr	r0, [pc, #48]	; (8008c48 <prvInitialiseTaskLists+0x70>)
 8008c18:	f7fe fa6a 	bl	80070f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c1c:	480b      	ldr	r0, [pc, #44]	; (8008c4c <prvInitialiseTaskLists+0x74>)
 8008c1e:	f7fe fa67 	bl	80070f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <prvInitialiseTaskLists+0x78>)
 8008c24:	4a05      	ldr	r2, [pc, #20]	; (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <prvInitialiseTaskLists+0x7c>)
 8008c2a:	4a05      	ldr	r2, [pc, #20]	; (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2401e424 	.word	0x2401e424
 8008c3c:	2401e884 	.word	0x2401e884
 8008c40:	2401e898 	.word	0x2401e898
 8008c44:	2401e8b4 	.word	0x2401e8b4
 8008c48:	2401e8c8 	.word	0x2401e8c8
 8008c4c:	2401e8e0 	.word	0x2401e8e0
 8008c50:	2401e8ac 	.word	0x2401e8ac
 8008c54:	2401e8b0 	.word	0x2401e8b0

08008c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5e:	e019      	b.n	8008c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c60:	f7fe fc28 	bl	80074b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b10      	ldr	r3, [pc, #64]	; (8008ca8 <prvCheckTasksWaitingTermination+0x50>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fac7 	bl	8007204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c76:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4a0b      	ldr	r2, [pc, #44]	; (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4a0a      	ldr	r2, [pc, #40]	; (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c8a:	f7fe fc43 	bl	8007514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f810 	bl	8008cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c94:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e1      	bne.n	8008c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	2401e8c8 	.word	0x2401e8c8
 8008cac:	2401e8f4 	.word	0x2401e8f4
 8008cb0:	2401e8dc 	.word	0x2401e8dc

08008cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d108      	bne.n	8008cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe f8f0 	bl	8006eb0 <vPortFree>
				vPortFree( pxTCB );
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fe f8ed 	bl	8006eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cd6:	e018      	b.n	8008d0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d103      	bne.n	8008cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fe f8e4 	bl	8006eb0 <vPortFree>
	}
 8008ce8:	e00f      	b.n	8008d0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d00a      	beq.n	8008d0a <prvDeleteTCB+0x56>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <prvDeleteTCB+0x54>
	}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <prvResetNextTaskUnblockTime+0x38>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <prvResetNextTaskUnblockTime+0x3c>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d2c:	e008      	b.n	8008d40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <prvResetNextTaskUnblockTime+0x38>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <prvResetNextTaskUnblockTime+0x3c>)
 8008d3e:	6013      	str	r3, [r2, #0]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	2401e8ac 	.word	0x2401e8ac
 8008d50:	2401e914 	.word	0x2401e914

08008d54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <xTaskGetSchedulerState+0x34>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d62:	2301      	movs	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	e008      	b.n	8008d7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d68:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <xTaskGetSchedulerState+0x38>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d70:	2302      	movs	r3, #2
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	e001      	b.n	8008d7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d7a:	687b      	ldr	r3, [r7, #4]
	}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	2401e900 	.word	0x2401e900
 8008d8c:	2401e91c 	.word	0x2401e91c

08008d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d056      	beq.n	8008e54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008da6:	4b2e      	ldr	r3, [pc, #184]	; (8008e60 <xTaskPriorityDisinherit+0xd0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d00a      	beq.n	8008dc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60bb      	str	r3, [r7, #8]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	1e5a      	subs	r2, r3, #1
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d02c      	beq.n	8008e54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d128      	bne.n	8008e54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe f9fc 	bl	8007204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <xTaskPriorityDisinherit+0xd4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d903      	bls.n	8008e34 <xTaskPriorityDisinherit+0xa4>
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <xTaskPriorityDisinherit+0xd4>)
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <xTaskPriorityDisinherit+0xd8>)
 8008e42:	441a      	add	r2, r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f7fe f97d 	bl	800714a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e54:	697b      	ldr	r3, [r7, #20]
	}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	2401e420 	.word	0x2401e420
 8008e64:	2401e8fc 	.word	0x2401e8fc
 8008e68:	2401e424 	.word	0x2401e424

08008e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e76:	4b21      	ldr	r3, [pc, #132]	; (8008efc <prvAddCurrentTaskToDelayedList+0x90>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e7c:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe f9be 	bl	8007204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8e:	d10a      	bne.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d007      	beq.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4819      	ldr	r0, [pc, #100]	; (8008f04 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ea0:	f7fe f953 	bl	800714a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ea4:	e026      	b.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eae:	4b14      	ldr	r3, [pc, #80]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d209      	bcs.n	8008ed2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ebe:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f7fe f961 	bl	8007192 <vListInsert>
}
 8008ed0:	e010      	b.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fe f957 	bl	8007192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d202      	bcs.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eee:	4a08      	ldr	r2, [pc, #32]	; (8008f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6013      	str	r3, [r2, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	2401e8f8 	.word	0x2401e8f8
 8008f00:	2401e420 	.word	0x2401e420
 8008f04:	2401e8e0 	.word	0x2401e8e0
 8008f08:	2401e8b0 	.word	0x2401e8b0
 8008f0c:	2401e8ac 	.word	0x2401e8ac
 8008f10:	2401e914 	.word	0x2401e914

08008f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f1e:	f000 fb07 	bl	8009530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f22:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <xTimerCreateTimerTask+0x80>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d021      	beq.n	8008f6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f32:	1d3a      	adds	r2, r7, #4
 8008f34:	f107 0108 	add.w	r1, r7, #8
 8008f38:	f107 030c 	add.w	r3, r7, #12
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fd fecd 	bl	8006cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	9202      	str	r2, [sp, #8]
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	2300      	movs	r3, #0
 8008f52:	460a      	mov	r2, r1
 8008f54:	4910      	ldr	r1, [pc, #64]	; (8008f98 <xTimerCreateTimerTask+0x84>)
 8008f56:	4811      	ldr	r0, [pc, #68]	; (8008f9c <xTimerCreateTimerTask+0x88>)
 8008f58:	f7ff f8ba 	bl	80080d0 <xTaskCreateStatic>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	4a10      	ldr	r2, [pc, #64]	; (8008fa0 <xTimerCreateTimerTask+0x8c>)
 8008f60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f62:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <xTimerCreateTimerTask+0x8c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	613b      	str	r3, [r7, #16]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f8a:	697b      	ldr	r3, [r7, #20]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	2401e950 	.word	0x2401e950
 8008f98:	0800a7ec 	.word	0x0800a7ec
 8008f9c:	080090d9 	.word	0x080090d9
 8008fa0:	2401e954 	.word	0x2401e954

08008fa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08a      	sub	sp, #40	; 0x28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	623b      	str	r3, [r7, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	; (800903c <xTimerGenericCommand+0x98>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d02a      	beq.n	8009030 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b05      	cmp	r3, #5
 8008fea:	dc18      	bgt.n	800901e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fec:	f7ff feb2 	bl	8008d54 <xTaskGetSchedulerState>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d109      	bne.n	800900a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <xTimerGenericCommand+0x98>)
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f107 0110 	add.w	r1, r7, #16
 8008ffe:	2300      	movs	r3, #0
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	f7fe fc7d 	bl	8007900 <xQueueGenericSend>
 8009006:	6278      	str	r0, [r7, #36]	; 0x24
 8009008:	e012      	b.n	8009030 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <xTimerGenericCommand+0x98>)
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	f107 0110 	add.w	r1, r7, #16
 8009012:	2300      	movs	r3, #0
 8009014:	2200      	movs	r2, #0
 8009016:	f7fe fc73 	bl	8007900 <xQueueGenericSend>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24
 800901c:	e008      	b.n	8009030 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <xTimerGenericCommand+0x98>)
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f107 0110 	add.w	r1, r7, #16
 8009026:	2300      	movs	r3, #0
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	f7fe fd67 	bl	8007afc <xQueueGenericSendFromISR>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009032:	4618      	mov	r0, r3
 8009034:	3728      	adds	r7, #40	; 0x28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	2401e950 	.word	0x2401e950

08009040 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af02      	add	r7, sp, #8
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904a:	4b22      	ldr	r3, [pc, #136]	; (80090d4 <prvProcessExpiredTimer+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	3304      	adds	r3, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe f8d3 	bl	8007204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d022      	beq.n	80090b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	18d1      	adds	r1, r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	6978      	ldr	r0, [r7, #20]
 800907a:	f000 f8d1 	bl	8009220 <prvInsertTimerInActiveList>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01f      	beq.n	80090c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009084:	2300      	movs	r3, #0
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2300      	movs	r3, #0
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	2100      	movs	r1, #0
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f7ff ff88 	bl	8008fa4 <xTimerGenericCommand>
 8009094:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d113      	bne.n	80090c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b8:	f023 0301 	bic.w	r3, r3, #1
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	6978      	ldr	r0, [r7, #20]
 80090ca:	4798      	blx	r3
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	2401e948 	.word	0x2401e948

080090d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090e0:	f107 0308 	add.w	r3, r7, #8
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f857 	bl	8009198 <prvGetNextExpireTime>
 80090ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4619      	mov	r1, r3
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f803 	bl	80090fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090f6:	f000 f8d5 	bl	80092a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090fa:	e7f1      	b.n	80090e0 <prvTimerTask+0x8>

080090fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009106:	f7ff fa1f 	bl	8008548 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800910a:	f107 0308 	add.w	r3, r7, #8
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f866 	bl	80091e0 <prvSampleTimeNow>
 8009114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d130      	bne.n	800917e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <prvProcessTimerOrBlockTask+0x3c>
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	429a      	cmp	r2, r3
 8009128:	d806      	bhi.n	8009138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800912a:	f7ff fa1b 	bl	8008564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff85 	bl	8009040 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009136:	e024      	b.n	8009182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d008      	beq.n	8009150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <prvProcessTimerOrBlockTask+0x90>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <prvProcessTimerOrBlockTask+0x50>
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <prvProcessTimerOrBlockTask+0x52>
 800914c:	2300      	movs	r3, #0
 800914e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <prvProcessTimerOrBlockTask+0x94>)
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	4619      	mov	r1, r3
 800915e:	f7fe ff83 	bl	8008068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009162:	f7ff f9ff 	bl	8008564 <xTaskResumeAll>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800916c:	4b09      	ldr	r3, [pc, #36]	; (8009194 <prvProcessTimerOrBlockTask+0x98>)
 800916e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	f3bf 8f6f 	isb	sy
}
 800917c:	e001      	b.n	8009182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800917e:	f7ff f9f1 	bl	8008564 <xTaskResumeAll>
}
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	2401e94c 	.word	0x2401e94c
 8009190:	2401e950 	.word	0x2401e950
 8009194:	e000ed04 	.word	0xe000ed04

08009198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091a0:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <prvGetNextExpireTime+0x44>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <prvGetNextExpireTime+0x16>
 80091aa:	2201      	movs	r2, #1
 80091ac:	e000      	b.n	80091b0 <prvGetNextExpireTime+0x18>
 80091ae:	2200      	movs	r2, #0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d105      	bne.n	80091c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <prvGetNextExpireTime+0x44>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	e001      	b.n	80091cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091cc:	68fb      	ldr	r3, [r7, #12]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	2401e948 	.word	0x2401e948

080091e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091e8:	f7ff fa5a 	bl	80086a0 <xTaskGetTickCount>
 80091ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091ee:	4b0b      	ldr	r3, [pc, #44]	; (800921c <prvSampleTimeNow+0x3c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d205      	bcs.n	8009204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091f8:	f000 f936 	bl	8009468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e002      	b.n	800920a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800920a:	4a04      	ldr	r2, [pc, #16]	; (800921c <prvSampleTimeNow+0x3c>)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009210:	68fb      	ldr	r3, [r7, #12]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	2401e958 	.word	0x2401e958

08009220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	429a      	cmp	r2, r3
 8009244:	d812      	bhi.n	800926c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d302      	bcc.n	800925a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e01b      	b.n	8009292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800925a:	4b10      	ldr	r3, [pc, #64]	; (800929c <prvInsertTimerInActiveList+0x7c>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3304      	adds	r3, #4
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f7fd ff94 	bl	8007192 <vListInsert>
 800926a:	e012      	b.n	8009292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d206      	bcs.n	8009282 <prvInsertTimerInActiveList+0x62>
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d302      	bcc.n	8009282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800927c:	2301      	movs	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e007      	b.n	8009292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <prvInsertTimerInActiveList+0x80>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3304      	adds	r3, #4
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7fd ff80 	bl	8007192 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009292:	697b      	ldr	r3, [r7, #20]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	2401e94c 	.word	0x2401e94c
 80092a0:	2401e948 	.word	0x2401e948

080092a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08e      	sub	sp, #56	; 0x38
 80092a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092aa:	e0ca      	b.n	8009442 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	da18      	bge.n	80092e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	3304      	adds	r3, #4
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	61fb      	str	r3, [r7, #28]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092da:	6850      	ldr	r0, [r2, #4]
 80092dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092de:	6892      	ldr	r2, [r2, #8]
 80092e0:	4611      	mov	r1, r2
 80092e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f2c0 80aa 	blt.w	8009440 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fd ff81 	bl	8007204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009302:	463b      	mov	r3, r7
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff ff6b 	bl	80091e0 <prvSampleTimeNow>
 800930a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b09      	cmp	r3, #9
 8009310:	f200 8097 	bhi.w	8009442 <prvProcessReceivedCommands+0x19e>
 8009314:	a201      	add	r2, pc, #4	; (adr r2, 800931c <prvProcessReceivedCommands+0x78>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	08009345 	.word	0x08009345
 8009320:	08009345 	.word	0x08009345
 8009324:	08009345 	.word	0x08009345
 8009328:	080093b9 	.word	0x080093b9
 800932c:	080093cd 	.word	0x080093cd
 8009330:	08009417 	.word	0x08009417
 8009334:	08009345 	.word	0x08009345
 8009338:	08009345 	.word	0x08009345
 800933c:	080093b9 	.word	0x080093b9
 8009340:	080093cd 	.word	0x080093cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	18d1      	adds	r1, r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009364:	f7ff ff5c 	bl	8009220 <prvInsertTimerInActiveList>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d069      	beq.n	8009442 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009374:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d05e      	beq.n	8009442 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	441a      	add	r2, r3
 800938c:	2300      	movs	r3, #0
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2300      	movs	r3, #0
 8009392:	2100      	movs	r1, #0
 8009394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009396:	f7ff fe05 	bl	8008fa4 <xTimerGenericCommand>
 800939a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d14f      	bne.n	8009442 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	61bb      	str	r3, [r7, #24]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093ca:	e03a      	b.n	8009442 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	617b      	str	r3, [r7, #20]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	18d1      	adds	r1, r2, r3
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009410:	f7ff ff06 	bl	8009220 <prvInsertTimerInActiveList>
					break;
 8009414:	e015      	b.n	8009442 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009426:	f7fd fd43 	bl	8006eb0 <vPortFree>
 800942a:	e00a      	b.n	8009442 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800943e:	e000      	b.n	8009442 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009442:	4b08      	ldr	r3, [pc, #32]	; (8009464 <prvProcessReceivedCommands+0x1c0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	1d39      	adds	r1, r7, #4
 8009448:	2200      	movs	r2, #0
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fbf2 	bl	8007c34 <xQueueReceive>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	f47f af2a 	bne.w	80092ac <prvProcessReceivedCommands+0x8>
	}
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	3730      	adds	r7, #48	; 0x30
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	2401e950 	.word	0x2401e950

08009468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800946e:	e048      	b.n	8009502 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009470:	4b2d      	ldr	r3, [pc, #180]	; (8009528 <prvSwitchTimerLists+0xc0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800947a:	4b2b      	ldr	r3, [pc, #172]	; (8009528 <prvSwitchTimerLists+0xc0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3304      	adds	r3, #4
 8009488:	4618      	mov	r0, r3
 800948a:	f7fd febb 	bl	8007204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d02e      	beq.n	8009502 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4413      	add	r3, r2
 80094ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d90e      	bls.n	80094d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <prvSwitchTimerLists+0xc0>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fd fe60 	bl	8007192 <vListInsert>
 80094d2:	e016      	b.n	8009502 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094d4:	2300      	movs	r3, #0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	2300      	movs	r3, #0
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	2100      	movs	r1, #0
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fd60 	bl	8008fa4 <xTimerGenericCommand>
 80094e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	603b      	str	r3, [r7, #0]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <prvSwitchTimerLists+0xc0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1b1      	bne.n	8009470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <prvSwitchTimerLists+0xc0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009512:	4b06      	ldr	r3, [pc, #24]	; (800952c <prvSwitchTimerLists+0xc4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a04      	ldr	r2, [pc, #16]	; (8009528 <prvSwitchTimerLists+0xc0>)
 8009518:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800951a:	4a04      	ldr	r2, [pc, #16]	; (800952c <prvSwitchTimerLists+0xc4>)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	6013      	str	r3, [r2, #0]
}
 8009520:	bf00      	nop
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	2401e948 	.word	0x2401e948
 800952c:	2401e94c 	.word	0x2401e94c

08009530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009536:	f7fd ffbd 	bl	80074b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d120      	bne.n	8009584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009542:	4814      	ldr	r0, [pc, #80]	; (8009594 <prvCheckForValidListAndQueue+0x64>)
 8009544:	f7fd fdd4 	bl	80070f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009548:	4813      	ldr	r0, [pc, #76]	; (8009598 <prvCheckForValidListAndQueue+0x68>)
 800954a:	f7fd fdd1 	bl	80070f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800954e:	4b13      	ldr	r3, [pc, #76]	; (800959c <prvCheckForValidListAndQueue+0x6c>)
 8009550:	4a10      	ldr	r2, [pc, #64]	; (8009594 <prvCheckForValidListAndQueue+0x64>)
 8009552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009554:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <prvCheckForValidListAndQueue+0x70>)
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <prvCheckForValidListAndQueue+0x68>)
 8009558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800955a:	2300      	movs	r3, #0
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <prvCheckForValidListAndQueue+0x74>)
 8009560:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <prvCheckForValidListAndQueue+0x78>)
 8009562:	2110      	movs	r1, #16
 8009564:	200a      	movs	r0, #10
 8009566:	f7fe f92f 	bl	80077c8 <xQueueGenericCreateStatic>
 800956a:	4603      	mov	r3, r0
 800956c:	4a08      	ldr	r2, [pc, #32]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 800956e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d005      	beq.n	8009584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	490b      	ldr	r1, [pc, #44]	; (80095ac <prvCheckForValidListAndQueue+0x7c>)
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fd48 	bl	8008014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009584:	f7fd ffc6 	bl	8007514 <vPortExitCritical>
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	2401e950 	.word	0x2401e950
 8009594:	2401e920 	.word	0x2401e920
 8009598:	2401e934 	.word	0x2401e934
 800959c:	2401e948 	.word	0x2401e948
 80095a0:	2401e94c 	.word	0x2401e94c
 80095a4:	2401e9fc 	.word	0x2401e9fc
 80095a8:	2401e95c 	.word	0x2401e95c
 80095ac:	0800a7f4 	.word	0x0800a7f4

080095b0 <wolfCrypt_Init>:

/* Used to initialize state for wolfcrypt
   return 0 on success
 */
int wolfCrypt_Init(void)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
    int ret = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]
    if (initRefCount == 0) {
 80095ba:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <wolfCrypt_Init+0x28>)
 80095bc:	681b      	ldr	r3, [r3, #0]
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 80095be:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <wolfCrypt_Init+0x28>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	4a04      	ldr	r2, [pc, #16]	; (80095d8 <wolfCrypt_Init+0x28>)
 80095c6:	6013      	str	r3, [r2, #0]

    return ret;
 80095c8:	687b      	ldr	r3, [r7, #4]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	2401ea4c 	.word	0x2401ea4c

080095dc <PrintMemStats>:
    }
}
#endif

static void PrintMemStats(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
    printf("\nHeap MinEver %d, Free %d, Stack %lu\n",
        xPortGetMinimumEverFreeHeapSize(),
        xPortGetFreeHeapSize(),
        uxTaskGetStackHighWaterMark(NULL));
#endif
}
 80095e0:	bf00      	nop
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
	...

080095ec <wolfCryptDemo>:
#ifdef CMSIS_OS2_H_
void wolfCryptDemo(void* argument)
#else
void wolfCryptDemo(const void* argument)
#endif
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    wolfSSL_Debugging_ON();
#endif

    /* initialize wolfSSL */
#ifdef WOLFCRYPT_ONLY
    wolfCrypt_Init();
 80095f4:	f7ff ffdc 	bl	80095b0 <wolfCrypt_Init>
#endif

    //wolfSSL_SetAllocators(wolfMallocCb, wolfFreeCb, wolfReallocCb);

	while (1) {
        memset(&args, 0, sizeof(args));
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	220c      	movs	r2, #12
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f8cb 	bl	800979c <memset>
        args.return_code = NOT_COMPILED_IN; /* default */
 8009606:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 800960a:	613b      	str	r3, [r7, #16]

		printf("\n\t\t\t\tMENU\n");
 800960c:	483b      	ldr	r0, [pc, #236]	; (80096fc <wolfCryptDemo+0x110>)
 800960e:	f000 fa33 	bl	8009a78 <puts>
		printf(menu1);
 8009612:	483b      	ldr	r0, [pc, #236]	; (8009700 <wolfCryptDemo+0x114>)
 8009614:	f000 fa30 	bl	8009a78 <puts>
		printf("Please select one of the above options:\n");
 8009618:	483a      	ldr	r0, [pc, #232]	; (8009704 <wolfCryptDemo+0x118>)
 800961a:	f000 fa2d 	bl	8009a78 <puts>

        do {
    		halRet = HAL_UART_Receive(&HAL_CONSOLE_UART, buffer, sizeof(buffer), 100);
 800961e:	f107 0114 	add.w	r1, r7, #20
 8009622:	2364      	movs	r3, #100	; 0x64
 8009624:	2202      	movs	r2, #2
 8009626:	4838      	ldr	r0, [pc, #224]	; (8009708 <wolfCryptDemo+0x11c>)
 8009628:	f7fb fe04 	bl	8005234 <HAL_UART_Receive>
 800962c:	4603      	mov	r3, r0
 800962e:	75fb      	strb	r3, [r7, #23]
        } while (halRet != HAL_OK || buffer[0] == '\n' || buffer[0] == '\r');
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f3      	bne.n	800961e <wolfCryptDemo+0x32>
 8009636:	7d3b      	ldrb	r3, [r7, #20]
 8009638:	2b0a      	cmp	r3, #10
 800963a:	d0f0      	beq.n	800961e <wolfCryptDemo+0x32>
 800963c:	7d3b      	ldrb	r3, [r7, #20]
 800963e:	2b0d      	cmp	r3, #13
 8009640:	d0ed      	beq.n	800961e <wolfCryptDemo+0x32>

		switch (buffer[0]) {
 8009642:	7d3b      	ldrb	r3, [r7, #20]
 8009644:	3b62      	subs	r3, #98	; 0x62
 8009646:	2b12      	cmp	r3, #18
 8009648:	d850      	bhi.n	80096ec <wolfCryptDemo+0x100>
 800964a:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <wolfCryptDemo+0x64>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	080096b5 	.word	0x080096b5
 8009654:	080096ed 	.word	0x080096ed
 8009658:	080096ed 	.word	0x080096ed
 800965c:	080096e5 	.word	0x080096e5
 8009660:	080096ed 	.word	0x080096ed
 8009664:	080096ed 	.word	0x080096ed
 8009668:	080096ed 	.word	0x080096ed
 800966c:	080096ed 	.word	0x080096ed
 8009670:	080096ed 	.word	0x080096ed
 8009674:	080096ed 	.word	0x080096ed
 8009678:	080096cd 	.word	0x080096cd
 800967c:	080096ed 	.word	0x080096ed
 8009680:	080096ed 	.word	0x080096ed
 8009684:	080096ed 	.word	0x080096ed
 8009688:	080096ed 	.word	0x080096ed
 800968c:	080096ed 	.word	0x080096ed
 8009690:	080096ed 	.word	0x080096ed
 8009694:	080096ed 	.word	0x080096ed
 8009698:	0800969d 	.word	0x0800969d
		case 't':
			printf("Running wolfCrypt Tests...\n");
 800969c:	481b      	ldr	r0, [pc, #108]	; (800970c <wolfCryptDemo+0x120>)
 800969e:	f000 f9eb 	bl	8009a78 <puts>
        #ifndef NO_CRYPT_TEST
			args.return_code = 0;
			wolfcrypt_test(&args);
        #else
            args.return_code = NOT_COMPILED_IN;
 80096a2:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 80096a6:	613b      	str	r3, [r7, #16]
        #endif
			printf("Crypt Test: Return code %d\n", args.return_code);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	4619      	mov	r1, r3
 80096ac:	4818      	ldr	r0, [pc, #96]	; (8009710 <wolfCryptDemo+0x124>)
 80096ae:	f000 f95d 	bl	800996c <iprintf>
			break;
 80096b2:	e01f      	b.n	80096f4 <wolfCryptDemo+0x108>

		case 'b':
			printf("Running wolfCrypt Benchmarks...\n");
 80096b4:	4817      	ldr	r0, [pc, #92]	; (8009714 <wolfCryptDemo+0x128>)
 80096b6:	f000 f9df 	bl	8009a78 <puts>
        #ifndef NO_CRYPT_BENCHMARK
			args.return_code = 0;
			benchmark_test(&args);
        #else
            args.return_code = NOT_COMPILED_IN;
 80096ba:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 80096be:	613b      	str	r3, [r7, #16]
        #endif
			printf("Benchmark Test: Return code %d\n", args.return_code);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	4619      	mov	r1, r3
 80096c4:	4814      	ldr	r0, [pc, #80]	; (8009718 <wolfCryptDemo+0x12c>)
 80096c6:	f000 f951 	bl	800996c <iprintf>
			break;
 80096ca:	e013      	b.n	80096f4 <wolfCryptDemo+0x108>

        case 'l':
            printf("Running TLS Benchmarks...\n");
 80096cc:	4813      	ldr	r0, [pc, #76]	; (800971c <wolfCryptDemo+0x130>)
 80096ce:	f000 f9d3 	bl	8009a78 <puts>
        #if (!defined(NO_WOLFSSL_CLIENT) || !defined(NO_WOLFSSL_SERVER)) && !defined(WOLFCRYPT_ONLY) && !defined(SINGLE_THREADED)
            bench_tls(&args);
        #else
            args.return_code = NOT_COMPILED_IN;
 80096d2:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 80096d6:	613b      	str	r3, [r7, #16]
        #endif
            printf("TLS Benchmarks: Return code %d\n", args.return_code);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4619      	mov	r1, r3
 80096dc:	4810      	ldr	r0, [pc, #64]	; (8009720 <wolfCryptDemo+0x134>)
 80096de:	f000 f945 	bl	800996c <iprintf>
            break;
 80096e2:	e007      	b.n	80096f4 <wolfCryptDemo+0x108>

        case 'e':
        #ifndef WOLFCRYPT_ONLY
            ShowCiphers();
        #else
            printf("Not compiled in\n");
 80096e4:	480f      	ldr	r0, [pc, #60]	; (8009724 <wolfCryptDemo+0x138>)
 80096e6:	f000 f9c7 	bl	8009a78 <puts>
        #endif
            break;
 80096ea:	e003      	b.n	80096f4 <wolfCryptDemo+0x108>

			// All other cases go here
		default:
			printf("\nSelection out of range\n");
 80096ec:	480e      	ldr	r0, [pc, #56]	; (8009728 <wolfCryptDemo+0x13c>)
 80096ee:	f000 f9c3 	bl	8009a78 <puts>
			break;
 80096f2:	bf00      	nop
		}

        PrintMemStats();
 80096f4:	f7ff ff72 	bl	80095dc <PrintMemStats>
        memset(&args, 0, sizeof(args));
 80096f8:	e77e      	b.n	80095f8 <wolfCryptDemo+0xc>
 80096fa:	bf00      	nop
 80096fc:	0800a7fc 	.word	0x0800a7fc
 8009700:	0800a808 	.word	0x0800a808
 8009704:	0800a860 	.word	0x0800a860
 8009708:	2400023c 	.word	0x2400023c
 800970c:	0800a888 	.word	0x0800a888
 8009710:	0800a8a4 	.word	0x0800a8a4
 8009714:	0800a8c0 	.word	0x0800a8c0
 8009718:	0800a8e0 	.word	0x0800a8e0
 800971c:	0800a900 	.word	0x0800a900
 8009720:	0800a91c 	.word	0x0800a91c
 8009724:	0800a93c 	.word	0x0800a93c
 8009728:	0800a94c 	.word	0x0800a94c

0800972c <__errno>:
 800972c:	4b01      	ldr	r3, [pc, #4]	; (8009734 <__errno+0x8>)
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	24000014 	.word	0x24000014

08009738 <__libc_init_array>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	4d0d      	ldr	r5, [pc, #52]	; (8009770 <__libc_init_array+0x38>)
 800973c:	4c0d      	ldr	r4, [pc, #52]	; (8009774 <__libc_init_array+0x3c>)
 800973e:	1b64      	subs	r4, r4, r5
 8009740:	10a4      	asrs	r4, r4, #2
 8009742:	2600      	movs	r6, #0
 8009744:	42a6      	cmp	r6, r4
 8009746:	d109      	bne.n	800975c <__libc_init_array+0x24>
 8009748:	4d0b      	ldr	r5, [pc, #44]	; (8009778 <__libc_init_array+0x40>)
 800974a:	4c0c      	ldr	r4, [pc, #48]	; (800977c <__libc_init_array+0x44>)
 800974c:	f001 f832 	bl	800a7b4 <_init>
 8009750:	1b64      	subs	r4, r4, r5
 8009752:	10a4      	asrs	r4, r4, #2
 8009754:	2600      	movs	r6, #0
 8009756:	42a6      	cmp	r6, r4
 8009758:	d105      	bne.n	8009766 <__libc_init_array+0x2e>
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009760:	4798      	blx	r3
 8009762:	3601      	adds	r6, #1
 8009764:	e7ee      	b.n	8009744 <__libc_init_array+0xc>
 8009766:	f855 3b04 	ldr.w	r3, [r5], #4
 800976a:	4798      	blx	r3
 800976c:	3601      	adds	r6, #1
 800976e:	e7f2      	b.n	8009756 <__libc_init_array+0x1e>
 8009770:	0800aa84 	.word	0x0800aa84
 8009774:	0800aa84 	.word	0x0800aa84
 8009778:	0800aa84 	.word	0x0800aa84
 800977c:	0800aa88 	.word	0x0800aa88

08009780 <memcpy>:
 8009780:	440a      	add	r2, r1
 8009782:	4291      	cmp	r1, r2
 8009784:	f100 33ff 	add.w	r3, r0, #4294967295
 8009788:	d100      	bne.n	800978c <memcpy+0xc>
 800978a:	4770      	bx	lr
 800978c:	b510      	push	{r4, lr}
 800978e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009796:	4291      	cmp	r1, r2
 8009798:	d1f9      	bne.n	800978e <memcpy+0xe>
 800979a:	bd10      	pop	{r4, pc}

0800979c <memset>:
 800979c:	4402      	add	r2, r0
 800979e:	4603      	mov	r3, r0
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d100      	bne.n	80097a6 <memset+0xa>
 80097a4:	4770      	bx	lr
 80097a6:	f803 1b01 	strb.w	r1, [r3], #1
 80097aa:	e7f9      	b.n	80097a0 <memset+0x4>

080097ac <_free_r>:
 80097ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d044      	beq.n	800983c <_free_r+0x90>
 80097b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b6:	9001      	str	r0, [sp, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f1a1 0404 	sub.w	r4, r1, #4
 80097be:	bfb8      	it	lt
 80097c0:	18e4      	addlt	r4, r4, r3
 80097c2:	f000 fc51 	bl	800a068 <__malloc_lock>
 80097c6:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <_free_r+0x94>)
 80097c8:	9801      	ldr	r0, [sp, #4]
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	b933      	cbnz	r3, 80097dc <_free_r+0x30>
 80097ce:	6063      	str	r3, [r4, #4]
 80097d0:	6014      	str	r4, [r2, #0]
 80097d2:	b003      	add	sp, #12
 80097d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097d8:	f000 bc4c 	b.w	800a074 <__malloc_unlock>
 80097dc:	42a3      	cmp	r3, r4
 80097de:	d908      	bls.n	80097f2 <_free_r+0x46>
 80097e0:	6825      	ldr	r5, [r4, #0]
 80097e2:	1961      	adds	r1, r4, r5
 80097e4:	428b      	cmp	r3, r1
 80097e6:	bf01      	itttt	eq
 80097e8:	6819      	ldreq	r1, [r3, #0]
 80097ea:	685b      	ldreq	r3, [r3, #4]
 80097ec:	1949      	addeq	r1, r1, r5
 80097ee:	6021      	streq	r1, [r4, #0]
 80097f0:	e7ed      	b.n	80097ce <_free_r+0x22>
 80097f2:	461a      	mov	r2, r3
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	b10b      	cbz	r3, 80097fc <_free_r+0x50>
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d9fa      	bls.n	80097f2 <_free_r+0x46>
 80097fc:	6811      	ldr	r1, [r2, #0]
 80097fe:	1855      	adds	r5, r2, r1
 8009800:	42a5      	cmp	r5, r4
 8009802:	d10b      	bne.n	800981c <_free_r+0x70>
 8009804:	6824      	ldr	r4, [r4, #0]
 8009806:	4421      	add	r1, r4
 8009808:	1854      	adds	r4, r2, r1
 800980a:	42a3      	cmp	r3, r4
 800980c:	6011      	str	r1, [r2, #0]
 800980e:	d1e0      	bne.n	80097d2 <_free_r+0x26>
 8009810:	681c      	ldr	r4, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	6053      	str	r3, [r2, #4]
 8009816:	4421      	add	r1, r4
 8009818:	6011      	str	r1, [r2, #0]
 800981a:	e7da      	b.n	80097d2 <_free_r+0x26>
 800981c:	d902      	bls.n	8009824 <_free_r+0x78>
 800981e:	230c      	movs	r3, #12
 8009820:	6003      	str	r3, [r0, #0]
 8009822:	e7d6      	b.n	80097d2 <_free_r+0x26>
 8009824:	6825      	ldr	r5, [r4, #0]
 8009826:	1961      	adds	r1, r4, r5
 8009828:	428b      	cmp	r3, r1
 800982a:	bf04      	itt	eq
 800982c:	6819      	ldreq	r1, [r3, #0]
 800982e:	685b      	ldreq	r3, [r3, #4]
 8009830:	6063      	str	r3, [r4, #4]
 8009832:	bf04      	itt	eq
 8009834:	1949      	addeq	r1, r1, r5
 8009836:	6021      	streq	r1, [r4, #0]
 8009838:	6054      	str	r4, [r2, #4]
 800983a:	e7ca      	b.n	80097d2 <_free_r+0x26>
 800983c:	b003      	add	sp, #12
 800983e:	bd30      	pop	{r4, r5, pc}
 8009840:	2401ea50 	.word	0x2401ea50

08009844 <sbrk_aligned>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	4e0e      	ldr	r6, [pc, #56]	; (8009880 <sbrk_aligned+0x3c>)
 8009848:	460c      	mov	r4, r1
 800984a:	6831      	ldr	r1, [r6, #0]
 800984c:	4605      	mov	r5, r0
 800984e:	b911      	cbnz	r1, 8009856 <sbrk_aligned+0x12>
 8009850:	f000 f91a 	bl	8009a88 <_sbrk_r>
 8009854:	6030      	str	r0, [r6, #0]
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f000 f915 	bl	8009a88 <_sbrk_r>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d00a      	beq.n	8009878 <sbrk_aligned+0x34>
 8009862:	1cc4      	adds	r4, r0, #3
 8009864:	f024 0403 	bic.w	r4, r4, #3
 8009868:	42a0      	cmp	r0, r4
 800986a:	d007      	beq.n	800987c <sbrk_aligned+0x38>
 800986c:	1a21      	subs	r1, r4, r0
 800986e:	4628      	mov	r0, r5
 8009870:	f000 f90a 	bl	8009a88 <_sbrk_r>
 8009874:	3001      	adds	r0, #1
 8009876:	d101      	bne.n	800987c <sbrk_aligned+0x38>
 8009878:	f04f 34ff 	mov.w	r4, #4294967295
 800987c:	4620      	mov	r0, r4
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	2401ea54 	.word	0x2401ea54

08009884 <_malloc_r>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	1ccd      	adds	r5, r1, #3
 800988a:	f025 0503 	bic.w	r5, r5, #3
 800988e:	3508      	adds	r5, #8
 8009890:	2d0c      	cmp	r5, #12
 8009892:	bf38      	it	cc
 8009894:	250c      	movcc	r5, #12
 8009896:	2d00      	cmp	r5, #0
 8009898:	4607      	mov	r7, r0
 800989a:	db01      	blt.n	80098a0 <_malloc_r+0x1c>
 800989c:	42a9      	cmp	r1, r5
 800989e:	d905      	bls.n	80098ac <_malloc_r+0x28>
 80098a0:	230c      	movs	r3, #12
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	2600      	movs	r6, #0
 80098a6:	4630      	mov	r0, r6
 80098a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ac:	4e2e      	ldr	r6, [pc, #184]	; (8009968 <_malloc_r+0xe4>)
 80098ae:	f000 fbdb 	bl	800a068 <__malloc_lock>
 80098b2:	6833      	ldr	r3, [r6, #0]
 80098b4:	461c      	mov	r4, r3
 80098b6:	bb34      	cbnz	r4, 8009906 <_malloc_r+0x82>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7ff ffc2 	bl	8009844 <sbrk_aligned>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	4604      	mov	r4, r0
 80098c4:	d14d      	bne.n	8009962 <_malloc_r+0xde>
 80098c6:	6834      	ldr	r4, [r6, #0]
 80098c8:	4626      	mov	r6, r4
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d140      	bne.n	8009950 <_malloc_r+0xcc>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	4631      	mov	r1, r6
 80098d2:	4638      	mov	r0, r7
 80098d4:	eb04 0803 	add.w	r8, r4, r3
 80098d8:	f000 f8d6 	bl	8009a88 <_sbrk_r>
 80098dc:	4580      	cmp	r8, r0
 80098de:	d13a      	bne.n	8009956 <_malloc_r+0xd2>
 80098e0:	6821      	ldr	r1, [r4, #0]
 80098e2:	3503      	adds	r5, #3
 80098e4:	1a6d      	subs	r5, r5, r1
 80098e6:	f025 0503 	bic.w	r5, r5, #3
 80098ea:	3508      	adds	r5, #8
 80098ec:	2d0c      	cmp	r5, #12
 80098ee:	bf38      	it	cc
 80098f0:	250c      	movcc	r5, #12
 80098f2:	4629      	mov	r1, r5
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff ffa5 	bl	8009844 <sbrk_aligned>
 80098fa:	3001      	adds	r0, #1
 80098fc:	d02b      	beq.n	8009956 <_malloc_r+0xd2>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	442b      	add	r3, r5
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	e00e      	b.n	8009924 <_malloc_r+0xa0>
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	1b52      	subs	r2, r2, r5
 800990a:	d41e      	bmi.n	800994a <_malloc_r+0xc6>
 800990c:	2a0b      	cmp	r2, #11
 800990e:	d916      	bls.n	800993e <_malloc_r+0xba>
 8009910:	1961      	adds	r1, r4, r5
 8009912:	42a3      	cmp	r3, r4
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	bf18      	it	ne
 8009918:	6059      	strne	r1, [r3, #4]
 800991a:	6863      	ldr	r3, [r4, #4]
 800991c:	bf08      	it	eq
 800991e:	6031      	streq	r1, [r6, #0]
 8009920:	5162      	str	r2, [r4, r5]
 8009922:	604b      	str	r3, [r1, #4]
 8009924:	4638      	mov	r0, r7
 8009926:	f104 060b 	add.w	r6, r4, #11
 800992a:	f000 fba3 	bl	800a074 <__malloc_unlock>
 800992e:	f026 0607 	bic.w	r6, r6, #7
 8009932:	1d23      	adds	r3, r4, #4
 8009934:	1af2      	subs	r2, r6, r3
 8009936:	d0b6      	beq.n	80098a6 <_malloc_r+0x22>
 8009938:	1b9b      	subs	r3, r3, r6
 800993a:	50a3      	str	r3, [r4, r2]
 800993c:	e7b3      	b.n	80098a6 <_malloc_r+0x22>
 800993e:	6862      	ldr	r2, [r4, #4]
 8009940:	42a3      	cmp	r3, r4
 8009942:	bf0c      	ite	eq
 8009944:	6032      	streq	r2, [r6, #0]
 8009946:	605a      	strne	r2, [r3, #4]
 8009948:	e7ec      	b.n	8009924 <_malloc_r+0xa0>
 800994a:	4623      	mov	r3, r4
 800994c:	6864      	ldr	r4, [r4, #4]
 800994e:	e7b2      	b.n	80098b6 <_malloc_r+0x32>
 8009950:	4634      	mov	r4, r6
 8009952:	6876      	ldr	r6, [r6, #4]
 8009954:	e7b9      	b.n	80098ca <_malloc_r+0x46>
 8009956:	230c      	movs	r3, #12
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	4638      	mov	r0, r7
 800995c:	f000 fb8a 	bl	800a074 <__malloc_unlock>
 8009960:	e7a1      	b.n	80098a6 <_malloc_r+0x22>
 8009962:	6025      	str	r5, [r4, #0]
 8009964:	e7de      	b.n	8009924 <_malloc_r+0xa0>
 8009966:	bf00      	nop
 8009968:	2401ea50 	.word	0x2401ea50

0800996c <iprintf>:
 800996c:	b40f      	push	{r0, r1, r2, r3}
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <iprintf+0x2c>)
 8009970:	b513      	push	{r0, r1, r4, lr}
 8009972:	681c      	ldr	r4, [r3, #0]
 8009974:	b124      	cbz	r4, 8009980 <iprintf+0x14>
 8009976:	69a3      	ldr	r3, [r4, #24]
 8009978:	b913      	cbnz	r3, 8009980 <iprintf+0x14>
 800997a:	4620      	mov	r0, r4
 800997c:	f000 fa6e 	bl	8009e5c <__sinit>
 8009980:	ab05      	add	r3, sp, #20
 8009982:	9a04      	ldr	r2, [sp, #16]
 8009984:	68a1      	ldr	r1, [r4, #8]
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fba3 	bl	800a0d4 <_vfiprintf_r>
 800998e:	b002      	add	sp, #8
 8009990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009994:	b004      	add	sp, #16
 8009996:	4770      	bx	lr
 8009998:	24000014 	.word	0x24000014

0800999c <_puts_r>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	460e      	mov	r6, r1
 80099a0:	4605      	mov	r5, r0
 80099a2:	b118      	cbz	r0, 80099ac <_puts_r+0x10>
 80099a4:	6983      	ldr	r3, [r0, #24]
 80099a6:	b90b      	cbnz	r3, 80099ac <_puts_r+0x10>
 80099a8:	f000 fa58 	bl	8009e5c <__sinit>
 80099ac:	69ab      	ldr	r3, [r5, #24]
 80099ae:	68ac      	ldr	r4, [r5, #8]
 80099b0:	b913      	cbnz	r3, 80099b8 <_puts_r+0x1c>
 80099b2:	4628      	mov	r0, r5
 80099b4:	f000 fa52 	bl	8009e5c <__sinit>
 80099b8:	4b2c      	ldr	r3, [pc, #176]	; (8009a6c <_puts_r+0xd0>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d120      	bne.n	8009a00 <_puts_r+0x64>
 80099be:	686c      	ldr	r4, [r5, #4]
 80099c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c2:	07db      	lsls	r3, r3, #31
 80099c4:	d405      	bmi.n	80099d2 <_puts_r+0x36>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	0598      	lsls	r0, r3, #22
 80099ca:	d402      	bmi.n	80099d2 <_puts_r+0x36>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f000 fae3 	bl	8009f98 <__retarget_lock_acquire_recursive>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	0719      	lsls	r1, r3, #28
 80099d6:	d51d      	bpl.n	8009a14 <_puts_r+0x78>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	b1db      	cbz	r3, 8009a14 <_puts_r+0x78>
 80099dc:	3e01      	subs	r6, #1
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099e4:	3b01      	subs	r3, #1
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	bb39      	cbnz	r1, 8009a3a <_puts_r+0x9e>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	da38      	bge.n	8009a60 <_puts_r+0xc4>
 80099ee:	4622      	mov	r2, r4
 80099f0:	210a      	movs	r1, #10
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f858 	bl	8009aa8 <__swbuf_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d011      	beq.n	8009a20 <_puts_r+0x84>
 80099fc:	250a      	movs	r5, #10
 80099fe:	e011      	b.n	8009a24 <_puts_r+0x88>
 8009a00:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <_puts_r+0xd4>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d101      	bne.n	8009a0a <_puts_r+0x6e>
 8009a06:	68ac      	ldr	r4, [r5, #8]
 8009a08:	e7da      	b.n	80099c0 <_puts_r+0x24>
 8009a0a:	4b1a      	ldr	r3, [pc, #104]	; (8009a74 <_puts_r+0xd8>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	bf08      	it	eq
 8009a10:	68ec      	ldreq	r4, [r5, #12]
 8009a12:	e7d5      	b.n	80099c0 <_puts_r+0x24>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	f000 f898 	bl	8009b4c <__swsetup_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d0dd      	beq.n	80099dc <_puts_r+0x40>
 8009a20:	f04f 35ff 	mov.w	r5, #4294967295
 8009a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d405      	bmi.n	8009a36 <_puts_r+0x9a>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_puts_r+0x9a>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f000 fab2 	bl	8009f9a <__retarget_lock_release_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da04      	bge.n	8009a48 <_puts_r+0xac>
 8009a3e:	69a2      	ldr	r2, [r4, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	dc06      	bgt.n	8009a52 <_puts_r+0xb6>
 8009a44:	290a      	cmp	r1, #10
 8009a46:	d004      	beq.n	8009a52 <_puts_r+0xb6>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	7019      	strb	r1, [r3, #0]
 8009a50:	e7c5      	b.n	80099de <_puts_r+0x42>
 8009a52:	4622      	mov	r2, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 f827 	bl	8009aa8 <__swbuf_r>
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d1bf      	bne.n	80099de <_puts_r+0x42>
 8009a5e:	e7df      	b.n	8009a20 <_puts_r+0x84>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	250a      	movs	r5, #10
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	701d      	strb	r5, [r3, #0]
 8009a6a:	e7db      	b.n	8009a24 <_puts_r+0x88>
 8009a6c:	0800aa08 	.word	0x0800aa08
 8009a70:	0800aa28 	.word	0x0800aa28
 8009a74:	0800a9e8 	.word	0x0800a9e8

08009a78 <puts>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <puts+0xc>)
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	f7ff bf8d 	b.w	800999c <_puts_r>
 8009a82:	bf00      	nop
 8009a84:	24000014 	.word	0x24000014

08009a88 <_sbrk_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d06      	ldr	r5, [pc, #24]	; (8009aa4 <_sbrk_r+0x1c>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	f7f7 fbac 	bl	80011f0 <_sbrk>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_sbrk_r+0x1a>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_sbrk_r+0x1a>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	2401ea5c 	.word	0x2401ea5c

08009aa8 <__swbuf_r>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	460e      	mov	r6, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	4605      	mov	r5, r0
 8009ab0:	b118      	cbz	r0, 8009aba <__swbuf_r+0x12>
 8009ab2:	6983      	ldr	r3, [r0, #24]
 8009ab4:	b90b      	cbnz	r3, 8009aba <__swbuf_r+0x12>
 8009ab6:	f000 f9d1 	bl	8009e5c <__sinit>
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <__swbuf_r+0x98>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	d12b      	bne.n	8009b18 <__swbuf_r+0x70>
 8009ac0:	686c      	ldr	r4, [r5, #4]
 8009ac2:	69a3      	ldr	r3, [r4, #24]
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	071a      	lsls	r2, r3, #28
 8009aca:	d52f      	bpl.n	8009b2c <__swbuf_r+0x84>
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	b36b      	cbz	r3, 8009b2c <__swbuf_r+0x84>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	6820      	ldr	r0, [r4, #0]
 8009ad4:	1ac0      	subs	r0, r0, r3
 8009ad6:	6963      	ldr	r3, [r4, #20]
 8009ad8:	b2f6      	uxtb	r6, r6
 8009ada:	4283      	cmp	r3, r0
 8009adc:	4637      	mov	r7, r6
 8009ade:	dc04      	bgt.n	8009aea <__swbuf_r+0x42>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f926 	bl	8009d34 <_fflush_r>
 8009ae8:	bb30      	cbnz	r0, 8009b38 <__swbuf_r+0x90>
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	60a3      	str	r3, [r4, #8]
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	6022      	str	r2, [r4, #0]
 8009af6:	701e      	strb	r6, [r3, #0]
 8009af8:	6963      	ldr	r3, [r4, #20]
 8009afa:	3001      	adds	r0, #1
 8009afc:	4283      	cmp	r3, r0
 8009afe:	d004      	beq.n	8009b0a <__swbuf_r+0x62>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	07db      	lsls	r3, r3, #31
 8009b04:	d506      	bpl.n	8009b14 <__swbuf_r+0x6c>
 8009b06:	2e0a      	cmp	r6, #10
 8009b08:	d104      	bne.n	8009b14 <__swbuf_r+0x6c>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f000 f911 	bl	8009d34 <_fflush_r>
 8009b12:	b988      	cbnz	r0, 8009b38 <__swbuf_r+0x90>
 8009b14:	4638      	mov	r0, r7
 8009b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <__swbuf_r+0x9c>)
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	d101      	bne.n	8009b22 <__swbuf_r+0x7a>
 8009b1e:	68ac      	ldr	r4, [r5, #8]
 8009b20:	e7cf      	b.n	8009ac2 <__swbuf_r+0x1a>
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <__swbuf_r+0xa0>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	bf08      	it	eq
 8009b28:	68ec      	ldreq	r4, [r5, #12]
 8009b2a:	e7ca      	b.n	8009ac2 <__swbuf_r+0x1a>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f80c 	bl	8009b4c <__swsetup_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d0cb      	beq.n	8009ad0 <__swbuf_r+0x28>
 8009b38:	f04f 37ff 	mov.w	r7, #4294967295
 8009b3c:	e7ea      	b.n	8009b14 <__swbuf_r+0x6c>
 8009b3e:	bf00      	nop
 8009b40:	0800aa08 	.word	0x0800aa08
 8009b44:	0800aa28 	.word	0x0800aa28
 8009b48:	0800a9e8 	.word	0x0800a9e8

08009b4c <__swsetup_r>:
 8009b4c:	4b32      	ldr	r3, [pc, #200]	; (8009c18 <__swsetup_r+0xcc>)
 8009b4e:	b570      	push	{r4, r5, r6, lr}
 8009b50:	681d      	ldr	r5, [r3, #0]
 8009b52:	4606      	mov	r6, r0
 8009b54:	460c      	mov	r4, r1
 8009b56:	b125      	cbz	r5, 8009b62 <__swsetup_r+0x16>
 8009b58:	69ab      	ldr	r3, [r5, #24]
 8009b5a:	b913      	cbnz	r3, 8009b62 <__swsetup_r+0x16>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f000 f97d 	bl	8009e5c <__sinit>
 8009b62:	4b2e      	ldr	r3, [pc, #184]	; (8009c1c <__swsetup_r+0xd0>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	d10f      	bne.n	8009b88 <__swsetup_r+0x3c>
 8009b68:	686c      	ldr	r4, [r5, #4]
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b70:	0719      	lsls	r1, r3, #28
 8009b72:	d42c      	bmi.n	8009bce <__swsetup_r+0x82>
 8009b74:	06dd      	lsls	r5, r3, #27
 8009b76:	d411      	bmi.n	8009b9c <__swsetup_r+0x50>
 8009b78:	2309      	movs	r3, #9
 8009b7a:	6033      	str	r3, [r6, #0]
 8009b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	f04f 30ff 	mov.w	r0, #4294967295
 8009b86:	e03e      	b.n	8009c06 <__swsetup_r+0xba>
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <__swsetup_r+0xd4>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d101      	bne.n	8009b92 <__swsetup_r+0x46>
 8009b8e:	68ac      	ldr	r4, [r5, #8]
 8009b90:	e7eb      	b.n	8009b6a <__swsetup_r+0x1e>
 8009b92:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <__swsetup_r+0xd8>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	bf08      	it	eq
 8009b98:	68ec      	ldreq	r4, [r5, #12]
 8009b9a:	e7e6      	b.n	8009b6a <__swsetup_r+0x1e>
 8009b9c:	0758      	lsls	r0, r3, #29
 8009b9e:	d512      	bpl.n	8009bc6 <__swsetup_r+0x7a>
 8009ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ba2:	b141      	cbz	r1, 8009bb6 <__swsetup_r+0x6a>
 8009ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba8:	4299      	cmp	r1, r3
 8009baa:	d002      	beq.n	8009bb2 <__swsetup_r+0x66>
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff fdfd 	bl	80097ac <_free_r>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f043 0308 	orr.w	r3, r3, #8
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	b94b      	cbnz	r3, 8009be6 <__swsetup_r+0x9a>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bdc:	d003      	beq.n	8009be6 <__swsetup_r+0x9a>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 fa01 	bl	8009fe8 <__smakebuf_r>
 8009be6:	89a0      	ldrh	r0, [r4, #12]
 8009be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bec:	f010 0301 	ands.w	r3, r0, #1
 8009bf0:	d00a      	beq.n	8009c08 <__swsetup_r+0xbc>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	6963      	ldr	r3, [r4, #20]
 8009bf8:	425b      	negs	r3, r3
 8009bfa:	61a3      	str	r3, [r4, #24]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	b943      	cbnz	r3, 8009c12 <__swsetup_r+0xc6>
 8009c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c04:	d1ba      	bne.n	8009b7c <__swsetup_r+0x30>
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	0781      	lsls	r1, r0, #30
 8009c0a:	bf58      	it	pl
 8009c0c:	6963      	ldrpl	r3, [r4, #20]
 8009c0e:	60a3      	str	r3, [r4, #8]
 8009c10:	e7f4      	b.n	8009bfc <__swsetup_r+0xb0>
 8009c12:	2000      	movs	r0, #0
 8009c14:	e7f7      	b.n	8009c06 <__swsetup_r+0xba>
 8009c16:	bf00      	nop
 8009c18:	24000014 	.word	0x24000014
 8009c1c:	0800aa08 	.word	0x0800aa08
 8009c20:	0800aa28 	.word	0x0800aa28
 8009c24:	0800a9e8 	.word	0x0800a9e8

08009c28 <__sflush_r>:
 8009c28:	898a      	ldrh	r2, [r1, #12]
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	4605      	mov	r5, r0
 8009c30:	0710      	lsls	r0, r2, #28
 8009c32:	460c      	mov	r4, r1
 8009c34:	d458      	bmi.n	8009ce8 <__sflush_r+0xc0>
 8009c36:	684b      	ldr	r3, [r1, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dc05      	bgt.n	8009c48 <__sflush_r+0x20>
 8009c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dc02      	bgt.n	8009c48 <__sflush_r+0x20>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c4a:	2e00      	cmp	r6, #0
 8009c4c:	d0f9      	beq.n	8009c42 <__sflush_r+0x1a>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c54:	682f      	ldr	r7, [r5, #0]
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	d032      	beq.n	8009cc0 <__sflush_r+0x98>
 8009c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	075a      	lsls	r2, r3, #29
 8009c60:	d505      	bpl.n	8009c6e <__sflush_r+0x46>
 8009c62:	6863      	ldr	r3, [r4, #4]
 8009c64:	1ac0      	subs	r0, r0, r3
 8009c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c68:	b10b      	cbz	r3, 8009c6e <__sflush_r+0x46>
 8009c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c6c:	1ac0      	subs	r0, r0, r3
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4602      	mov	r2, r0
 8009c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c74:	6a21      	ldr	r1, [r4, #32]
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b0      	blx	r6
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	d106      	bne.n	8009c8e <__sflush_r+0x66>
 8009c80:	6829      	ldr	r1, [r5, #0]
 8009c82:	291d      	cmp	r1, #29
 8009c84:	d82c      	bhi.n	8009ce0 <__sflush_r+0xb8>
 8009c86:	4a2a      	ldr	r2, [pc, #168]	; (8009d30 <__sflush_r+0x108>)
 8009c88:	40ca      	lsrs	r2, r1
 8009c8a:	07d6      	lsls	r6, r2, #31
 8009c8c:	d528      	bpl.n	8009ce0 <__sflush_r+0xb8>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	6062      	str	r2, [r4, #4]
 8009c92:	04d9      	lsls	r1, r3, #19
 8009c94:	6922      	ldr	r2, [r4, #16]
 8009c96:	6022      	str	r2, [r4, #0]
 8009c98:	d504      	bpl.n	8009ca4 <__sflush_r+0x7c>
 8009c9a:	1c42      	adds	r2, r0, #1
 8009c9c:	d101      	bne.n	8009ca2 <__sflush_r+0x7a>
 8009c9e:	682b      	ldr	r3, [r5, #0]
 8009ca0:	b903      	cbnz	r3, 8009ca4 <__sflush_r+0x7c>
 8009ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ca6:	602f      	str	r7, [r5, #0]
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	d0ca      	beq.n	8009c42 <__sflush_r+0x1a>
 8009cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d002      	beq.n	8009cba <__sflush_r+0x92>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7ff fd79 	bl	80097ac <_free_r>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8009cbe:	e7c1      	b.n	8009c44 <__sflush_r+0x1c>
 8009cc0:	6a21      	ldr	r1, [r4, #32]
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b0      	blx	r6
 8009cc8:	1c41      	adds	r1, r0, #1
 8009cca:	d1c7      	bne.n	8009c5c <__sflush_r+0x34>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0c4      	beq.n	8009c5c <__sflush_r+0x34>
 8009cd2:	2b1d      	cmp	r3, #29
 8009cd4:	d001      	beq.n	8009cda <__sflush_r+0xb2>
 8009cd6:	2b16      	cmp	r3, #22
 8009cd8:	d101      	bne.n	8009cde <__sflush_r+0xb6>
 8009cda:	602f      	str	r7, [r5, #0]
 8009cdc:	e7b1      	b.n	8009c42 <__sflush_r+0x1a>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	e7ad      	b.n	8009c44 <__sflush_r+0x1c>
 8009ce8:	690f      	ldr	r7, [r1, #16]
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	d0a9      	beq.n	8009c42 <__sflush_r+0x1a>
 8009cee:	0793      	lsls	r3, r2, #30
 8009cf0:	680e      	ldr	r6, [r1, #0]
 8009cf2:	bf08      	it	eq
 8009cf4:	694b      	ldreq	r3, [r1, #20]
 8009cf6:	600f      	str	r7, [r1, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	2300      	movne	r3, #0
 8009cfc:	eba6 0807 	sub.w	r8, r6, r7
 8009d00:	608b      	str	r3, [r1, #8]
 8009d02:	f1b8 0f00 	cmp.w	r8, #0
 8009d06:	dd9c      	ble.n	8009c42 <__sflush_r+0x1a>
 8009d08:	6a21      	ldr	r1, [r4, #32]
 8009d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d0c:	4643      	mov	r3, r8
 8009d0e:	463a      	mov	r2, r7
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b0      	blx	r6
 8009d14:	2800      	cmp	r0, #0
 8009d16:	dc06      	bgt.n	8009d26 <__sflush_r+0xfe>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	e78e      	b.n	8009c44 <__sflush_r+0x1c>
 8009d26:	4407      	add	r7, r0
 8009d28:	eba8 0800 	sub.w	r8, r8, r0
 8009d2c:	e7e9      	b.n	8009d02 <__sflush_r+0xda>
 8009d2e:	bf00      	nop
 8009d30:	20400001 	.word	0x20400001

08009d34 <_fflush_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	690b      	ldr	r3, [r1, #16]
 8009d38:	4605      	mov	r5, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	b913      	cbnz	r3, 8009d44 <_fflush_r+0x10>
 8009d3e:	2500      	movs	r5, #0
 8009d40:	4628      	mov	r0, r5
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	b118      	cbz	r0, 8009d4e <_fflush_r+0x1a>
 8009d46:	6983      	ldr	r3, [r0, #24]
 8009d48:	b90b      	cbnz	r3, 8009d4e <_fflush_r+0x1a>
 8009d4a:	f000 f887 	bl	8009e5c <__sinit>
 8009d4e:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <_fflush_r+0x6c>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d11b      	bne.n	8009d8c <_fflush_r+0x58>
 8009d54:	686c      	ldr	r4, [r5, #4]
 8009d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0ef      	beq.n	8009d3e <_fflush_r+0xa>
 8009d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d60:	07d0      	lsls	r0, r2, #31
 8009d62:	d404      	bmi.n	8009d6e <_fflush_r+0x3a>
 8009d64:	0599      	lsls	r1, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_fflush_r+0x3a>
 8009d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6a:	f000 f915 	bl	8009f98 <__retarget_lock_acquire_recursive>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	4621      	mov	r1, r4
 8009d72:	f7ff ff59 	bl	8009c28 <__sflush_r>
 8009d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d78:	07da      	lsls	r2, r3, #31
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	d4e0      	bmi.n	8009d40 <_fflush_r+0xc>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	059b      	lsls	r3, r3, #22
 8009d82:	d4dd      	bmi.n	8009d40 <_fflush_r+0xc>
 8009d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d86:	f000 f908 	bl	8009f9a <__retarget_lock_release_recursive>
 8009d8a:	e7d9      	b.n	8009d40 <_fflush_r+0xc>
 8009d8c:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <_fflush_r+0x70>)
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	d101      	bne.n	8009d96 <_fflush_r+0x62>
 8009d92:	68ac      	ldr	r4, [r5, #8]
 8009d94:	e7df      	b.n	8009d56 <_fflush_r+0x22>
 8009d96:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <_fflush_r+0x74>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	bf08      	it	eq
 8009d9c:	68ec      	ldreq	r4, [r5, #12]
 8009d9e:	e7da      	b.n	8009d56 <_fflush_r+0x22>
 8009da0:	0800aa08 	.word	0x0800aa08
 8009da4:	0800aa28 	.word	0x0800aa28
 8009da8:	0800a9e8 	.word	0x0800a9e8

08009dac <std>:
 8009dac:	2300      	movs	r3, #0
 8009dae:	b510      	push	{r4, lr}
 8009db0:	4604      	mov	r4, r0
 8009db2:	e9c0 3300 	strd	r3, r3, [r0]
 8009db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dba:	6083      	str	r3, [r0, #8]
 8009dbc:	8181      	strh	r1, [r0, #12]
 8009dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8009dc0:	81c2      	strh	r2, [r0, #14]
 8009dc2:	6183      	str	r3, [r0, #24]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	2208      	movs	r2, #8
 8009dc8:	305c      	adds	r0, #92	; 0x5c
 8009dca:	f7ff fce7 	bl	800979c <memset>
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <std+0x38>)
 8009dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <std+0x3c>)
 8009dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <std+0x40>)
 8009dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <std+0x44>)
 8009ddc:	6224      	str	r4, [r4, #32]
 8009dde:	6323      	str	r3, [r4, #48]	; 0x30
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	bf00      	nop
 8009de4:	0800a65d 	.word	0x0800a65d
 8009de8:	0800a67f 	.word	0x0800a67f
 8009dec:	0800a6b7 	.word	0x0800a6b7
 8009df0:	0800a6db 	.word	0x0800a6db

08009df4 <_cleanup_r>:
 8009df4:	4901      	ldr	r1, [pc, #4]	; (8009dfc <_cleanup_r+0x8>)
 8009df6:	f000 b8af 	b.w	8009f58 <_fwalk_reent>
 8009dfa:	bf00      	nop
 8009dfc:	08009d35 	.word	0x08009d35

08009e00 <__sfmoreglue>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	2268      	movs	r2, #104	; 0x68
 8009e04:	1e4d      	subs	r5, r1, #1
 8009e06:	4355      	muls	r5, r2
 8009e08:	460e      	mov	r6, r1
 8009e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e0e:	f7ff fd39 	bl	8009884 <_malloc_r>
 8009e12:	4604      	mov	r4, r0
 8009e14:	b140      	cbz	r0, 8009e28 <__sfmoreglue+0x28>
 8009e16:	2100      	movs	r1, #0
 8009e18:	e9c0 1600 	strd	r1, r6, [r0]
 8009e1c:	300c      	adds	r0, #12
 8009e1e:	60a0      	str	r0, [r4, #8]
 8009e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e24:	f7ff fcba 	bl	800979c <memset>
 8009e28:	4620      	mov	r0, r4
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}

08009e2c <__sfp_lock_acquire>:
 8009e2c:	4801      	ldr	r0, [pc, #4]	; (8009e34 <__sfp_lock_acquire+0x8>)
 8009e2e:	f000 b8b3 	b.w	8009f98 <__retarget_lock_acquire_recursive>
 8009e32:	bf00      	nop
 8009e34:	2401ea59 	.word	0x2401ea59

08009e38 <__sfp_lock_release>:
 8009e38:	4801      	ldr	r0, [pc, #4]	; (8009e40 <__sfp_lock_release+0x8>)
 8009e3a:	f000 b8ae 	b.w	8009f9a <__retarget_lock_release_recursive>
 8009e3e:	bf00      	nop
 8009e40:	2401ea59 	.word	0x2401ea59

08009e44 <__sinit_lock_acquire>:
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__sinit_lock_acquire+0x8>)
 8009e46:	f000 b8a7 	b.w	8009f98 <__retarget_lock_acquire_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	2401ea5a 	.word	0x2401ea5a

08009e50 <__sinit_lock_release>:
 8009e50:	4801      	ldr	r0, [pc, #4]	; (8009e58 <__sinit_lock_release+0x8>)
 8009e52:	f000 b8a2 	b.w	8009f9a <__retarget_lock_release_recursive>
 8009e56:	bf00      	nop
 8009e58:	2401ea5a 	.word	0x2401ea5a

08009e5c <__sinit>:
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	4604      	mov	r4, r0
 8009e60:	f7ff fff0 	bl	8009e44 <__sinit_lock_acquire>
 8009e64:	69a3      	ldr	r3, [r4, #24]
 8009e66:	b11b      	cbz	r3, 8009e70 <__sinit+0x14>
 8009e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e6c:	f7ff bff0 	b.w	8009e50 <__sinit_lock_release>
 8009e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e74:	6523      	str	r3, [r4, #80]	; 0x50
 8009e76:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <__sinit+0x68>)
 8009e78:	4a13      	ldr	r2, [pc, #76]	; (8009ec8 <__sinit+0x6c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	bf04      	itt	eq
 8009e82:	2301      	moveq	r3, #1
 8009e84:	61a3      	streq	r3, [r4, #24]
 8009e86:	4620      	mov	r0, r4
 8009e88:	f000 f820 	bl	8009ecc <__sfp>
 8009e8c:	6060      	str	r0, [r4, #4]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 f81c 	bl	8009ecc <__sfp>
 8009e94:	60a0      	str	r0, [r4, #8]
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 f818 	bl	8009ecc <__sfp>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	60e0      	str	r0, [r4, #12]
 8009ea0:	2104      	movs	r1, #4
 8009ea2:	6860      	ldr	r0, [r4, #4]
 8009ea4:	f7ff ff82 	bl	8009dac <std>
 8009ea8:	68a0      	ldr	r0, [r4, #8]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	2109      	movs	r1, #9
 8009eae:	f7ff ff7d 	bl	8009dac <std>
 8009eb2:	68e0      	ldr	r0, [r4, #12]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	2112      	movs	r1, #18
 8009eb8:	f7ff ff78 	bl	8009dac <std>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	61a3      	str	r3, [r4, #24]
 8009ec0:	e7d2      	b.n	8009e68 <__sinit+0xc>
 8009ec2:	bf00      	nop
 8009ec4:	0800a9e4 	.word	0x0800a9e4
 8009ec8:	08009df5 	.word	0x08009df5

08009ecc <__sfp>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	4607      	mov	r7, r0
 8009ed0:	f7ff ffac 	bl	8009e2c <__sfp_lock_acquire>
 8009ed4:	4b1e      	ldr	r3, [pc, #120]	; (8009f50 <__sfp+0x84>)
 8009ed6:	681e      	ldr	r6, [r3, #0]
 8009ed8:	69b3      	ldr	r3, [r6, #24]
 8009eda:	b913      	cbnz	r3, 8009ee2 <__sfp+0x16>
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff ffbd 	bl	8009e5c <__sinit>
 8009ee2:	3648      	adds	r6, #72	; 0x48
 8009ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	d503      	bpl.n	8009ef4 <__sfp+0x28>
 8009eec:	6833      	ldr	r3, [r6, #0]
 8009eee:	b30b      	cbz	r3, 8009f34 <__sfp+0x68>
 8009ef0:	6836      	ldr	r6, [r6, #0]
 8009ef2:	e7f7      	b.n	8009ee4 <__sfp+0x18>
 8009ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ef8:	b9d5      	cbnz	r5, 8009f30 <__sfp+0x64>
 8009efa:	4b16      	ldr	r3, [pc, #88]	; (8009f54 <__sfp+0x88>)
 8009efc:	60e3      	str	r3, [r4, #12]
 8009efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f02:	6665      	str	r5, [r4, #100]	; 0x64
 8009f04:	f000 f847 	bl	8009f96 <__retarget_lock_init_recursive>
 8009f08:	f7ff ff96 	bl	8009e38 <__sfp_lock_release>
 8009f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f14:	6025      	str	r5, [r4, #0]
 8009f16:	61a5      	str	r5, [r4, #24]
 8009f18:	2208      	movs	r2, #8
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f20:	f7ff fc3c 	bl	800979c <memset>
 8009f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f30:	3468      	adds	r4, #104	; 0x68
 8009f32:	e7d9      	b.n	8009ee8 <__sfp+0x1c>
 8009f34:	2104      	movs	r1, #4
 8009f36:	4638      	mov	r0, r7
 8009f38:	f7ff ff62 	bl	8009e00 <__sfmoreglue>
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	6030      	str	r0, [r6, #0]
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d1d5      	bne.n	8009ef0 <__sfp+0x24>
 8009f44:	f7ff ff78 	bl	8009e38 <__sfp_lock_release>
 8009f48:	230c      	movs	r3, #12
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	e7ee      	b.n	8009f2c <__sfp+0x60>
 8009f4e:	bf00      	nop
 8009f50:	0800a9e4 	.word	0x0800a9e4
 8009f54:	ffff0001 	.word	0xffff0001

08009f58 <_fwalk_reent>:
 8009f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	4688      	mov	r8, r1
 8009f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f64:	2700      	movs	r7, #0
 8009f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009f6e:	d505      	bpl.n	8009f7c <_fwalk_reent+0x24>
 8009f70:	6824      	ldr	r4, [r4, #0]
 8009f72:	2c00      	cmp	r4, #0
 8009f74:	d1f7      	bne.n	8009f66 <_fwalk_reent+0xe>
 8009f76:	4638      	mov	r0, r7
 8009f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7c:	89ab      	ldrh	r3, [r5, #12]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d907      	bls.n	8009f92 <_fwalk_reent+0x3a>
 8009f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f86:	3301      	adds	r3, #1
 8009f88:	d003      	beq.n	8009f92 <_fwalk_reent+0x3a>
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	47c0      	blx	r8
 8009f90:	4307      	orrs	r7, r0
 8009f92:	3568      	adds	r5, #104	; 0x68
 8009f94:	e7e9      	b.n	8009f6a <_fwalk_reent+0x12>

08009f96 <__retarget_lock_init_recursive>:
 8009f96:	4770      	bx	lr

08009f98 <__retarget_lock_acquire_recursive>:
 8009f98:	4770      	bx	lr

08009f9a <__retarget_lock_release_recursive>:
 8009f9a:	4770      	bx	lr

08009f9c <__swhatbuf_r>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	460e      	mov	r6, r1
 8009fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	b096      	sub	sp, #88	; 0x58
 8009fa8:	4614      	mov	r4, r2
 8009faa:	461d      	mov	r5, r3
 8009fac:	da08      	bge.n	8009fc0 <__swhatbuf_r+0x24>
 8009fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	602a      	str	r2, [r5, #0]
 8009fb6:	061a      	lsls	r2, r3, #24
 8009fb8:	d410      	bmi.n	8009fdc <__swhatbuf_r+0x40>
 8009fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fbe:	e00e      	b.n	8009fde <__swhatbuf_r+0x42>
 8009fc0:	466a      	mov	r2, sp
 8009fc2:	f000 fbb1 	bl	800a728 <_fstat_r>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	dbf1      	blt.n	8009fae <__swhatbuf_r+0x12>
 8009fca:	9a01      	ldr	r2, [sp, #4]
 8009fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fd4:	425a      	negs	r2, r3
 8009fd6:	415a      	adcs	r2, r3
 8009fd8:	602a      	str	r2, [r5, #0]
 8009fda:	e7ee      	b.n	8009fba <__swhatbuf_r+0x1e>
 8009fdc:	2340      	movs	r3, #64	; 0x40
 8009fde:	2000      	movs	r0, #0
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	b016      	add	sp, #88	; 0x58
 8009fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fe8 <__smakebuf_r>:
 8009fe8:	898b      	ldrh	r3, [r1, #12]
 8009fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fec:	079d      	lsls	r5, r3, #30
 8009fee:	4606      	mov	r6, r0
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	d507      	bpl.n	800a004 <__smakebuf_r+0x1c>
 8009ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	6123      	str	r3, [r4, #16]
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	6163      	str	r3, [r4, #20]
 800a000:	b002      	add	sp, #8
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	ab01      	add	r3, sp, #4
 800a006:	466a      	mov	r2, sp
 800a008:	f7ff ffc8 	bl	8009f9c <__swhatbuf_r>
 800a00c:	9900      	ldr	r1, [sp, #0]
 800a00e:	4605      	mov	r5, r0
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff fc37 	bl	8009884 <_malloc_r>
 800a016:	b948      	cbnz	r0, 800a02c <__smakebuf_r+0x44>
 800a018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a01c:	059a      	lsls	r2, r3, #22
 800a01e:	d4ef      	bmi.n	800a000 <__smakebuf_r+0x18>
 800a020:	f023 0303 	bic.w	r3, r3, #3
 800a024:	f043 0302 	orr.w	r3, r3, #2
 800a028:	81a3      	strh	r3, [r4, #12]
 800a02a:	e7e3      	b.n	8009ff4 <__smakebuf_r+0xc>
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <__smakebuf_r+0x7c>)
 800a02e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	6020      	str	r0, [r4, #0]
 800a034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	9b00      	ldr	r3, [sp, #0]
 800a03c:	6163      	str	r3, [r4, #20]
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	6120      	str	r0, [r4, #16]
 800a042:	b15b      	cbz	r3, 800a05c <__smakebuf_r+0x74>
 800a044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 fb7f 	bl	800a74c <_isatty_r>
 800a04e:	b128      	cbz	r0, 800a05c <__smakebuf_r+0x74>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	89a0      	ldrh	r0, [r4, #12]
 800a05e:	4305      	orrs	r5, r0
 800a060:	81a5      	strh	r5, [r4, #12]
 800a062:	e7cd      	b.n	800a000 <__smakebuf_r+0x18>
 800a064:	08009df5 	.word	0x08009df5

0800a068 <__malloc_lock>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__malloc_lock+0x8>)
 800a06a:	f7ff bf95 	b.w	8009f98 <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	2401ea58 	.word	0x2401ea58

0800a074 <__malloc_unlock>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__malloc_unlock+0x8>)
 800a076:	f7ff bf90 	b.w	8009f9a <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	2401ea58 	.word	0x2401ea58

0800a080 <__sfputc_r>:
 800a080:	6893      	ldr	r3, [r2, #8]
 800a082:	3b01      	subs	r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	b410      	push	{r4}
 800a088:	6093      	str	r3, [r2, #8]
 800a08a:	da08      	bge.n	800a09e <__sfputc_r+0x1e>
 800a08c:	6994      	ldr	r4, [r2, #24]
 800a08e:	42a3      	cmp	r3, r4
 800a090:	db01      	blt.n	800a096 <__sfputc_r+0x16>
 800a092:	290a      	cmp	r1, #10
 800a094:	d103      	bne.n	800a09e <__sfputc_r+0x1e>
 800a096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a09a:	f7ff bd05 	b.w	8009aa8 <__swbuf_r>
 800a09e:	6813      	ldr	r3, [r2, #0]
 800a0a0:	1c58      	adds	r0, r3, #1
 800a0a2:	6010      	str	r0, [r2, #0]
 800a0a4:	7019      	strb	r1, [r3, #0]
 800a0a6:	4608      	mov	r0, r1
 800a0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <__sfputs_r>:
 800a0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	18d5      	adds	r5, r2, r3
 800a0b8:	42ac      	cmp	r4, r5
 800a0ba:	d101      	bne.n	800a0c0 <__sfputs_r+0x12>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e007      	b.n	800a0d0 <__sfputs_r+0x22>
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	463a      	mov	r2, r7
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ffda 	bl	800a080 <__sfputc_r>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d1f3      	bne.n	800a0b8 <__sfputs_r+0xa>
 800a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0d4 <_vfiprintf_r>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	460d      	mov	r5, r1
 800a0da:	b09d      	sub	sp, #116	; 0x74
 800a0dc:	4614      	mov	r4, r2
 800a0de:	4698      	mov	r8, r3
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	b118      	cbz	r0, 800a0ec <_vfiprintf_r+0x18>
 800a0e4:	6983      	ldr	r3, [r0, #24]
 800a0e6:	b90b      	cbnz	r3, 800a0ec <_vfiprintf_r+0x18>
 800a0e8:	f7ff feb8 	bl	8009e5c <__sinit>
 800a0ec:	4b89      	ldr	r3, [pc, #548]	; (800a314 <_vfiprintf_r+0x240>)
 800a0ee:	429d      	cmp	r5, r3
 800a0f0:	d11b      	bne.n	800a12a <_vfiprintf_r+0x56>
 800a0f2:	6875      	ldr	r5, [r6, #4]
 800a0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f6:	07d9      	lsls	r1, r3, #31
 800a0f8:	d405      	bmi.n	800a106 <_vfiprintf_r+0x32>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	059a      	lsls	r2, r3, #22
 800a0fe:	d402      	bmi.n	800a106 <_vfiprintf_r+0x32>
 800a100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a102:	f7ff ff49 	bl	8009f98 <__retarget_lock_acquire_recursive>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	071b      	lsls	r3, r3, #28
 800a10a:	d501      	bpl.n	800a110 <_vfiprintf_r+0x3c>
 800a10c:	692b      	ldr	r3, [r5, #16]
 800a10e:	b9eb      	cbnz	r3, 800a14c <_vfiprintf_r+0x78>
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff fd1a 	bl	8009b4c <__swsetup_r>
 800a118:	b1c0      	cbz	r0, 800a14c <_vfiprintf_r+0x78>
 800a11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a11c:	07dc      	lsls	r4, r3, #31
 800a11e:	d50e      	bpl.n	800a13e <_vfiprintf_r+0x6a>
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	b01d      	add	sp, #116	; 0x74
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	4b7b      	ldr	r3, [pc, #492]	; (800a318 <_vfiprintf_r+0x244>)
 800a12c:	429d      	cmp	r5, r3
 800a12e:	d101      	bne.n	800a134 <_vfiprintf_r+0x60>
 800a130:	68b5      	ldr	r5, [r6, #8]
 800a132:	e7df      	b.n	800a0f4 <_vfiprintf_r+0x20>
 800a134:	4b79      	ldr	r3, [pc, #484]	; (800a31c <_vfiprintf_r+0x248>)
 800a136:	429d      	cmp	r5, r3
 800a138:	bf08      	it	eq
 800a13a:	68f5      	ldreq	r5, [r6, #12]
 800a13c:	e7da      	b.n	800a0f4 <_vfiprintf_r+0x20>
 800a13e:	89ab      	ldrh	r3, [r5, #12]
 800a140:	0598      	lsls	r0, r3, #22
 800a142:	d4ed      	bmi.n	800a120 <_vfiprintf_r+0x4c>
 800a144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a146:	f7ff ff28 	bl	8009f9a <__retarget_lock_release_recursive>
 800a14a:	e7e9      	b.n	800a120 <_vfiprintf_r+0x4c>
 800a14c:	2300      	movs	r3, #0
 800a14e:	9309      	str	r3, [sp, #36]	; 0x24
 800a150:	2320      	movs	r3, #32
 800a152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a156:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15a:	2330      	movs	r3, #48	; 0x30
 800a15c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a320 <_vfiprintf_r+0x24c>
 800a160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a164:	f04f 0901 	mov.w	r9, #1
 800a168:	4623      	mov	r3, r4
 800a16a:	469a      	mov	sl, r3
 800a16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a170:	b10a      	cbz	r2, 800a176 <_vfiprintf_r+0xa2>
 800a172:	2a25      	cmp	r2, #37	; 0x25
 800a174:	d1f9      	bne.n	800a16a <_vfiprintf_r+0x96>
 800a176:	ebba 0b04 	subs.w	fp, sl, r4
 800a17a:	d00b      	beq.n	800a194 <_vfiprintf_r+0xc0>
 800a17c:	465b      	mov	r3, fp
 800a17e:	4622      	mov	r2, r4
 800a180:	4629      	mov	r1, r5
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ff93 	bl	800a0ae <__sfputs_r>
 800a188:	3001      	adds	r0, #1
 800a18a:	f000 80aa 	beq.w	800a2e2 <_vfiprintf_r+0x20e>
 800a18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a190:	445a      	add	r2, fp
 800a192:	9209      	str	r2, [sp, #36]	; 0x24
 800a194:	f89a 3000 	ldrb.w	r3, [sl]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 80a2 	beq.w	800a2e2 <_vfiprintf_r+0x20e>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	9307      	str	r3, [sp, #28]
 800a1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b6:	4654      	mov	r4, sl
 800a1b8:	2205      	movs	r2, #5
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	4858      	ldr	r0, [pc, #352]	; (800a320 <_vfiprintf_r+0x24c>)
 800a1c0:	f7f6 f88e 	bl	80002e0 <memchr>
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	b9d8      	cbnz	r0, 800a200 <_vfiprintf_r+0x12c>
 800a1c8:	06d1      	lsls	r1, r2, #27
 800a1ca:	bf44      	itt	mi
 800a1cc:	2320      	movmi	r3, #32
 800a1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d2:	0713      	lsls	r3, r2, #28
 800a1d4:	bf44      	itt	mi
 800a1d6:	232b      	movmi	r3, #43	; 0x2b
 800a1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e2:	d015      	beq.n	800a210 <_vfiprintf_r+0x13c>
 800a1e4:	9a07      	ldr	r2, [sp, #28]
 800a1e6:	4654      	mov	r4, sl
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f04f 0c0a 	mov.w	ip, #10
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f4:	3b30      	subs	r3, #48	; 0x30
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	d94e      	bls.n	800a298 <_vfiprintf_r+0x1c4>
 800a1fa:	b1b0      	cbz	r0, 800a22a <_vfiprintf_r+0x156>
 800a1fc:	9207      	str	r2, [sp, #28]
 800a1fe:	e014      	b.n	800a22a <_vfiprintf_r+0x156>
 800a200:	eba0 0308 	sub.w	r3, r0, r8
 800a204:	fa09 f303 	lsl.w	r3, r9, r3
 800a208:	4313      	orrs	r3, r2
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	46a2      	mov	sl, r4
 800a20e:	e7d2      	b.n	800a1b6 <_vfiprintf_r+0xe2>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	1d19      	adds	r1, r3, #4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	9103      	str	r1, [sp, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbb      	ittet	lt
 800a21c:	425b      	neglt	r3, r3
 800a21e:	f042 0202 	orrlt.w	r2, r2, #2
 800a222:	9307      	strge	r3, [sp, #28]
 800a224:	9307      	strlt	r3, [sp, #28]
 800a226:	bfb8      	it	lt
 800a228:	9204      	strlt	r2, [sp, #16]
 800a22a:	7823      	ldrb	r3, [r4, #0]
 800a22c:	2b2e      	cmp	r3, #46	; 0x2e
 800a22e:	d10c      	bne.n	800a24a <_vfiprintf_r+0x176>
 800a230:	7863      	ldrb	r3, [r4, #1]
 800a232:	2b2a      	cmp	r3, #42	; 0x2a
 800a234:	d135      	bne.n	800a2a2 <_vfiprintf_r+0x1ce>
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	1d1a      	adds	r2, r3, #4
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	9203      	str	r2, [sp, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bfb8      	it	lt
 800a242:	f04f 33ff 	movlt.w	r3, #4294967295
 800a246:	3402      	adds	r4, #2
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a330 <_vfiprintf_r+0x25c>
 800a24e:	7821      	ldrb	r1, [r4, #0]
 800a250:	2203      	movs	r2, #3
 800a252:	4650      	mov	r0, sl
 800a254:	f7f6 f844 	bl	80002e0 <memchr>
 800a258:	b140      	cbz	r0, 800a26c <_vfiprintf_r+0x198>
 800a25a:	2340      	movs	r3, #64	; 0x40
 800a25c:	eba0 000a 	sub.w	r0, r0, sl
 800a260:	fa03 f000 	lsl.w	r0, r3, r0
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	4303      	orrs	r3, r0
 800a268:	3401      	adds	r4, #1
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a270:	482c      	ldr	r0, [pc, #176]	; (800a324 <_vfiprintf_r+0x250>)
 800a272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a276:	2206      	movs	r2, #6
 800a278:	f7f6 f832 	bl	80002e0 <memchr>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d03f      	beq.n	800a300 <_vfiprintf_r+0x22c>
 800a280:	4b29      	ldr	r3, [pc, #164]	; (800a328 <_vfiprintf_r+0x254>)
 800a282:	bb1b      	cbnz	r3, 800a2cc <_vfiprintf_r+0x1f8>
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	3307      	adds	r3, #7
 800a288:	f023 0307 	bic.w	r3, r3, #7
 800a28c:	3308      	adds	r3, #8
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	443b      	add	r3, r7
 800a294:	9309      	str	r3, [sp, #36]	; 0x24
 800a296:	e767      	b.n	800a168 <_vfiprintf_r+0x94>
 800a298:	fb0c 3202 	mla	r2, ip, r2, r3
 800a29c:	460c      	mov	r4, r1
 800a29e:	2001      	movs	r0, #1
 800a2a0:	e7a5      	b.n	800a1ee <_vfiprintf_r+0x11a>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	3401      	adds	r4, #1
 800a2a6:	9305      	str	r3, [sp, #20]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	f04f 0c0a 	mov.w	ip, #10
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b4:	3a30      	subs	r2, #48	; 0x30
 800a2b6:	2a09      	cmp	r2, #9
 800a2b8:	d903      	bls.n	800a2c2 <_vfiprintf_r+0x1ee>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0c5      	beq.n	800a24a <_vfiprintf_r+0x176>
 800a2be:	9105      	str	r1, [sp, #20]
 800a2c0:	e7c3      	b.n	800a24a <_vfiprintf_r+0x176>
 800a2c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e7f0      	b.n	800a2ae <_vfiprintf_r+0x1da>
 800a2cc:	ab03      	add	r3, sp, #12
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	4b16      	ldr	r3, [pc, #88]	; (800a32c <_vfiprintf_r+0x258>)
 800a2d4:	a904      	add	r1, sp, #16
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f3af 8000 	nop.w
 800a2dc:	4607      	mov	r7, r0
 800a2de:	1c78      	adds	r0, r7, #1
 800a2e0:	d1d6      	bne.n	800a290 <_vfiprintf_r+0x1bc>
 800a2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e4:	07d9      	lsls	r1, r3, #31
 800a2e6:	d405      	bmi.n	800a2f4 <_vfiprintf_r+0x220>
 800a2e8:	89ab      	ldrh	r3, [r5, #12]
 800a2ea:	059a      	lsls	r2, r3, #22
 800a2ec:	d402      	bmi.n	800a2f4 <_vfiprintf_r+0x220>
 800a2ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2f0:	f7ff fe53 	bl	8009f9a <__retarget_lock_release_recursive>
 800a2f4:	89ab      	ldrh	r3, [r5, #12]
 800a2f6:	065b      	lsls	r3, r3, #25
 800a2f8:	f53f af12 	bmi.w	800a120 <_vfiprintf_r+0x4c>
 800a2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2fe:	e711      	b.n	800a124 <_vfiprintf_r+0x50>
 800a300:	ab03      	add	r3, sp, #12
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	462a      	mov	r2, r5
 800a306:	4b09      	ldr	r3, [pc, #36]	; (800a32c <_vfiprintf_r+0x258>)
 800a308:	a904      	add	r1, sp, #16
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 f880 	bl	800a410 <_printf_i>
 800a310:	e7e4      	b.n	800a2dc <_vfiprintf_r+0x208>
 800a312:	bf00      	nop
 800a314:	0800aa08 	.word	0x0800aa08
 800a318:	0800aa28 	.word	0x0800aa28
 800a31c:	0800a9e8 	.word	0x0800a9e8
 800a320:	0800aa48 	.word	0x0800aa48
 800a324:	0800aa52 	.word	0x0800aa52
 800a328:	00000000 	.word	0x00000000
 800a32c:	0800a0af 	.word	0x0800a0af
 800a330:	0800aa4e 	.word	0x0800aa4e

0800a334 <_printf_common>:
 800a334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a338:	4616      	mov	r6, r2
 800a33a:	4699      	mov	r9, r3
 800a33c:	688a      	ldr	r2, [r1, #8]
 800a33e:	690b      	ldr	r3, [r1, #16]
 800a340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a344:	4293      	cmp	r3, r2
 800a346:	bfb8      	it	lt
 800a348:	4613      	movlt	r3, r2
 800a34a:	6033      	str	r3, [r6, #0]
 800a34c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a350:	4607      	mov	r7, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b10a      	cbz	r2, 800a35a <_printf_common+0x26>
 800a356:	3301      	adds	r3, #1
 800a358:	6033      	str	r3, [r6, #0]
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	0699      	lsls	r1, r3, #26
 800a35e:	bf42      	ittt	mi
 800a360:	6833      	ldrmi	r3, [r6, #0]
 800a362:	3302      	addmi	r3, #2
 800a364:	6033      	strmi	r3, [r6, #0]
 800a366:	6825      	ldr	r5, [r4, #0]
 800a368:	f015 0506 	ands.w	r5, r5, #6
 800a36c:	d106      	bne.n	800a37c <_printf_common+0x48>
 800a36e:	f104 0a19 	add.w	sl, r4, #25
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	6832      	ldr	r2, [r6, #0]
 800a376:	1a9b      	subs	r3, r3, r2
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dc26      	bgt.n	800a3ca <_printf_common+0x96>
 800a37c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a380:	1e13      	subs	r3, r2, #0
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	bf18      	it	ne
 800a386:	2301      	movne	r3, #1
 800a388:	0692      	lsls	r2, r2, #26
 800a38a:	d42b      	bmi.n	800a3e4 <_printf_common+0xb0>
 800a38c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a390:	4649      	mov	r1, r9
 800a392:	4638      	mov	r0, r7
 800a394:	47c0      	blx	r8
 800a396:	3001      	adds	r0, #1
 800a398:	d01e      	beq.n	800a3d8 <_printf_common+0xa4>
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	68e5      	ldr	r5, [r4, #12]
 800a39e:	6832      	ldr	r2, [r6, #0]
 800a3a0:	f003 0306 	and.w	r3, r3, #6
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	bf08      	it	eq
 800a3a8:	1aad      	subeq	r5, r5, r2
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	6922      	ldr	r2, [r4, #16]
 800a3ae:	bf0c      	ite	eq
 800a3b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3b4:	2500      	movne	r5, #0
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	bfc4      	itt	gt
 800a3ba:	1a9b      	subgt	r3, r3, r2
 800a3bc:	18ed      	addgt	r5, r5, r3
 800a3be:	2600      	movs	r6, #0
 800a3c0:	341a      	adds	r4, #26
 800a3c2:	42b5      	cmp	r5, r6
 800a3c4:	d11a      	bne.n	800a3fc <_printf_common+0xc8>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	e008      	b.n	800a3dc <_printf_common+0xa8>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4652      	mov	r2, sl
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	47c0      	blx	r8
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d103      	bne.n	800a3e0 <_printf_common+0xac>
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	e7c6      	b.n	800a372 <_printf_common+0x3e>
 800a3e4:	18e1      	adds	r1, r4, r3
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	2030      	movs	r0, #48	; 0x30
 800a3ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3ee:	4422      	add	r2, r4
 800a3f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3f8:	3302      	adds	r3, #2
 800a3fa:	e7c7      	b.n	800a38c <_printf_common+0x58>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4622      	mov	r2, r4
 800a400:	4649      	mov	r1, r9
 800a402:	4638      	mov	r0, r7
 800a404:	47c0      	blx	r8
 800a406:	3001      	adds	r0, #1
 800a408:	d0e6      	beq.n	800a3d8 <_printf_common+0xa4>
 800a40a:	3601      	adds	r6, #1
 800a40c:	e7d9      	b.n	800a3c2 <_printf_common+0x8e>
	...

0800a410 <_printf_i>:
 800a410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	7e0f      	ldrb	r7, [r1, #24]
 800a416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a418:	2f78      	cmp	r7, #120	; 0x78
 800a41a:	4691      	mov	r9, r2
 800a41c:	4680      	mov	r8, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	469a      	mov	sl, r3
 800a422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a426:	d807      	bhi.n	800a438 <_printf_i+0x28>
 800a428:	2f62      	cmp	r7, #98	; 0x62
 800a42a:	d80a      	bhi.n	800a442 <_printf_i+0x32>
 800a42c:	2f00      	cmp	r7, #0
 800a42e:	f000 80d8 	beq.w	800a5e2 <_printf_i+0x1d2>
 800a432:	2f58      	cmp	r7, #88	; 0x58
 800a434:	f000 80a3 	beq.w	800a57e <_printf_i+0x16e>
 800a438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a43c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a440:	e03a      	b.n	800a4b8 <_printf_i+0xa8>
 800a442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a446:	2b15      	cmp	r3, #21
 800a448:	d8f6      	bhi.n	800a438 <_printf_i+0x28>
 800a44a:	a101      	add	r1, pc, #4	; (adr r1, 800a450 <_printf_i+0x40>)
 800a44c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	0800a4bd 	.word	0x0800a4bd
 800a458:	0800a439 	.word	0x0800a439
 800a45c:	0800a439 	.word	0x0800a439
 800a460:	0800a439 	.word	0x0800a439
 800a464:	0800a439 	.word	0x0800a439
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a439 	.word	0x0800a439
 800a470:	0800a439 	.word	0x0800a439
 800a474:	0800a439 	.word	0x0800a439
 800a478:	0800a439 	.word	0x0800a439
 800a47c:	0800a5c9 	.word	0x0800a5c9
 800a480:	0800a4ed 	.word	0x0800a4ed
 800a484:	0800a5ab 	.word	0x0800a5ab
 800a488:	0800a439 	.word	0x0800a439
 800a48c:	0800a439 	.word	0x0800a439
 800a490:	0800a5eb 	.word	0x0800a5eb
 800a494:	0800a439 	.word	0x0800a439
 800a498:	0800a4ed 	.word	0x0800a4ed
 800a49c:	0800a439 	.word	0x0800a439
 800a4a0:	0800a439 	.word	0x0800a439
 800a4a4:	0800a5b3 	.word	0x0800a5b3
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	1d1a      	adds	r2, r3, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	602a      	str	r2, [r5, #0]
 800a4b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e0a3      	b.n	800a604 <_printf_i+0x1f4>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	6829      	ldr	r1, [r5, #0]
 800a4c0:	0606      	lsls	r6, r0, #24
 800a4c2:	f101 0304 	add.w	r3, r1, #4
 800a4c6:	d50a      	bpl.n	800a4de <_printf_i+0xce>
 800a4c8:	680e      	ldr	r6, [r1, #0]
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	2e00      	cmp	r6, #0
 800a4ce:	da03      	bge.n	800a4d8 <_printf_i+0xc8>
 800a4d0:	232d      	movs	r3, #45	; 0x2d
 800a4d2:	4276      	negs	r6, r6
 800a4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4d8:	485e      	ldr	r0, [pc, #376]	; (800a654 <_printf_i+0x244>)
 800a4da:	230a      	movs	r3, #10
 800a4dc:	e019      	b.n	800a512 <_printf_i+0x102>
 800a4de:	680e      	ldr	r6, [r1, #0]
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4e6:	bf18      	it	ne
 800a4e8:	b236      	sxthne	r6, r6
 800a4ea:	e7ef      	b.n	800a4cc <_printf_i+0xbc>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	6820      	ldr	r0, [r4, #0]
 800a4f0:	1d19      	adds	r1, r3, #4
 800a4f2:	6029      	str	r1, [r5, #0]
 800a4f4:	0601      	lsls	r1, r0, #24
 800a4f6:	d501      	bpl.n	800a4fc <_printf_i+0xec>
 800a4f8:	681e      	ldr	r6, [r3, #0]
 800a4fa:	e002      	b.n	800a502 <_printf_i+0xf2>
 800a4fc:	0646      	lsls	r6, r0, #25
 800a4fe:	d5fb      	bpl.n	800a4f8 <_printf_i+0xe8>
 800a500:	881e      	ldrh	r6, [r3, #0]
 800a502:	4854      	ldr	r0, [pc, #336]	; (800a654 <_printf_i+0x244>)
 800a504:	2f6f      	cmp	r7, #111	; 0x6f
 800a506:	bf0c      	ite	eq
 800a508:	2308      	moveq	r3, #8
 800a50a:	230a      	movne	r3, #10
 800a50c:	2100      	movs	r1, #0
 800a50e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a512:	6865      	ldr	r5, [r4, #4]
 800a514:	60a5      	str	r5, [r4, #8]
 800a516:	2d00      	cmp	r5, #0
 800a518:	bfa2      	ittt	ge
 800a51a:	6821      	ldrge	r1, [r4, #0]
 800a51c:	f021 0104 	bicge.w	r1, r1, #4
 800a520:	6021      	strge	r1, [r4, #0]
 800a522:	b90e      	cbnz	r6, 800a528 <_printf_i+0x118>
 800a524:	2d00      	cmp	r5, #0
 800a526:	d04d      	beq.n	800a5c4 <_printf_i+0x1b4>
 800a528:	4615      	mov	r5, r2
 800a52a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a52e:	fb03 6711 	mls	r7, r3, r1, r6
 800a532:	5dc7      	ldrb	r7, [r0, r7]
 800a534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a538:	4637      	mov	r7, r6
 800a53a:	42bb      	cmp	r3, r7
 800a53c:	460e      	mov	r6, r1
 800a53e:	d9f4      	bls.n	800a52a <_printf_i+0x11a>
 800a540:	2b08      	cmp	r3, #8
 800a542:	d10b      	bne.n	800a55c <_printf_i+0x14c>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	07de      	lsls	r6, r3, #31
 800a548:	d508      	bpl.n	800a55c <_printf_i+0x14c>
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	6861      	ldr	r1, [r4, #4]
 800a54e:	4299      	cmp	r1, r3
 800a550:	bfde      	ittt	le
 800a552:	2330      	movle	r3, #48	; 0x30
 800a554:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a558:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a55c:	1b52      	subs	r2, r2, r5
 800a55e:	6122      	str	r2, [r4, #16]
 800a560:	f8cd a000 	str.w	sl, [sp]
 800a564:	464b      	mov	r3, r9
 800a566:	aa03      	add	r2, sp, #12
 800a568:	4621      	mov	r1, r4
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7ff fee2 	bl	800a334 <_printf_common>
 800a570:	3001      	adds	r0, #1
 800a572:	d14c      	bne.n	800a60e <_printf_i+0x1fe>
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	b004      	add	sp, #16
 800a57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57e:	4835      	ldr	r0, [pc, #212]	; (800a654 <_printf_i+0x244>)
 800a580:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a584:	6829      	ldr	r1, [r5, #0]
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	f851 6b04 	ldr.w	r6, [r1], #4
 800a58c:	6029      	str	r1, [r5, #0]
 800a58e:	061d      	lsls	r5, r3, #24
 800a590:	d514      	bpl.n	800a5bc <_printf_i+0x1ac>
 800a592:	07df      	lsls	r7, r3, #31
 800a594:	bf44      	itt	mi
 800a596:	f043 0320 	orrmi.w	r3, r3, #32
 800a59a:	6023      	strmi	r3, [r4, #0]
 800a59c:	b91e      	cbnz	r6, 800a5a6 <_printf_i+0x196>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	f023 0320 	bic.w	r3, r3, #32
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	2310      	movs	r3, #16
 800a5a8:	e7b0      	b.n	800a50c <_printf_i+0xfc>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	f043 0320 	orr.w	r3, r3, #32
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	2378      	movs	r3, #120	; 0x78
 800a5b4:	4828      	ldr	r0, [pc, #160]	; (800a658 <_printf_i+0x248>)
 800a5b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5ba:	e7e3      	b.n	800a584 <_printf_i+0x174>
 800a5bc:	0659      	lsls	r1, r3, #25
 800a5be:	bf48      	it	mi
 800a5c0:	b2b6      	uxthmi	r6, r6
 800a5c2:	e7e6      	b.n	800a592 <_printf_i+0x182>
 800a5c4:	4615      	mov	r5, r2
 800a5c6:	e7bb      	b.n	800a540 <_printf_i+0x130>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	6826      	ldr	r6, [r4, #0]
 800a5cc:	6961      	ldr	r1, [r4, #20]
 800a5ce:	1d18      	adds	r0, r3, #4
 800a5d0:	6028      	str	r0, [r5, #0]
 800a5d2:	0635      	lsls	r5, r6, #24
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	d501      	bpl.n	800a5dc <_printf_i+0x1cc>
 800a5d8:	6019      	str	r1, [r3, #0]
 800a5da:	e002      	b.n	800a5e2 <_printf_i+0x1d2>
 800a5dc:	0670      	lsls	r0, r6, #25
 800a5de:	d5fb      	bpl.n	800a5d8 <_printf_i+0x1c8>
 800a5e0:	8019      	strh	r1, [r3, #0]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6123      	str	r3, [r4, #16]
 800a5e6:	4615      	mov	r5, r2
 800a5e8:	e7ba      	b.n	800a560 <_printf_i+0x150>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	1d1a      	adds	r2, r3, #4
 800a5ee:	602a      	str	r2, [r5, #0]
 800a5f0:	681d      	ldr	r5, [r3, #0]
 800a5f2:	6862      	ldr	r2, [r4, #4]
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f7f5 fe72 	bl	80002e0 <memchr>
 800a5fc:	b108      	cbz	r0, 800a602 <_printf_i+0x1f2>
 800a5fe:	1b40      	subs	r0, r0, r5
 800a600:	6060      	str	r0, [r4, #4]
 800a602:	6863      	ldr	r3, [r4, #4]
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	2300      	movs	r3, #0
 800a608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60c:	e7a8      	b.n	800a560 <_printf_i+0x150>
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	462a      	mov	r2, r5
 800a612:	4649      	mov	r1, r9
 800a614:	4640      	mov	r0, r8
 800a616:	47d0      	blx	sl
 800a618:	3001      	adds	r0, #1
 800a61a:	d0ab      	beq.n	800a574 <_printf_i+0x164>
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	079b      	lsls	r3, r3, #30
 800a620:	d413      	bmi.n	800a64a <_printf_i+0x23a>
 800a622:	68e0      	ldr	r0, [r4, #12]
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	4298      	cmp	r0, r3
 800a628:	bfb8      	it	lt
 800a62a:	4618      	movlt	r0, r3
 800a62c:	e7a4      	b.n	800a578 <_printf_i+0x168>
 800a62e:	2301      	movs	r3, #1
 800a630:	4632      	mov	r2, r6
 800a632:	4649      	mov	r1, r9
 800a634:	4640      	mov	r0, r8
 800a636:	47d0      	blx	sl
 800a638:	3001      	adds	r0, #1
 800a63a:	d09b      	beq.n	800a574 <_printf_i+0x164>
 800a63c:	3501      	adds	r5, #1
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	9903      	ldr	r1, [sp, #12]
 800a642:	1a5b      	subs	r3, r3, r1
 800a644:	42ab      	cmp	r3, r5
 800a646:	dcf2      	bgt.n	800a62e <_printf_i+0x21e>
 800a648:	e7eb      	b.n	800a622 <_printf_i+0x212>
 800a64a:	2500      	movs	r5, #0
 800a64c:	f104 0619 	add.w	r6, r4, #25
 800a650:	e7f5      	b.n	800a63e <_printf_i+0x22e>
 800a652:	bf00      	nop
 800a654:	0800aa59 	.word	0x0800aa59
 800a658:	0800aa6a 	.word	0x0800aa6a

0800a65c <__sread>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	460c      	mov	r4, r1
 800a660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a664:	f000 f894 	bl	800a790 <_read_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	bfab      	itete	ge
 800a66c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a66e:	89a3      	ldrhlt	r3, [r4, #12]
 800a670:	181b      	addge	r3, r3, r0
 800a672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a676:	bfac      	ite	ge
 800a678:	6563      	strge	r3, [r4, #84]	; 0x54
 800a67a:	81a3      	strhlt	r3, [r4, #12]
 800a67c:	bd10      	pop	{r4, pc}

0800a67e <__swrite>:
 800a67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a682:	461f      	mov	r7, r3
 800a684:	898b      	ldrh	r3, [r1, #12]
 800a686:	05db      	lsls	r3, r3, #23
 800a688:	4605      	mov	r5, r0
 800a68a:	460c      	mov	r4, r1
 800a68c:	4616      	mov	r6, r2
 800a68e:	d505      	bpl.n	800a69c <__swrite+0x1e>
 800a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a694:	2302      	movs	r3, #2
 800a696:	2200      	movs	r2, #0
 800a698:	f000 f868 	bl	800a76c <_lseek_r>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6a6:	81a3      	strh	r3, [r4, #12]
 800a6a8:	4632      	mov	r2, r6
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b2:	f000 b817 	b.w	800a6e4 <_write_r>

0800a6b6 <__sseek>:
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6be:	f000 f855 	bl	800a76c <_lseek_r>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	bf15      	itete	ne
 800a6c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6d2:	81a3      	strheq	r3, [r4, #12]
 800a6d4:	bf18      	it	ne
 800a6d6:	81a3      	strhne	r3, [r4, #12]
 800a6d8:	bd10      	pop	{r4, pc}

0800a6da <__sclose>:
 800a6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6de:	f000 b813 	b.w	800a708 <_close_r>
	...

0800a6e4 <_write_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d07      	ldr	r5, [pc, #28]	; (800a704 <_write_r+0x20>)
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	4608      	mov	r0, r1
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	602a      	str	r2, [r5, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f7f6 fd2b 	bl	800114e <_write>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_write_r+0x1e>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_write_r+0x1e>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	2401ea5c 	.word	0x2401ea5c

0800a708 <_close_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d06      	ldr	r5, [pc, #24]	; (800a724 <_close_r+0x1c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	f7f6 fd37 	bl	8001186 <_close>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_close_r+0x1a>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_close_r+0x1a>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	2401ea5c 	.word	0x2401ea5c

0800a728 <_fstat_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_fstat_r+0x20>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f7f6 fd32 	bl	800119e <_fstat>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d102      	bne.n	800a744 <_fstat_r+0x1c>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b103      	cbz	r3, 800a744 <_fstat_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop
 800a748:	2401ea5c 	.word	0x2401ea5c

0800a74c <_isatty_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_isatty_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f6 fd31 	bl	80011be <_isatty>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_isatty_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_isatty_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	2401ea5c 	.word	0x2401ea5c

0800a76c <_lseek_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d07      	ldr	r5, [pc, #28]	; (800a78c <_lseek_r+0x20>)
 800a770:	4604      	mov	r4, r0
 800a772:	4608      	mov	r0, r1
 800a774:	4611      	mov	r1, r2
 800a776:	2200      	movs	r2, #0
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f7f6 fd2a 	bl	80011d4 <_lseek>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_lseek_r+0x1e>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_lseek_r+0x1e>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	2401ea5c 	.word	0x2401ea5c

0800a790 <_read_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_read_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f6 fcb8 	bl	8001114 <_read>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_read_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_read_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	2401ea5c 	.word	0x2401ea5c

0800a7b4 <_init>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	bf00      	nop
 800a7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ba:	bc08      	pop	{r3}
 800a7bc:	469e      	mov	lr, r3
 800a7be:	4770      	bx	lr

0800a7c0 <_fini>:
 800a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c2:	bf00      	nop
 800a7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c6:	bc08      	pop	{r3}
 800a7c8:	469e      	mov	lr, r3
 800a7ca:	4770      	bx	lr
